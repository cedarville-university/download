      SUBROUTINE DL.EXPAND.ITEMS(ITEM.LIST,ITEM.QUOTED.LIST,ITEM.USED.LIST,NUM.ITEMS,DICT.FILE.NAME,EXPAND.PHRASES,OTHER.SEPARATORS)
*
* INFO/BASIC SUBROUTINE
* 4/11/91
* DWS
* TITLE ----- DL.EXPAND.ITEMS
*
*
* PURPOSE: EXPAND STRING OF ITEMS, CHECKING DICTIONARY & VOC FOR PHRASES
*
* Stamped: p1 rotmand, /usr/local/download, user #2041, 31 Mar 05, 08:13AM.
* Version 7.12
*     Last updated by LIVE (SJOQUIST) at 12:23:06 on 04/11/1991.
* Adapted from PARSE.LINE
*
*************************************************************************
*

      COMMON/EXPITEM/ EXPITEM.F.VOC,
      EXPITEM.VOC.OPENED,
      EXPITEM.F.DICT,
      EXPITEM.DICT.FILE.NAME

      X.MAX.RECORD.KEY.SIZE = 125

*
*
* MAIN
*

      IF NOT(EXPITEM.VOC.OPENED) THEN
         GOSUB OPEN.VOC
      END
      IF DICT.FILE.NAME AND EXPITEM.DICT.FILE.NAME # DICT.FILE.NAME THEN
         GOSUB OPEN.DICT
      END
      GOSUB SET.UP
      GOSUB MAKE.PARAM
      ITEM.LIST = PARAM.LIST
      ITEM.QUOTED.LIST = PARAM.QUOTED.LIST
      ITEM.USED.LIST = PARAM.USED.LIST
      NUM.ITEMS = NUM.PARAMS
      RETURN


*
*
* OPEN VOC FILE
*
OPEN.VOC: 
      ON.ERROR.RETURN = 0
      ERRMSG = ''
      EXPITEM.F.VOC = ''
      CALL DL.OPEN.FILE(EXPITEM.F.VOC,'VOC',ON.ERROR.RETURN,ERRMSG)
      EXPITEM.VOC.OPENED = 1
      RETURN


*
*
* OPEN DICT FILE
*
OPEN.DICT: 
      ON.ERROR.RETURN = 0
      ERRMSG = ''
      EXPITEM.F.DICT = ''
      EXPITEM.DICT.FILE.NAME = ''
      CALL DL.OPEN.FILE(EXPITEM.F.DICT,DICT.FILE.NAME,ON.ERROR.RETURN,ERRMSG)
      EXPITEM.DICT.FILE.NAME = DICT.FILE.NAME
      RETURN


*
*
* SET UP
*
SET.UP: 
      TRUE = 1
      FALSE = 0
      PARAM.LIST = ''
      PARAM.QUOTED.LIST = ''
      PARAM.USED.LIST = ''
      NUM.PARAMS = 0
      DICT.REC.TYPES.NOT.TO.EXPAND.IN.VOC = 'D':@FM:'I':@FM:'PH'
      RETURN


*
*
* COPY ITEMS LIST TO PARAMS LIST, EXPANDING ANY PHRASES IN THE
*  VOC FILE TO ALL THE ITEMS
*
MAKE.PARAM: 
      FOR ITEM.CTR=1 TO NUM.ITEMS
         ITEM.USED = ITEM.USED.LIST<ITEM.CTR>
         ITEM = ITEM.LIST<ITEM.CTR>
         ITEM.QUOTED = ITEM.QUOTED.LIST<ITEM.CTR>
         PHRASE.FOUND = FALSE
         IF NOT(ITEM.QUOTED) AND NOT(ITEM.USED) THEN
            IF LEN(ITEM) LT X.MAX.RECORD.KEY.SIZE THEN
               OKAY.TO.CHECK.VOC = TRUE
               IF DICT.FILE.NAME THEN
                  GOSUB CHECK.DICT.FOR.PHRASE
               END
               IF EXPAND.PHRASES AND OKAY.TO.CHECK.VOC THEN
                  GOSUB CHECK.VOC.FOR.PHRASE
               END
            END
         END
         IF NOT(PHRASE.FOUND) THEN
            NUM.PARAMS += 1
            PARAM.LIST<NUM.PARAMS> = ITEM
            PARAM.QUOTED.LIST<NUM.PARAMS> = ITEM.QUOTED
            PARAM.USED.LIST<NUM.PARAMS> = ITEM.USED
         END
      NEXT ITEM.CTR
      RETURN


*
*
* CHECK DICT FILE FOR A PHRASE TO BE EXPANDED
*
CHECK.DICT.FOR.PHRASE: 
      READ DICT.REC FROM EXPITEM.F.DICT, ITEM ELSE
         RETURN
      END
      IF DICT.REC<1>[1,1] = 'P' THEN
         DICT.REC.TYPE = DICT.REC<1>[1,2]
      END ELSE
         DICT.REC.TYPE = DICT.REC<1>[1,1]
      END
*
* IF THIS ITEM IS A PHRASE, THEN EXPAND THE DICTIONARY PHRASE.
* IF IT IS NOT A PHRASE, THEN CHECK IF IT IS OKAY TO CHECK THE VOC
*   FOR A PHRASE NAME TO EXPAND
* SINCE WE ARE CHECKING THE DICTIONARY FOR PHRASES, IT IS REASONABLE TO ASSUME
*   THAT WE DO NOT WANT TO CHECK THE VOC FOR A PHRASE IF THE ITEM IN
*   QUESTION IS A DATA FIELD OR I-DESC FIELD IN THE DICTIONARY
*
      IF DICT.REC.TYPE = 'PH' THEN
         OKAY.TO.CHECK.VOC = FALSE
         PHRASE.FOUND = TRUE
      END ELSE
         LOCATE DICT.REC.TYPE IN DICT.REC.TYPES.NOT.TO.EXPAND.IN.VOC<1> SETTING POS THEN
            OKAY.TO.CHECK.VOC = FALSE
         END
         RETURN
      END
*
      PHRASE.TO.CHECK = DICT.REC<2>
      PHRASE.ITEM.LIST = ''
      PHRASE.QUOTED.LIST = ''
      NUM.PHRASE.ITEMS = 0
      CALL DL.PARSE.COMMAND.LINE(PHRASE.TO.CHECK,PHRASE.ITEM.LIST,PHRASE.QUOTED.LIST,NUM.PHRASE.ITEMS,OTHER.SEPARATORS)
*
      PHRASE.USED.LIST = ''
      CALL DL.EXPAND.ITEMS(PHRASE.ITEM.LIST,PHRASE.QUOTED.LIST,PHRASE.USED.LIST,NUM.PHRASE.ITEMS,DICT.FILE.NAME,EXPAND.PHRASES,OTHER.SEPARATORS)
      GOSUB CHECK.CIRCULAR
      PARAM.LIST<NUM.PARAMS+1> = PHRASE.ITEM.LIST
      PARAM.QUOTED.LIST<NUM.PARAMS+1> = PHRASE.QUOTED.LIST
      PARAM.USED.LIST<NUM.PARAMS+1> = PHRASE.USED.LIST
      NUM.PARAMS += NUM.PHRASE.ITEMS
      RETURN


*
*
* CHECK VOC FILE FOR A PHRASE TO BE EXPANDED
*
CHECK.VOC.FOR.PHRASE: 
      READ VOC.REC FROM EXPITEM.F.VOC, ITEM ELSE
         RETURN
      END
      IF VOC.REC<1>[1,2] # 'PH' THEN
         RETURN
      END
      PHRASE.FOUND = TRUE
      PHRASE.TO.CHECK = VOC.REC<2>
      PHRASE.ITEM.LIST = ''
      PHRASE.QUOTED.LIST = ''
      NUM.PHRASE.ITEMS = 0
      CALL DL.PARSE.COMMAND.LINE(PHRASE.TO.CHECK,PHRASE.ITEM.LIST,PHRASE.QUOTED.LIST,NUM.PHRASE.ITEMS,OTHER.SEPARATORS)
*
      PHRASE.USED.LIST = ''
      CALL DL.EXPAND.ITEMS(PHRASE.ITEM.LIST,PHRASE.QUOTED.LIST,PHRASE.USED.LIST,NUM.PHRASE.ITEMS,DICT.FILE.NAME,EXPAND.PHRASES,OTHER.SEPARATORS)
      GOSUB CHECK.CIRCULAR
      PARAM.LIST<NUM.PARAMS+1> = PHRASE.ITEM.LIST
      PARAM.QUOTED.LIST<NUM.PARAMS+1> = PHRASE.QUOTED.LIST
      PARAM.USED.LIST<NUM.PARAMS+1> = PHRASE.USED.LIST
      NUM.PARAMS += NUM.PHRASE.ITEMS
      RETURN

*
*
* DO A SIMPLE CHECK FOR A CIRCULAR REFERENCE IN A VOC PHRASE
*
CHECK.CIRCULAR: 
      FOR PHRASE.ITEM.CTR=1 TO NUM.PHRASE.ITEMS
         PHRASE.QUOTED = PHRASE.QUOTED.LIST<PHRASE.ITEM.CTR>
         IF NOT(PHRASE.QUOTED) THEN
            PHRASE.ITEM = PHRASE.ITEM.LIST<PHRASE.ITEM.CTR>
            IF PHRASE.ITEM = ITEM THEN
               STOP 'Circular Reference: Phrase "':ITEM:'" references itself'
            END
         END
      NEXT PHRASE.ITEM.CTR
      RETURN

   END
