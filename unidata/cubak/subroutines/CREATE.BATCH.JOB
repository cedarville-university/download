      SUBROUTINE CREATE.BATCH.JOB(COMMAND.STRING, PARAMETERS, PROGRAM, PASSED.QUEUE.NAME, PASSED.OPTIONS)
*
* INFO/BASIC SUBROUTINE
* 5/31/89
* DWS
*
*
* MODULE : BATCH
* PURPOSE: CREATE BATCH JOB WITH NECESSARY INFO IN "BATCH.PARAGRAPHS",
*          "BATCH.PRINTERS", & "BATCH.PARAMETERS"
*
* Stamped: rb rotmand, /datatel/live/collive, user #2943, 10 Aug 00, 04:33PM.
*  New disk layout (disk12 instead of disk2)
* Stamped: pty/ttypb rotmand, /disk1/collive, user #11985, 02 Jul 94, 08:13PM.
* Updated for HP/UX
*     Last updated by LIVE (SJOQUIST) at 08:26:06 on 05/31/1989.
*
***********************************************************************SPN
*
*  COPYRIGHT (C) 1995, ROTMAN & SJOQUIST
*
*      The information contained in this file is proprietary to
*      ROTMAN & SJOQUIST.  This file may be modified for the
*      internal use of this institution, but no part of this file
*      nor any program derived from it may be distributed to any
*      other individual or institution.  Unmodified copies of this
*      file may be distributed to other individuals or institutions
*      provided that no charge is made for the copies.
*
***********************************************************************EPN
*
*
      $INCLUDE LOCAL.SOURCE I_RS.COMMON
      $INCLUDE LOCAL.SOURCE I_BATCH.COMMON

*
*
* MAIN
*

      GOSUB SET.UP
      GOSUB PROCESS.PARAGRAPH
      GOSUB GET.JOB.QUEUE.NAME
      GOSUB GET.AT.QUEUE.NAME
*PRIME*      GOSUB GET.OPTIONS
      GOSUB PROCESS.BATCH
      RETURN


*
*
* SET UP
*
SET.UP: 
      DEFAULT.AT.QUEUE.NAME = 'd'
      JOB.QUEUE.NAME.LIST = ''
      JOB.QUEUE.NAME.LIST<1,-1> = 'NIGHT1'
      JOB.QUEUE.NAME.LIST<1,-1> = 'NIGHT2'
      JOB.QUEUE.NAME.LIST<1,-1> = 'NIGHT3'
      JOB.QUEUE.NAME.LIST<1,-1> = 'NIGHT4'
      JOB.QUEUE.NAME.LIST<1,-1> = 'DAY'
      JOB.QUEUE.NAME.LIST<1,-1> = 'NOON'
      AT.QUEUE.NAME.LIST = ''
      AT.QUEUE.NAME.LIST<1,-1> = 'd'
      AT.QUEUE.NAME.LIST<1,-1> = 'e'
      AT.QUEUE.NAME.LIST<1,-1> = 'f'
      AT.QUEUE.NAME.LIST<1,-1> = 'g'
      AT.QUEUE.NAME.LIST<1,-1> = 'a'
      JOB.QUEUE.NAME.LIST<1,-1> = 'z'
      LOCATE 'DAY' IN JOB.QUEUE.NAME.LIST<1,1> SETTING DAY.POS THEN
         DAY.AT.QUEUE.NAME = AT.QUEUE.NAME.LIST<1,DAY.POS>
      END ELSE
         DAY.AT.QUEUE.NAME = 'a'
      END
*
*  BATCH QUEUE CONTROL RECORD, KEYED BY USERNAME (OCONV(@LOGNAME,'MCU'))
*   IF THERE IS NO USERNAME RECORD, THEN TRY ACCOUNT NAME (@ACCOUNT)
*   IF THERE IS NO ACCOUNT NAME RECORD, THEN TRY 'DEFAULT'
*
      BQC.KEY = OCONV(@LOGNAME,'MCU')
      MATREAD BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, BQC.KEY ELSE
         BQC.KEY = @WHO
         MATREAD BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, BQC.KEY ELSE
            BQC.KEY = 'DEFAULT'
            MATREAD BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, BQC.KEY ELSE
               CALL FATAL.ERROR('MISSING.ITEM',BQC.KEY:@FM:'BATCH.QUEUE.CONTROL')
            END
         END
      END
      RETURN


*
*
* PROCESS PARAGRAPH
*
PROCESS.PARAGRAPH: 
      GOSUB SAVE.PARAMETERS
      GOSUB FIND.NEXT.REMOTE.NAME
      GOSUB CREATE.PARAGRAPH
      GOSUB SAVE.PARAGRAPH
      GOSUB CREATE.SETPTR
      GOSUB SAVE.SETPTR
      RETURN



*
*
* SAVE PARAMETERS
*
SAVE.PARAMETERS: 
      BATCH.KEY = PROGRAM[1,23]:'_':@DATE[1]:'_':@TIME[1,5]
      WRITE PARAMETERS TO BATCHQ.F.BATCH.PARAMETERS, BATCH.KEY
      RETURN


*
*
* FIND NEXT REMOTE NAME
*
FIND.NEXT.REMOTE.NAME: 
      CTR = 1
      LOOP
         VOC.REMOTE.NAME = 'BATCH.':CTR
         FOUND = @TRUE
         READV TEST FROM BATCHQ.F.VOC, VOC.REMOTE.NAME, 0 ELSE
            FOUND = @FALSE
         END
      UNTIL NOT(FOUND)
         CTR += 1
      REPEAT
      RETURN


*
*
* CREATE PARAGRAPH
*
CREATE.PARAGRAPH: 
      PARAGRAPH = COMMAND.STRING
*
*  DEFINE AS PARAGRAPH TYPE
*
      IF PARAGRAPH<1> # 'PA' THEN
         INS 'PA' BEFORE PARAGRAPH<1>
      END
*
* INSERT COMMANDS TO HANDLE PARAMETERS
*
      LINE = 'BATCH.SETUP ':BATCH.KEY
      INS LINE BEFORE PARAGRAPH<2>
      LINE = 'BATCH.CLOSE ':BATCH.KEY:' ':VOC.REMOTE.NAME
      INS LINE BEFORE PARAGRAPH<-1>
      COMO.COMMAND = 'COMO ON BATCH.':DATE():'.':TIME()
      INS COMO.COMMAND BEFORE PARAGRAPH<2>
*
* SET UP VOC POINTER TO PARAGRAPH
*
      VOC.REMOTE.REC = ''
      VOC.REMOTE.REC<1> = 'R'
      VOC.REMOTE.REC<2> = 'BATCH.PARAGRAPHS'
      VOC.REMOTE.REC<3> = BATCH.KEY
      RETURN



*
*
* SAVE PARAGRAPH
*
SAVE.PARAGRAPH: 
      WRITE PARAGRAPH TO BATCHQ.F.BATCH.PARAGRAPHS, BATCH.KEY
      WRITE VOC.REMOTE.REC TO BATCHQ.F.VOC, VOC.REMOTE.NAME
      RETURN


*
*
* CREATE SET.PRINTER ITEMS
*
* WE CONSIDER ONLY PRINT UNIT 0 THRU 6...OTHERS HAVE TO FEND FOR THEMSELVES
*
CREATE.SETPTR: 
      MAX.PRINT.UNITS = 6
      SETPTR.COMMAND.LIST = ''
      FOR PRT.UNIT=0 TO MAX.PRINT.UNITS
         SETPTR.COMMAND.LIST<-1>= 'SETPTR ':GETPTR(PRT.UNIT)
      NEXT PRT.UNIT
      RETURN


*
*
* SAVE PRINTER CHARACTERISTICS
*
SAVE.SETPTR: 
      WRITE SETPTR.COMMAND.LIST TO BATCHQ.F.BATCH.PRINTERS, BATCH.KEY
      RETURN



*
* CREATE A BATCH JOB
*
PROCESS.BATCH: 
*
* BUILD COMMAND
*
*PRIME*      COMMAND = 'JOB ':VOC.REMOTE.NAME
*PRIME*      COMMAND := ' -ACCT ':PROGRAM
*PRIME*      IF JOB.QUEUE.NAME # '' THEN
*PRIME*         COMMAND := ' -QUEUE ':JOB.QUEUE.NAME
*PRIME*      END
*PRIME*      IF OPTIONS # '' THEN
*PRIME*         COMMAND := ' ':OPTIONS
*PRIME*      END
*PRIME*      EXECUTE COMMAND
      AT.FILE.KEY = BATCH.KEY
      AT.FILE.RECORD = ''
      AT.FILE.RECORD<-1> = 'echo ':VOC.REMOTE.NAME:'|udt'
      WRITE AT.FILE.RECORD ON BATCHQ.F.AT.FILE,AT.FILE.KEY
      COMMAND = 'at'
      COMMAND := ' -f/disk12/lcc12/LCCA/AT.FILE/':AT.FILE.KEY
      COMMAND := ' -q':AT.QUEUE.NAME
      COMMAND := ' now'
      PCPERFORM COMMAND CAPTURING AT.OUTPUT
      COUNT.AT.OUTPUT = COUNT(AT.OUTPUT,@FM)
      JOB.KEY = ''
      JOB.DATA = ''
      FOUND.JOB = @FALSE
      FOR WHICH.AT.OUTPUT = 1 TO COUNT.AT.OUTPUT UNTIL FOUND.JOB
         TEST = AT.OUTPUT<WHICH.AT.OUTPUT>
         IF TEST[1,3] = 'job' THEN
            FOUND.JOB = @TRUE
            JOB.KEY = FIELD(TEST,' ',2,1)
            JOB.DATA = FIELD(TEST,' ',3,99)
         END
      NEXT WHICH.AT.OUTPUT
      JOB.REC = JOB.KEY
      JOB.REC<2> = JOB.DATA
      JOB.REC<3> = @LOGNAME
      WRITE JOB.REC ON BATCHQ.F.AT.JOBS, BATCH.KEY
*DLR*      CRT 'AT.FILE key:     ': AT.FILE.KEY
*DLR*      CRT 'AT.FILE record:  ': AT.FILE.RECORD
*DLR*      CRT AT.OUTPUT<1>
*DLR*      CRT AT.OUTPUT<2>
      MSG = 'Job submitted: ':AT.OUTPUT<2>
      CALL LINE.22(MSG)
      RETURN


*
*
* GET QUEUE NAME
*
GET.JOB.QUEUE.NAME: 
      JOB.QUEUE.NAME = ''
      IF PASSED.QUEUE.NAME = 'NONE' THEN
         RETURN
      END
      IF PASSED.QUEUE.NAME # '' THEN
         LOCATE PASSED.QUEUE.NAME IN BQ.VALID.QUEUES<1,1> SETTING POS THEN
            JOB.QUEUE.NAME = PASSED.QUEUE.NAME
            RETURN
         END
      END
      IF BQ.PROMPT.QUEUE = 'Y' THEN
         GOSUB GET.NEXT.DEFAULT.QUEUE
         LOOP
            CRT 'QUEUE.NAME [':DEFAULT.QUEUE:']: ':
            INPUT ANS
            IF ANS = '' THEN ANS = DEFAULT.QUEUE
            LOCATE ANS IN BQ.VALID.QUEUES<1,1> SETTING CHOOSE.VALID.QUEUE ELSE
               CHOOSE.VALID.QUEUE = 0
            END
         UNTIL CHOOSE.VALID.QUEUE
         REPEAT
         JOB.QUEUE.NAME = ANS
      END ELSE
         JOB.QUEUE.NAME = BQ.DEFAULT.QUEUE
      END
      RETURN



GET.AT.QUEUE.NAME: 
      IF JOB.QUEUE.NAME = 'NONE' THEN
         AT.QUEUE.NAME = DAY.AT.QUEUE.NAME
      END ELSE
         LOCATE JOB.QUEUE.NAME IN JOB.QUEUE.NAME.LIST<1,1> SETTING NAME.POS THEN
            AT.QUEUE.NAME = AT.QUEUE.NAME.LIST<1,NAME.POS>
         END ELSE
            AT.QUEUE.NAME = DEFAULT.AT.QUEUE.NAME
         END
      END
      RETURN



*
*
* GET THE NEXT DEFAULT QUEUE TO USE
*
GET.NEXT.DEFAULT.QUEUE: 
      DEFAULT.QUEUE = '******'
      MATREADU BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, BQC.KEY THEN
         LOCATE BQ.LAST.DEFAULT.QUEUE IN BQ.DEFAULT.QUEUE<1,1> SETTING LAST.POS THEN
            DEFAULT.QUEUE = BQ.DEFAULT.QUEUE<1,LAST.POS+1>
            IF DEFAULT.QUEUE = '' THEN
               DEFAULT.QUEUE = BQ.DEFAULT.QUEUE<1,1>
            END
         END ELSE
            DEFAULT.QUEUE = BQ.DEFAULT.QUEUE<1,1>
         END
         BQ.LAST.DEFAULT.QUEUE = DEFAULT.QUEUE
         MATWRITE BQ.CONTROL.REC TO BATCHQ.F.BATCH.QUEUE.CONTROL, BQC.KEY
      END
      RETURN


*
*
* GET OPTIONS
*
*PRIME*GET.OPTIONS: 
*PRIME*      OPTIONS = ''
*PRIME*      IF PASSED.OPTIONS = 'NONE' THEN
*PRIME*         RETURN
*PRIME*      END
*PRIME*      IF BQ.PROMPT.OPTIONS = 'Y' THEN
*PRIME*         IF PASSED.OPTIONS # '' THEN
*PRIME*            OPTIONS = PASSED.OPTIONS
*PRIME*         END ELSE
*PRIME*            CRT 'ENTER OPTIONS: ':
*PRIME*            INPUT OPTIONS
*PRIME*         END
*PRIME*      END ELSE
*PRIME*         OPTIONS = ''
*PRIME*      END
*PRIME*      RETURN
*PRIME*

   END
