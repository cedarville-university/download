      SUBROUTINE FATAL.ERROR(ERROR, ERROR.PARAM)
* Batch Process FATAL.ERROR generated by ENVISION Batch Generator  -  Version 3.2 (91.10.11)
* Date: 18:56:16 26 DEC 1991
* Logname: TCI
*----------------------------------------------------------------------*
*                                                                      *
* The information contained herein is proprietary to and considered    *
* a trade secret of Datatel Minicomputer Company and shall not be      *
* reproduced in whole or in part without the written authorization of  *
* Datatel Minicomputer Company.                                        *
*                                                                      *
*----------------------------------------------------------------------*
$INCLUDE UT.INSERTS I_COMMON
$INCLUDE SOURCE.INSERTS I_SYSTEM.COMMON

*
*   CALLING SEQUENCE:  CALL FATAL.ERROR(ERRMSG.ID,ERROR.PARAMETERS)
*
*
* Include a special case for Telephone Registration.  The process must
* always login as TREG!!!  - SRM 09/26/91
*
      IF SN.USERID = "TREG" THEN
         CONVERT @FM TO "-" IN ERROR.PARAM
         PRINT
         PRINT "OPEN FAILURE (":ERROR.PARAM:")"
         EXECUTE "PTERM -FULL"
         CHAIN "LO"
      END


      RELEASE                           ;* Insure all locks are released
      CALL PRINTER.RESET                ;* Insure the printer is setup properly
      PRINTER OFF

      CLEAR.SCREEN = @(-1)
      ERRMSG = @(0,0)
      PORT = SN.TASKID
      IF TERMINAL.USER THEN
         PHANTOM = @FALSE
      END ELSE
         PHANTOM = @TRUE
      END
      IF PHANTOM THEN
         PRINTER ON
      END
      GOSUB GET.MSG
      GOSUB PROCESS.MSG
      GOSUB WRAP.UP
      STOP


GET.MSG:
      OPEN "","ERRMSG.COLL" TO F.ERRMSG ELSE
         CRT CLEAR.SCREEN:@(10,6):"The 'ERRMSG.COLL' File is missing":
         CRT @(10,9):"or is improperly defined in the VOC file."
         GOSUB WRAP.UP
         STOP
      END

      READ ERRMSG FROM F.ERRMSG,ERROR ELSE
         CRT CLEAR.SCREEN:@(10,6):"The Item '":ERROR:"' has not been defined":
         CRT @(10,8):"in the 'ERRMSG.COLL' file.  Parameters passed:"
         CRT @(15,9):ERROR.PARAM
         GOSUB WRAP.UP
         STOP
      END
      RETURN



PROCESS.MSG:
      CUR.PARM = 0
      LAST.SPACES = 0
      WHICH.FIELD = 1
      LOOP
         LINE = EXTRACT(ERRMSG,WHICH.FIELD,0,0)
      UNTIL LINE = "" DO
         CHR = LINE[1,1]
         LINE = LINE[2,32267]
         GOSUB PROCESS.LINE
      REPEAT
      RETURN


PROCESS.LINE:
      BEGIN CASE
*   L(N) -- line feed n (optional) times
         CASE CHR = 'L'
            NUMB = FIELD(FIELD(LINE,"(",2),")",1)
            IF NUMB = "" THEN NUMB = 1
            FOR J = 1 TO NUMB
               CRT
            NEXT J
*   A(N) OR R(N) -- JUSTIFY THE NEXT PARAMETER IN N BLANKS
*                   'A' IS LEFT JUSTIFIED, 'R' IS RIGHT
         CASE CHR = 'A' OR CHR = 'R'
            NUMB = FIELD(FIELD(LINE,"(",2),")",1)
            CUR.PARM = CUR.PARM + 1
            PARAM = EXTRACT(ERROR.PARAM,CUR.PARM,0,0)
            IF NUMB = "" THEN NUMB = LEN(PARAM)
            IF NUMB > 1920 THEN NUMB = 1920       ;* unidata limit on FMT result
            IF CHR = "A" THEN NUMB = "L#":NUMB ELSE NUMB = "R#":NUMB
            CRT FMT(PARAM,NUMB):
*   D -- CURRENT SYSTEM DATE  DD MMM YYYY
         CASE CHR = 'D'
            CRT OCONV(DATE(),"D"):
*   T -- CURRENT SYSTEM TIME  HH:MM:SS
         CASE CHR = 'T'
            CRT OCONV(TIME(),'MTHS'):
*   X -- SKIP THE NEXT PARAMETER
         CASE CHR = 'X'
            CUR.PARM += 1
*   S(N) -- PRINT N SPACESS
         CASE CHR = 'S'
            NUMB = FIELD(FIELD(LINE,"(",2),")",1)
            IF NUMB = "" THEN NUMB = 1
            CRT SPACE(NUMB):
            LAST.SPACES = NUMB
*   E -- DISPLAY THE MESSAGE ID IN BRACKETS
         CASE CHR = 'E' OR CHR = 'H'
            IF CHR = 'E' THEN
               CRT '[':ERROR:']':
            END
*   H -- DISPLAY THE TEXT VERBATIM
            IF LINE = CHAR(12) THEN
               LINE = @(-1)
            END
            CRT LINE:
*  V(N) -- FORMAT PARAMETER IN MESSAGE BLOCK 'N' CHARS
*          PER LINE
         CASE CHR = 'V'
            NUMB = FIELD(FIELD(LINE,"(",2),")",1)
            CUR.PARM = CUR.PARM + 1
            PARAM = EXTRACT(ERROR.PARAM,CUR.PARM,0,0)
            IF NUMB = "" THEN NUMB = 65
            TOTAL.LENGTH = LEN(PARAM)
            IF TOTAL.LENGTH > 1920 THEN TOTAL.LENGTH = 1920 ;* unidata limit on FMT result
            PARAM = PARAM[1,TOTAL.LENGTH]
            PARAM = TRIM(PARAM)
            PARAM = FMT(PARAM,NUMB:"T")
            CONVERT @TM TO @VM IN PARAM
            MAX.TEXT = COUNT(PARAM,@VM) + (PARAM NE "")
            FOR TCTR = 1 TO MAX.TEXT
               IF TCTR = 1 THEN
                  CRT FMT(TRIM(PARAM<1,TCTR>),"L#":NUMB)
               END ELSE
                  CRT SPACE(LAST.SPACES):FMT(TRIM(PARAM<1,TCTR>),"L#":NUMB)
               END
            NEXT TCTR
      END CASE
      WHICH.FIELD += 1
      RETURN


WRAP.UP:
      PRINTER OFF
      PRINTER CLOSE
      IF TERMINAL.USER THEN
         CRT @(0,23):@(-4):"Press RETURN to continue: ":
         INPUT CR:
         CRT @(0,23):@(-4):
      END
      EXECUTE 'RESET.TERM'
      RETURN

   END
