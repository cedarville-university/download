      SUBROUTINE PHANTOM.PROCESS(COMMAND.STRING, PARAMETERS, PROGRAM)
*
* INFO/BASIC SUBROUTINE
* 3/7/88
* DWS
* REL 1.0
*
*
* MODULE : BATCH
* PURPOSE: REPLACE DATATEL 'PHANT' PROCESSOR WITH TRUE PRIMOS 'BATCH'
*
* Stamped: pty/ttyp2 rotmand, /disk1/collive, user #23305, 04 Jul 94, 09:04AM.
* Stamped: pty/ttyp2 sjoquist, /disk1/coltest, user #628, 23 Jun 94, 02:50PM.
* Rewritten for HP/UX
*     Last updated by LIVE (SJOQUIST) at 09:06:18 on 11/03/1988.
* Save multiple print unit settings (0 thru MAX.PRINT.UNITS)
*     Last updated by LIVE (ROTMAN) at 14:12:32 on 05/27/1988.
* CAPTURE PRINTER SETTINGS SO THAT THEY CAN BE RESTORED BY BATCH.SETUP
*     Last updated by LIVE (SJOQUIST) at 16:08:15 on 03/07/1988.
*
***********************************************************************SPN
*
*  COPYRIGHT (C) 1995, ROTMAN & SJOQUIST
*
*      The information contained in this file is proprietary to
*      ROTMAN & SJOQUIST.  This file may be modified for the
*      internal use of this institution, but no part of this file
*      nor any program derived from it may be distributed to any
*      other individual or institution.  Unmodified copies of this
*      file may be distributed to other individuals or institutions
*      provided that no charge is made for the copies.
*
***********************************************************************EPN
*

      $INCLUDE LOCAL.SOURCE I_BATCH.COMMON

*
*
* MAIN
*

      GOSUB SET.UP
      GOSUB CHOOSE.METHOD
      BEGIN CASE
         CASE CHOICE = 'BATCH'
            PASSED.QUEUE = ''
            PASSED.OPTIONS = ''
            CALL CREATE.BATCH.JOB(COMMAND.STRING, PARAMETERS, PROGRAM, PASSED.QUEUE, PASSED.OPTIONS)
         CASE CHOICE = 'PHANTOM'
            GOSUB PROCESS.PARAGRAPH
            EXECUTE 'PHANTOM ':VOC.REMOTE.NAME
         CASE CHOICE = 'DATATEL'
            CALL DATATEL.PHANTOM.PROCESS(PARAGRAPH, PARAMETERS, PROGRAM)
      END CASE
      RETURN


*
*
* SET UP
*
SET.UP: 
*
*  BATCH QUEUE CONTROL RECORD, KEYED BY USERNAME (@LOGNAME)
*   IF THERE IS NO USERNAME RECORD, THEN TRY ACCOUNT NAME (@WHO)
*   IF THERE IS NO ACCOUNT NAME RECORD, THEN TRY 'DEFAULT'
*
      USER.NAME = OCONV(@LOGNAME,'MCU')
      MATREAD BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, USER.NAME ELSE
         MATREAD BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, @WHO ELSE
            MATREAD BQ.CONTROL.REC FROM BATCHQ.F.BATCH.QUEUE.CONTROL, 'DEFAULT' ELSE
               CALL FATAL.ERROR('MISSING.ITEM','DEFAULT':@FM:'BATCH.QUEUE.CONTROL')
            END
         END
      END
      RETURN



*
*
* CHOOSE METHOD
*
CHOOSE.METHOD: 
      CHOICE = 'BATCH'
      IF BQ.ALLOW.PHANTOM = 'Y' OR USE.DATATEL.PHANTOM THEN
*
* BATCH PROCESS
*
         CRT
         CRT 'DO YOU WISH TO RUN THIS AS A:'
         CRT '  [B]ATCH JOB'
         PROMPT.STRING = 'ENTER "B"'
         VALID.CHOICES = 'B'
*
* TRUE PHANTOMS
*
         IF BQ.ALLOW.PHANTOM THEN
            CRT '  [P]HANTOM JOB (TRUE HP PHANTOM)'
            PROMPT.STRING := ',"P"'
            VALID.CHOICES := @VM:'P'
         END
*
* DATATEL PHANT PROCESSOR
*
         IF USE.DATATEL.PHANTOM THEN
            CRT '  [D]ATATEL PHANTOM (USING PHANT)'
            PROMPT.STRING := ',"D"'
            VALID.CHOICES := @VM:'D'
         END
         PROMPT.STRING := ',[NL]="B": '
         LOOP
            CRT PROMPT.STRING:
            INPUT ANS
            IF ANS = '' THEN ANS = 'B'
            LOCATE ANS IN VALID.CHOICES<1,1> SETTING VALID.ANS ELSE
               VALID.ANS = @FALSE
            END
         UNTIL VALID.ANS
         REPEAT
         BEGIN CASE
            CASE ANS = 'B'
               CHOICE = 'BATCH'
            CASE ANS = 'P'
               CHOICE = 'PHANTOM'
            CASE ANS = 'D'
               CHOICE = 'DATATEL'
         END CASE
      END
      RETURN


*
*
* PROCESS PARAGRAPH
*
PROCESS.PARAGRAPH: 
      GOSUB SAVE.PARAMETERS
      GOSUB FIND.NEXT.REMOTE.NAME
      GOSUB CREATE.PARAGRAPH
      GOSUB SAVE.PARAGRAPH
      GOSUB CREATE.SETPTR
      GOSUB SAVE.SETPTR
      RETURN



*
*
* SAVE PARAMETERS
*
SAVE.PARAMETERS: 
      BATCH.KEY = PROGRAM[1,23]:'_':@DATE[1]:'_':@TIME[1,5]
      WRITE PARAMETERS TO BATCHQ.F.BATCH.PARAMETERS, BATCH.KEY
      RETURN


*
*
* FIND NEXT REMOTE NAME
*
FIND.NEXT.REMOTE.NAME: 
      CTR = 1
      LOOP
         VOC.REMOTE.NAME = 'BATCH.':CTR
         FOUND = @TRUE
         READV TEST FROM BATCHQ.F.VOC, VOC.REMOTE.NAME, 0 ELSE
            FOUND = @FALSE
         END
      UNTIL NOT(FOUND)
         CTR += 1
      REPEAT
      RETURN


*
*
* CREATE PARAGRAPH
*
CREATE.PARAGRAPH: 
      PARAGRAPH = COMMAND.STRING
*
*  DEFINE AS PARAGRAPH TYPE
*
      IF PARAGRAPH<1> # 'PA' THEN
         INS 'PA' BEFORE PARAGRAPH<1>
      END
*
* INSERT COMMANDS TO HANDLE PARAMETERS
*
      LINE = 'BATCH.SETUP ':BATCH.KEY
      INS LINE BEFORE PARAGRAPH<2>
      LINE = 'BATCH.CLOSE ':BATCH.KEY:' ':VOC.REMOTE.NAME
      INS LINE BEFORE PARAGRAPH<-1>
*
* SET UP VOC POINTER TO PARAGRAPH
*
      VOC.REMOTE.REC = ''
      VOC.REMOTE.REC<1> = 'R'
      VOC.REMOTE.REC<2> = 'BATCH.PARAGRAPHS'
      VOC.REMOTE.REC<3> = BATCH.KEY
      RETURN



*
*
* SAVE PARAGRAPH
*
SAVE.PARAGRAPH: 
      WRITE PARAGRAPH TO BATCHQ.F.BATCH.PARAGRAPHS, BATCH.KEY
      WRITE VOC.REMOTE.REC TO BATCHQ.F.VOC, VOC.REMOTE.NAME
      RETURN


*
*
* CREATE SET.PRINTER ITEMS
*
* WE CONSIDER ONLY PRINT UNIT 0 THRU 6...OTHERS HAVE TO FEND FOR THEMSELVES
*
CREATE.SETPTR: 
      MAX.PRINT.UNITS = 6
      SETPTR.REC = ''
      FOR PRT.UNIT=0 TO MAX.PRINT.UNITS
         SETPTR.REC<PRT.UNIT+1> = 'SETPTR ':GETPTR(PRT.UNIT)
      NEXT PRT.UNIT
      RETURN


*
*
* SAVE PRINTER CHARACTERISTICS
*
SAVE.SETPTR: 
      WRITE SETPTR.REC TO BATCHQ.F.BATCH.PRINTERS, BATCH.KEY
      RETURN



   END
