*
* INFO/BASIC PROGRAM
* 10/20/87
* DLR
* TITLE ----- CROSS.TAB
*
*
* PRODUCE CROSS-TABULATIONS OF AN INFORMATION FILE
* OPTIONALLY PRODUCE SELECT LIST FOR EACH CELL LOCATION
*
* Stamped: p1 rotmand, /datatel/live/collive, user #14246, 08 Dec 00, 05:12PM.
*  Add HTML output (directed to a file)
* Stamped: pa rotmand, /disk1/collive, user #4813, 09 Dec 99, 12:30PM.
*   Version 4.0
*    Add -ROW.PCT and -COL.PCT options
* Stamped: p6 rotmand, /disk1/collive, user #29297, 12 Feb 99, 08:08AM.
*   Change -HEADING option to use Uniquery-style strings for
*      gaps, date, time, etc.
*   Remove "-FORM" as a command option (rely on the user to issue
*      an appropriate SETPTR command)
* Stamped: rd rotmand, /disk1/collive, user #16499, 23 Oct 97, 03:30PM.
*   Fix bug which caused final MEAN and SUM to be omitted in some
*   cases.
* Stamped: pty/ttyp6 sjoquist, /disk1/collive, user #4292, 24 Jun 94, 03:25PM.
* Updated for HP-UX
*     Last updated by LIVE (ROTMAND) at 09:56:44 on 05/05/1994.
* Add -DOUBLE.COLUMN and -NO.ZERO.COUNTS options.
*     Last updated by LIVE (ROTMAN) at 10:54:20 on 10/30/1991.
* Added REQUIRE.SELECT, LEFT.COL.HEADING, and RIGHT.COL.HEADING.
*     Last updated by LIVE (ROTMAN) at 11:22:07 on 08/20/1991.
* Total rewrite, incorporating all changes from 1987-1991.
*     Last updated by LIVE (ROTMAN) at 08:32:04 on 10/20/1987.
*
*************************************************************************


      COMMAND.LINE = @SENTENCE
      X.VERSION = '5.0'
      GOSUB SET.UP.DEFAULTS
      GOSUB LOAD.PARAMETERS
      IK$SLACTIVE = 1
      FROM.UNIT = 0
      SELECT.IS.ACTIVE = SELECTINFO(FROM.UNIT,IK$SLACTIVE)
      IF REQUIRE.SELECT AND NOT(SELECT.IS.ACTIVE) THEN
         ERRMSG<-1> = 'No select list active.  Processing terminated.'
         NUM.ERRORS += 1
      END
      IF NUM.ERRORS > 0 THEN
         GOSUB PRINT.ERRORS
         STOP
      END
      GOSUB OPEN.FILES
      GOSUB SETUP.TABLES

      IF HAVE.LPTR THEN
         NO.PAUSE = @(0,0)
      END
      NUM.SRC.KEYS = 0
      NUM.SRC.RECS = 0
      NOT.COUNTED = 0
      DONE = 0
      IF NOT(REQUIRE.SELECT) AND NOT(SELECT.IS.ACTIVE) THEN
         IF GET.LIST.NAME THEN
            EXECUTE 'GET.LIST ':GET.LIST.NAME
         END ELSE
            SELECT F.SRC
         END
      END
      LOOP
         READNEXT SRC.KEY ELSE DONE = 1
      UNTIL DONE
         NUM.SRC.KEYS += 1
         IF MOD(NUM.SRC.KEYS,20) = 0 THEN
            CRT '*':
            IF MOD(NUM.SRC.KEYS,1000) = 0 THEN
               CRT ' ':NUM.SRC.KEYS
            END
         END
         GOSUB READ.RECORD
         IF ON.FILE THEN
            GOSUB TALLY.RECORD
         END
      REPEAT

      CRT
      GOSUB SORT.RESULTS
      BEGIN CASE
         CASE HAVE.LPTR
            PRINTER ON
         CASE HAVE.OUTPUT.FILE
            R.OUTPUT.FILE = ''
         CASE 1
            GOSUB GET.TERMINAL.WIDTH
            PRINT.WIDTH = TERMINAL.WIDTH
      END CASE
      IF OUTPUT.FORMAT = 'HTML' THEN
         GOSUB PRINT.HTML.RESULTS
      END ELSE
         GOSUB PRINT.TEXT.RESULTS
      END
      IF HAVE.OUTPUT.FILE THEN
         WRITE R.OUTPUT.FILE ON F.OUTPUT.DIR.NAME, OUTPUT.RECORD.NAME
         NUM.LINES = DCOUNT(R.OUTPUT.FILE,@FM)
         CRT NUM.LINES:' LINES WRITTEN TO ':OUTPUT.DIR.NAME:' ':OUTPUT.RECORD.NAME
      END
      IF MAKE.SELECT THEN
         GOSUB FORM.SELECT.LISTS
      END
      STOP


SET.UP.DEFAULTS: 
      MAX.ARRAY.SIZE = 16382
      DIM PARAM(25)
      DIM SELECT.LISTS(1,1)             ;* DIM CHANGED LATER IF NEEDED
      DIM CROSS.COUNTS(1,1)
      DIM CROSS.SUMS(1,1)
      DIM CROSS.MEANS(1,1)
      DEFAULT.DIM1              = 250
      DEFAULT.DIM2              = 60
      DEFAULT.LEFT.COL.WIDTH    = 10
      DEFAULT.RIGHT.COL.WIDTH   = 8
      DEFAULT.TOTAL.COL.WIDTH   = DEFAULT.RIGHT.COL.WIDTH + 1
      DEFAULT.PRINT.WIDTH       = 132
      DEFAULT.PREFIX            = 'XTAB.'
      DEFAULT.USE.DOUBLE.COLUMN = @FALSE
      DEFAULT.NO.ZERO.COUNTS    = @FALSE
      DEFAULT.OUTPUT.FORMAT     = 'TEXT'

      MAX.LEFT.FIELD        = DEFAULT.DIM1
      MAX.RIGHT.FIELD       = DEFAULT.DIM2
      LEFT.COL.WIDTH        = DEFAULT.LEFT.COL.WIDTH
      RIGHT.COL.WIDTH       = DEFAULT.RIGHT.COL.WIDTH
      PRINT.WIDTH           = DEFAULT.PRINT.WIDTH
      TOTAL.COL.WIDTH       = DEFAULT.TOTAL.COL.WIDTH
      USE.DOUBLE.COLUMN     = DEFAULT.USE.DOUBLE.COLUMN
      NO.ZERO.COUNTS        = DEFAULT.NO.ZERO.COUNTS
      OUTPUT.FORMAT = DEFAULT.OUTPUT.FORMAT
      HAVE.OUTPUT.FILE = @FALSE
      RETURN


READ.RECORD: 
      READ SRC.REC FROM F.SRC, SRC.KEY THEN
         ON.FILE = @TRUE
         NUM.SRC.RECS += 1
      END ELSE
         ON.FILE = @FALSE
         CRT
         CRT 'WARNING...........RECORD NOT ON FILE: ':SRC.KEY
      END
      RETURN


TALLY.RECORD: 
      IF LEFT.FIELD.TYPE = 'D' THEN
         IF LEFT.FIELD.LOC = 0 THEN
            LEFT.FIELD.VALUE.LIST = SRC.KEY
         END ELSE
            LEFT.FIELD.VALUE.LIST = SRC.REC<LEFT.FIELD.LOC>
         END
      END ELSE
         @RECORD = SRC.REC
         @ID = SRC.KEY
         LEFT.FIELD.VALUE.LIST = ITYPE(LEFT.FIELD.DICT.REC)
      END

      IF RIGHT.FIELD.TYPE = 'D' THEN
         IF RIGHT.FIELD.LOC = 0 THEN
            RIGHT.FIELD.VALUE.LIST = SRC.KEY
         END ELSE
            RIGHT.FIELD.VALUE.LIST = SRC.REC<RIGHT.FIELD.LOC>
         END
      END ELSE
         @RECORD = SRC.REC
         @ID = SRC.KEY
         RIGHT.FIELD.VALUE.LIST = ITYPE(RIGHT.FIELD.DICT.REC)
      END

      IF HAVE.SUM.OPTION THEN
         IF SUM.FIELD.TYPE = 'D' THEN
            IF SUM.FIELD.LOC = 0 THEN
               SUM.VALUE = SRC.KEY
            END ELSE
               SUM.VALUE = SRC.REC<SUM.FIELD.LOC,1,1>
            END
         END ELSE
            @RECORD = SRC.REC
            @ID = SRC.KEY
            SUM.VALUE = ITYPE(SUM.FIELD.DICT.REC)
            SUM.VALUE = SUM.VALUE<1,1,1>
         END
      END

      IF HAVE.MEAN.OPTION THEN
         IF MEAN.FIELD.TYPE = 'D' THEN
            IF MEAN.FIELD.LOC = 0 THEN
               MEAN.VALUE = SRC.KEY
            END ELSE
               MEAN.VALUE = SRC.REC<MEAN.FIELD.LOC,1,1>
            END
         END ELSE
            @RECORD = SRC.REC
            @ID = SRC.KEY
            MEAN.VALUE = ITYPE(MEAN.FIELD.DICT.REC)
            MEAN.VALUE = MEAN.VALUE<1,1,1>
         END
      END

      COUNT.LEFT.FIELD = COUNT(LEFT.FIELD.VALUE.LIST,@VM)+1
      COUNT.RIGHT.FIELD = COUNT(RIGHT.FIELD.VALUE.LIST,@VM)+1

      FOR WHICH.LEFT.FIELD = 1 TO COUNT.LEFT.FIELD
         LEFT.FIELD.VALUE = LEFT.FIELD.VALUE.LIST<1,WHICH.LEFT.FIELD>
         IF LEFT.FIELD.VALUE = '' THEN
            IF RANGE1.LOW = '' THEN
               LEFT.SUB = 1
            END ELSE
               LEFT.SUB = 0
            END
         END ELSE
            LOCATE LEFT.FIELD.VALUE IN LEFT.FIELD.LIST<1,1> SETTING LEFT.SUB ELSE
               LEFT.SUB = 0
            END
            IF LEFT.SUB = 0 AND RANGE1.LOW = '' THEN
               NUM.LEFT.FIELD += 1
               IF NUM.LEFT.FIELD >= MAX.LEFT.FIELD THEN
                  IF HAVE.LPTR THEN
                     PRINT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':LEFT.FIELD
                     PRINT 'ATTEMPTING TO STORE VALUE ':LEFT.FIELD.VALUE
                  END
                  CRT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':LEFT.FIELD
                  CRT 'ATTEMPTING TO STORE VALUE ':LEFT.FIELD.VALUE
                  EXECUTE 'CLEARSELECT'
                  STOP
               END
               LEFT.FIELD.LIST<1,NUM.LEFT.FIELD> = LEFT.FIELD.VALUE
               LEFT.SUB = NUM.LEFT.FIELD
            END
         END
         FOR WHICH.RIGHT.FIELD = 1 TO COUNT.RIGHT.FIELD
            RIGHT.FIELD.VALUE = RIGHT.FIELD.VALUE.LIST<1,WHICH.RIGHT.FIELD>
            IF RIGHT.FIELD.VALUE = '' THEN
               IF RANGE2.LOW = '' THEN
                  RIGHT.SUB = 1
               END ELSE
                  RIGHT.SUB = 0
               END
            END ELSE
               LOCATE RIGHT.FIELD.VALUE IN RIGHT.FIELD.LIST<1,1> SETTING RIGHT.SUB ELSE RIGHT.SUB = 0
               IF RIGHT.SUB = 0 AND RANGE2.LOW = '' THEN
                  NUM.RIGHT.FIELD += 1
                  IF NUM.RIGHT.FIELD >= MAX.RIGHT.FIELD THEN
                     IF HAVE.LPTR THEN
                        PRINT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':RIGHT.FIELD
                        PRINT 'TRYING TO STORE VALUE ':RIGHT.FIELD.VALUE
                     END
                     CRT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':RIGHT.FIELD
                     CRT 'TRYING TO STORE VALUE ':RIGHT.FIELD.VALUE
                     EXECUTE 'CLEARSELECT'
                     STOP
                  END
                  RIGHT.FIELD.LIST<1,NUM.RIGHT.FIELD> = RIGHT.FIELD.VALUE
                  RIGHT.SUB = NUM.RIGHT.FIELD
               END
            END

            IF LEFT.SUB # 0 AND RIGHT.SUB # 0 THEN
               CROSS.COUNTS(LEFT.SUB,RIGHT.SUB) += 1
               CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.SUB) += 1
               CROSS.COUNTS(LEFT.SUB,MAX.RIGHT.FIELD) += 1
               CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD) += 1
               IF HAVE.SUM.OPTION THEN
                  CROSS.SUMS(LEFT.SUB,RIGHT.SUB) += SUM.VALUE
                  CROSS.SUMS(MAX.LEFT.FIELD,RIGHT.SUB) += SUM.VALUE
                  CROSS.SUMS(LEFT.SUB,MAX.RIGHT.FIELD) += SUM.VALUE
                  CROSS.SUMS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD) += SUM.VALUE
               END
               IF HAVE.MEAN.OPTION THEN
                  CROSS.MEANS(LEFT.SUB,RIGHT.SUB) += MEAN.VALUE
                  CROSS.MEANS(MAX.LEFT.FIELD,RIGHT.SUB) += MEAN.VALUE
                  CROSS.MEANS(LEFT.SUB,MAX.RIGHT.FIELD) += MEAN.VALUE
                  CROSS.MEANS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD) += MEAN.VALUE
               END
               IF MAKE.SELECT THEN
                  SELECT.LISTS(LEFT.SUB,RIGHT.SUB) = SELECT.LISTS(LEFT.SUB,RIGHT.SUB):@FM:SRC.KEY
               END
            END ELSE
               NOT.COUNTED += 1
            END
         NEXT WHICH.RIGHT.FIELD
      NEXT WHICH.LEFT.FIELD
      RETURN


***************************************************************************
* BUILD INITIAL VALUES FOR CODE TABLES
* SINCE WE MAY TALLY SOME NULL VALUES, WE FORCE THE FIRST ENTRY IN EACH
* TABLE TO BE A NULL
***************************************************************************
SETUP.TABLES: 
      LEFT.FIELD.LIST = ''
      NUM.LEFT.FIELD = 1
      RIGHT.FIELD.LIST = ''
      NUM.RIGHT.FIELD = 1
      IF CODE.FILE1 # '' THEN
         GOSUB BUILD.FROM.CODE.FILE1
      END
      IF CODE.FILE2 # '' THEN
         GOSUB BUILD.FROM.CODE.FILE2
      END
      IF RANGE1.LOW # '' THEN
         GOSUB BUILD.FROM.RANGE1
      END
      IF RANGE2.LOW # '' THEN
         GOSUB BUILD.FROM.RANGE2
      END
      IF MAKE.SELECT THEN
         DIM SELECT.LISTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         MAT SELECT.LISTS = ''
      END
      RETURN


BUILD.FROM.CODE.FILE1: 
      LIST.NUMBER.TO.USE = ''
      CALL GET.UNUSED.SELECT.LIST(LIST.NUMBER.TO.USE)
      IF LIST.NUMBER.TO.USE < 0 THEN
         CRT 'Warning...unable to pre-load code file.  All select lists are in use.'
         RETURN
      END
      SELECT F.CODE.FILE1 TO LIST.NUMBER.TO.USE
      DONE = 0
      LOOP
         READNEXT LEFT.FIELD.ID FROM LIST.NUMBER.TO.USE ELSE DONE = 1
      UNTIL DONE
         NUM.LEFT.FIELD += 1
         IF NUM.LEFT.FIELD >= MAX.LEFT.FIELD THEN
            IF HAVE.LPTR THEN
               PRINT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':LEFT.FIELD
               PRINT 'ATTEMPTING TO STORE VALUE ':LEFT.FIELD.VALUE
            END
            CRT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':LEFT.FIELD
            CRT 'ATTEMPTING TO STORE VALUE ':LEFT.FIELD.VALUE
            STOP
         END
         LOCATE LEFT.FIELD.ID IN LEFT.FIELD.LIST<1,1> BY "AL" SETTING POS ELSE
            INS LEFT.FIELD.ID BEFORE LEFT.FIELD.LIST<1,POS>
         END
      REPEAT
      RETURN


BUILD.FROM.CODE.FILE2: 
      LIST.NUMBER.TO.USE = ''
      CALL GET.UNUSED.SELECT.LIST(LIST.NUMBER.TO.USE)
      IF LIST.NUMBER.TO.USE < 0 THEN
         CRT 'Warning...unable to pre-load code file.  All select lists are in use.'
         RETURN
      END
      SELECT F.CODE.FILE2 TO LIST.NUMBER.TO.USE
      DONE = 0
      LOOP
         READNEXT RIGHT.FIELD.ID FROM LIST.NUMBER.TO.USE ELSE DONE = 1
      UNTIL DONE
         NUM.RIGHT.FIELD += 1
         IF NUM.RIGHT.FIELD >= MAX.RIGHT.FIELD THEN
            IF HAVE.LPTR THEN
               PRINT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':RIGHT.FIELD
               PRINT 'ATTEMPTING TO STORE VALUE ':RIGHT.FIELD.VALUE
            END
            CRT 'MAXIMUM SUBSCRIPT SIZE EXCEEDED FOR ':RIGHT.FIELD
            CRT 'ATTEMPTING TO STORE VALUE ':RIGHT.FIELD.VALUE
            STOP
         END
         LOCATE RIGHT.FIELD.ID IN RIGHT.FIELD.LIST<1,1> BY "AL" SETTING POS ELSE
            INS RIGHT.FIELD.ID BEFORE RIGHT.FIELD.LIST<1,POS>
         END
      REPEAT
      RETURN


BUILD.FROM.RANGE1: 
      NUM.LEFT.FIELD = 0
      FOR WHICH.LEFT.FIELD = RANGE1.LOW TO RANGE1.HIGH
         NUM.LEFT.FIELD += 1
         LEFT.FIELD.LIST<1,NUM.LEFT.FIELD> = WHICH.LEFT.FIELD
      NEXT WHICH.LEFT.FIELD
      RETURN


BUILD.FROM.RANGE2: 
      NUM.RIGHT.FIELD = 0
      FOR WHICH.RIGHT.FIELD = RANGE2.LOW TO RANGE2.HIGH
         NUM.RIGHT.FIELD += 1
         RIGHT.FIELD.LIST<1,NUM.RIGHT.FIELD> = WHICH.RIGHT.FIELD
      NEXT WHICH.RIGHT.FIELD
      RETURN


SORT.RESULTS: 
      DIM LEFT.FIELD.ARRAY(NUM.LEFT.FIELD)
      DIM LEFT.FIELD.INDEX(NUM.LEFT.FIELD)
      FOR I = 1 TO NUM.LEFT.FIELD
         LEFT.FIELD.INDEX(I) = I
      NEXT I
      MATPARSE LEFT.FIELD.ARRAY FROM LEFT.FIELD.LIST,@VM
      CALL SORT.INDEX(MAT LEFT.FIELD.ARRAY,MAT LEFT.FIELD.INDEX,NUM.LEFT.FIELD,'A')

      DIM RIGHT.FIELD.ARRAY(NUM.RIGHT.FIELD)
      DIM RIGHT.FIELD.INDEX(NUM.RIGHT.FIELD)
      FOR I = 1 TO NUM.RIGHT.FIELD
         RIGHT.FIELD.INDEX(I) = I
      NEXT I
      MATPARSE RIGHT.FIELD.ARRAY FROM RIGHT.FIELD.LIST,@VM
      CALL SORT.INDEX(MAT RIGHT.FIELD.ARRAY,MAT RIGHT.FIELD.INDEX,NUM.RIGHT.FIELD,'A')

      RETURN


PRINT.TEXT.RESULTS: 
      IF HAVE.LPTR THEN
         PRINTER ON
      END
      IF TITLE.TEXT = '' THEN
         IF NOT(HAVE.OUTPUT.FILE) THEN
            HEADING " "
         END
         PRINT.LINE = 'CROSS.TAB OF ':LEFT.FIELD
         PRINT.LINE := ' AND ':RIGHT.FIELD:' FOR FILE ':SRC.FILENAME
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = 'CELL CONTENTS: '
         IF HAVE.COUNT.OPTION THEN
            PRINT.LINE := ' COUNTS'
         END
         IF HAVE.SUM.OPTION THEN
            PRINT.LINE := ' SUM(':SUM.FIELD:')'
         END
         IF HAVE.MEAN.OPTION THEN
            PRINT.LINE := ' MEAN(':MEAN.FIELD:')'
         END
         GOSUB PRINT.PRINT.LINE

         IF RANGE1.LOW # '' THEN
            PRINT.LINE = 'USING ':LEFT.FIELD
            PRINT.LINE := ' RANGE:  ':RANGE1.LOW:'-':RANGE1.HIGH
            GOSUB PRINT.PRINT.LINE
         END
         IF RANGE2.LOW # '' THEN
            PRINT.LINE = 'USING ':RIGHT.FIELD
            PRINT.LINE := ' RANGE:  ':RANGE2.LOW:'-':RANGE2.HIGH
            GOSUB PRINT.PRINT.LINE
         END
         PRINT.LINE = OCONV(DATE(),"D2/"):' ':OCONV(TIME(),"MTHS")
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = ' '
         GOSUB PRINT.PRINT.LINE
         GOSUB PRINT.PRINT.LINE
      END ELSE
         IF HAVE.OUTPUT.FILE THEN
            PRINT.LINE = TITLE.TEXT
            GOSUB PRINT.PRINT.LINE
         END ELSE
            HEADING TITLE.TEXT
         END
      END

      IF CROSS.COUNTS(MAX.LEFT.FIELD,1) GT 0 THEN
         RIGHT.START.POSITION = 1
      END ELSE
         RIGHT.START.POSITION = 2
      END
      IF CROSS.COUNTS(1,MAX.RIGHT.FIELD) GT 0 THEN
         LEFT.START.POSITION = 1
      END ELSE
         LEFT.START.POSITION = 2
      END

      LEFT.COL.FMT = LEFT.COL.WIDTH:'L'
      RIGHT.COL.FMT = RIGHT.COL.WIDTH:'R'
      TOTAL.COL.FMT = TOTAL.COL.WIDTH:'R'
      FIELDS.TO.PRINT = NUM.RIGHT.FIELD - RIGHT.START.POSITION + 1
      IF HAVE.ROW.PCT.OPTION THEN
         FIELDS.TO.PRINT += 1
      END
      SPACES.REQUIRED = FIELDS.TO.PRINT * RIGHT.COL.WIDTH + LEFT.COL.WIDTH + TOTAL.COL.WIDTH
      IF SPACES.REQUIRED > PRINT.WIDTH OR USE.DOUBLE.COLUMN THEN
         GOSUB PRINT.DOUBLE.COLUMN
      END ELSE
         GOSUB PRINT.TEXT.MULTI.COLUMN
      END
      GOSUB PRINT.SUMMARY
      IF HAVE.LPTR THEN
         PRINTER OFF
      END
      RETURN



PRINT.TEXT.MULTI.COLUMN: 
      TEMP.WIDTH = RIGHT.COL.WIDTH + RIGHT.COL.WIDTH
      TEMP.FMT = TEMP.WIDTH:'R'
      FOR WHICH.COL.HEADING = 1 TO NUM.COL.HEADING
         X.HEADING = TRIM(LEFT.COL.HEADING<1,WHICH.COL.HEADING>)
         PRINT.LINE = FMT(X.HEADING,LEFT.COL.FMT)[1,LEFT.COL.WIDTH]
         PRINT.LINE := SPACE(RIGHT.COL.WIDTH)
         PRINT.LINE := SPACE(RIGHT.COL.WIDTH)
         X.HEADING = RIGHT.COL.HEADING<1,WHICH.COL.HEADING>
         PRINT.LINE := FMT(X.HEADING,TEMP.FMT)[1,TEMP.WIDTH]
         GOSUB PRINT.PRINT.LINE
      NEXT WHICH.COL.HEADING
      PRINT.LINE = ' '
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = SPACE(LEFT.COL.WIDTH)
      FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
         X.FIELD = OCONV(RIGHT.FIELD.LIST<1,RIGHT.FIELD.INDEX(RIGHT.SUB)>,RIGHT.FIELD.CONV)
         IF X.FIELD = '' THEN
            X.FIELD = '(null)'
         END
         PRINT.LINE := FMT(X.FIELD,RIGHT.COL.FMT)[1,RIGHT.COL.WIDTH]
      NEXT RIGHT.SUB
      PRINT.LINE := FMT('TOTAL',TOTAL.COL.FMT)
      IF HAVE.ROW.PCT.OPTION THEN
         PRINT.LINE := FMT('PCT',TOTAL.COL.FMT)
      END
      GOSUB PRINT.PRINT.LINE
      FOR LEFT.SUB = LEFT.START.POSITION TO NUM.LEFT.FIELD
         X.FIELD = OCONV(LEFT.FIELD.LIST<1,LEFT.FIELD.INDEX(LEFT.SUB)>,LEFT.FIELD.CONV)
         IF X.FIELD = '' THEN
            X.FIELD = '(null)'
         END
         PRINT.LINE = FMT(X.FIELD,LEFT.COL.FMT)[1,LEFT.COL.WIDTH]
         IF HAVE.COUNT.OPTION THEN
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               VALUE.TO.PRINT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               PRINT.LINE := FMT(VALUE.TO.PRINT,RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
            NEXT RIGHT.SUB
            VALUE.TO.PRINT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            PRINT.LINE := FMT(VALUE.TO.PRINT,TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            IF HAVE.ROW.PCT.OPTION THEN
               X.NUMERATOR = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
               X.DENOMINATOR = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
               IF X.DENOMINATOR = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = INT(10000*X.NUMERATOR/X.DENOMINATOR)
               END
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            END
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH)
         END
         IF HAVE.SUM.OPTION THEN
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               VALUE.TO.PRINT = CROSS.SUMS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
            NEXT RIGHT.SUB
            VALUE.TO.PRINT = CROSS.SUMS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH)
         END
         IF HAVE.MEAN.OPTION THEN
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               TEMP.SUM = CROSS.MEANS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               TEMP.COUNT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               IF TEMP.COUNT = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
               END
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
            NEXT RIGHT.SUB
            TEMP.SUM = CROSS.MEANS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            TEMP.COUNT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            IF TEMP.COUNT = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
            END
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH)
         END
      NEXT LEFT.SUB

      PRINT.LINE = FMT('TOTAL',LEFT.COL.FMT)
      IF HAVE.COUNT.OPTION THEN
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            PRINT.LINE := FMT(VALUE.TO.PRINT,RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
         NEXT RIGHT.SUB
         VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         PRINT.LINE := FMT(VALUE.TO.PRINT,TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         IF HAVE.ROW.PCT.OPTION THEN
            VALUE.TO.PRINT = '10000'
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         END
         GOSUB PRINT.PRINT.LINE
         IF HAVE.COL.PCT.OPTION THEN
            PRINT.LINE = FMT('PCT',LEFT.COL.FMT)
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               X.NUMERATOR = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
               X.DENOMINATOR = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
               IF X.DENOMINATOR = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = INT(10000*X.NUMERATOR/X.DENOMINATOR)
               END
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
            NEXT RIGHT.SUB
            VALUE.TO.PRINT = '10000'
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
         END
         PRINT.LINE = SPACE(LEFT.COL.WIDTH)
      END

      IF HAVE.SUM.OPTION THEN
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            VALUE.TO.PRINT = CROSS.SUMS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
         NEXT RIGHT.SUB
         VALUE.TO.PRINT = CROSS.SUMS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = SPACE(LEFT.COL.WIDTH)
      END

      IF HAVE.MEAN.OPTION THEN
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            TEMP.SUM = CROSS.MEANS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            TEMP.COUNT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            IF TEMP.COUNT = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
            END
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),RIGHT.COL.FMT)[RIGHT.COL.WIDTH]
         NEXT RIGHT.SUB
         TEMP.SUM = CROSS.MEANS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         TEMP.COUNT = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         IF TEMP.COUNT = 0 THEN
            VALUE.TO.PRINT = ''
         END ELSE
            VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
         END
         PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = SPACE(LEFT.COL.WIDTH)
      END

      RETURN




PRINT.DOUBLE.COLUMN: 
      DIVIDER.WIDTH = LEFT.COL.WIDTH + RIGHT.COL.WIDTH + TOTAL.COL.WIDTH
      IF HAVE.ROW.PCT.OPTION THEN
         DIVIDER.WIDTH += TOTAL.COL.WIDTH
      END
      DIVIDER.LINE = STR('=',DIVIDER.WIDTH)
      RIGHT.COL.FMT = RIGHT.COL.WIDTH:'L'
      FOR WHICH.COL.HEADING = 1 TO NUM.COL.HEADING
         X.HEADING = TRIM(LEFT.COL.HEADING<1,WHICH.COL.HEADING>)
         PRINT.LINE = FMT(X.HEADING,LEFT.COL.FMT)[1,LEFT.COL.WIDTH]
         X.HEADING = RIGHT.COL.HEADING<1,WHICH.COL.HEADING>
         PRINT.LINE := FMT(X.HEADING,RIGHT.COL.FMT)[1,RIGHT.COL.WIDTH]
         PRINT.LINE := FMT('TOTAL',TOTAL.COL.FMT)
         IF HAVE.ROW.PCT.OPTION THEN
            PRINT.LINE := FMT('PCT',TOTAL.COL.FMT)
         END
         GOSUB PRINT.PRINT.LINE
      NEXT WHICH.COL.HEADING
      PRINT.LINE = ' '
      GOSUB PRINT.PRINT.LINE
      FOR LEFT.SUB = LEFT.START.POSITION TO NUM.LEFT.FIELD
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            PRINT.LINE = ''
            X.FIELD = OCONV(LEFT.FIELD.LIST<1,LEFT.FIELD.INDEX(LEFT.SUB)>,LEFT.FIELD.CONV)
            IF X.FIELD = '' THEN
               X.FIELD = '(null)'
            END
            PRINT.LINE := FMT(X.FIELD,LEFT.COL.FMT)[1,LEFT.COL.WIDTH]
            X.FIELD = OCONV(RIGHT.FIELD.LIST<1,RIGHT.FIELD.INDEX(RIGHT.SUB)>,RIGHT.FIELD.CONV)
            IF X.FIELD = '' THEN
               X.FIELD = '(null)'
            END
            PRINT.LINE := FMT(X.FIELD,RIGHT.COL.FMT)[1,RIGHT.COL.WIDTH]
            IF HAVE.COUNT.OPTION THEN
               VALUE.TO.PRINT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               IF VALUE.TO.PRINT # 0 OR NOT(NO.ZERO.COUNTS) THEN
                  PRINT.LINE := FMT(VALUE.TO.PRINT,TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
                  GOSUB PRINT.PRINT.LINE
                  PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
               END
            END
            IF HAVE.SUM.OPTION THEN
               VALUE.TO.PRINT = CROSS.SUMS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
               GOSUB PRINT.PRINT.LINE
               PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
            END
            IF HAVE.MEAN.OPTION THEN
               TEMP.SUM = CROSS.MEANS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               TEMP.COUNT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               IF TEMP.COUNT = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
               END
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
               GOSUB PRINT.PRINT.LINE
               PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
            END
         NEXT RIGHT.SUB
         PRINT.LINE = FMT(LEFT.FIELD.LIST<1,LEFT.FIELD.INDEX(LEFT.SUB)>,LEFT.COL.FMT)
         PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,MAX.RIGHT.FIELD>,RIGHT.COL.FMT)
         IF HAVE.COUNT.OPTION THEN
            VALUE.TO.PRINT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            PRINT.LINE := FMT(VALUE.TO.PRINT,TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            IF HAVE.ROW.PCT.OPTION THEN
               X.NUMERATOR = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
               X.DENOMINATOR = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
               IF X.DENOMINATOR = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = INT(10000*X.NUMERATOR/X.DENOMINATOR)
               END
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            END
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
         END
         IF HAVE.SUM.OPTION THEN
            PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,MAX.RIGHT.FIELD>,RIGHT.COL.FMT)
            VALUE.TO.PRINT = CROSS.SUMS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
         END
         IF HAVE.MEAN.OPTION THEN
            PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,MAX.RIGHT.FIELD>,RIGHT.COL.FMT)
            TEMP.SUM = CROSS.MEANS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            TEMP.COUNT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            IF TEMP.COUNT = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
            END
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
         END
         PRINT DIVIDER.LINE
      NEXT LEFT.SUB
      FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
         PRINT.LINE = FMT(LEFT.FIELD.LIST<1,MAX.LEFT.FIELD>,LEFT.COL.FMT)
         PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,RIGHT.FIELD.INDEX(RIGHT.SUB)>,RIGHT.COL.FMT)
         IF HAVE.COUNT.OPTION THEN
            VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            PRINT.LINE := FMT(VALUE.TO.PRINT,TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            IF HAVE.COL.PCT.OPTION THEN
               X.NUMERATOR = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
               X.DENOMINATOR = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
               IF X.DENOMINATOR = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = INT(10000*X.NUMERATOR/X.DENOMINATOR)
               END
               PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            END
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
         END
         IF HAVE.SUM.OPTION THEN
            PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,RIGHT.FIELD.INDEX(RIGHT.SUB)>,RIGHT.COL.FMT)
            VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
         END
         IF HAVE.MEAN.OPTION THEN
            PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,RIGHT.FIELD.INDEX(RIGHT.SUB)>,RIGHT.COL.FMT)
            TEMP.SUM = CROSS.MEANS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            TEMP.COUNT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            IF TEMP.COUNT = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
            END
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
            GOSUB PRINT.PRINT.LINE
            PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
         END
      NEXT RIGHT.SUB
      PRINT.LINE = FMT(LEFT.FIELD.LIST<1,MAX.LEFT.FIELD>,LEFT.COL.FMT)
      PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,MAX.RIGHT.FIELD>,RIGHT.COL.FMT)
      IF HAVE.COUNT.OPTION THEN
         VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         PRINT.LINE := FMT(VALUE.TO.PRINT,TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         IF HAVE.COL.PCT.OPTION OR HAVE.ROW.PCT.OPTION THEN
            VALUE.TO.PRINT = '10000'
            PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,'MD2'),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         END
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
      END
      IF HAVE.SUM.OPTION THEN
         PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,MAX.RIGHT.FIELD>,RIGHT.COL.FMT)
         VALUE.TO.PRINT = CROSS.SUMS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
      END
      IF HAVE.MEAN.OPTION THEN
         PRINT.LINE := FMT(RIGHT.FIELD.LIST<1,MAX.RIGHT.FIELD>,RIGHT.COL.FMT)
         TEMP.SUM = CROSS.MEANS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         TEMP.COUNT = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         IF TEMP.COUNT = 0 THEN
            VALUE.TO.PRINT = ''
         END ELSE
            VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
         END
         PRINT.LINE := FMT(OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV),TOTAL.COL.FMT)[TOTAL.COL.WIDTH]
         GOSUB PRINT.PRINT.LINE
         PRINT.LINE = SPACE(LEFT.COL.WIDTH+RIGHT.COL.WIDTH)
      END
      RETURN



PRINT.SUMMARY: 
      COUNTED.RECS = NUM.SRC.RECS - NOT.COUNTED
      PRINT.LINE = ' '
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = COUNTED.RECS:' SOURCE RECORDS INCLUDED ON THE REPORT'
      GOSUB PRINT.PRINT.LINE
      IF NOT.COUNTED > 0 THEN
         PRINT.LINE = NOT.COUNTED:' SOURCE RECORDS EXCLUDED FROM THE REPORT'
         GOSUB PRINT.PRINT.LINE
      END
      CRT
      CRT NUM.SRC.KEYS:' SOURCE KEYS READ FROM SELECT LIST'
      CRT COUNTED.RECS:' SOURCE RECORDS INCLUDED ON THE REPORT'
      CRT NOT.COUNTED:' SOURCE RECORDS EXCLUDED FROM THE REPORT'
      RETURN



PRINT.HTML.RESULTS: 
      IF CROSS.COUNTS(MAX.LEFT.FIELD,1) GT 0 THEN
         RIGHT.START.POSITION = 1
      END ELSE
         RIGHT.START.POSITION = 2
      END
      IF CROSS.COUNTS(1,MAX.RIGHT.FIELD) GT 0 THEN
         LEFT.START.POSITION = 1
      END ELSE
         LEFT.START.POSITION = 2
      END

      FIELDS.TO.PRINT = NUM.RIGHT.FIELD - RIGHT.START.POSITION + 1
      IF HAVE.ROW.PCT.OPTION THEN
         FIELDS.TO.PRINT += 1
      END

      LINES.PER.ROW = 0
      IF HAVE.COUNT.OPTION THEN
         LINES.PER.ROW += 1
      END
      IF HAVE.SUM.OPTION THEN
         LINES.PER.ROW += 1
      END
      IF HAVE.MEAN.OPTION THEN
         LINES.PER.ROW += 1
      END
      PRINT.LINE = '<HTML>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '<HEAD>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '<TITLE>'
      GOSUB PRINT.PRINT.LINE
      IF TITLE.TEXT = '' THEN
         PRINT.LINE = 'CROSS.TAB OF ':LEFT.FIELD
         PRINT.LINE := ' AND ':RIGHT.FIELD:' FOR FILE ':SRC.FILENAME
      END ELSE
         PRINT.LINE = TITLE.TEXT
      END
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '</TITLE>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '</HEAD>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '<BODY>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '<TABLE BORDER="1">'
      GOSUB PRINT.PRINT.LINE
      GOSUB PRINT.HTML.MULTI.COLUMN
      PRINT.LINE = '</TABLE>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '</BODY>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '</HTML>'
      GOSUB PRINT.PRINT.LINE
      RETURN

PRINT.HTML.MULTI.COLUMN: 
* CREATE THE HEADINGS
      PRINT.LINE = '<TR>'
      PRINT.LINE := '<TD>&nbsp</TD>'
      X.HEADING = RIGHT.COL.HEADING<1,1>
      PRINT.LINE := '<TD ALIGN="CENTER" COLSPAN="':FIELDS.TO.PRINT+1:'">'
      PRINT.LINE := X.HEADING
      IF HAVE.SUM.OPTION AND NOT(X.MANUAL.RIGHT.COL.HEADING) THEN
         PRINT.LINE := '<BR>SUM(':SUM.FIELD:')'
      END
      IF HAVE.MEAN.OPTION AND NOT(X.MANUAL.RIGHT.COL.HEADING) THEN
         PRINT.LINE := '<BR>MEAN(':MEAN.FIELD:')'
      END
      PRINT.LINE := '</TD>'
      PRINT.LINE := '</TR>'
      GOSUB PRINT.PRINT.LINE
      PRINT.LINE = '<TR>'
      X.HEADING = TRIM(LEFT.COL.HEADING<1,1>)
      PRINT.LINE := '<TD>'
      PRINT.LINE := X.HEADING
      PRINT.LINE := '</TD>'
      FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
         X.FIELD = OCONV(RIGHT.FIELD.LIST<1,RIGHT.FIELD.INDEX(RIGHT.SUB)>,RIGHT.FIELD.CONV)
         IF X.FIELD = '' THEN
            X.FIELD = '(null)'
         END
         PRINT.LINE := '<TD ALIGN="RIGHT">'
         PRINT.LINE := X.FIELD
         PRINT.LINE := '</TD>'
      NEXT RIGHT.SUB
      PRINT.LINE := '<TD>'
      PRINT.LINE := 'TOTAL'
      PRINT.LINE := '</TD>'
      IF HAVE.ROW.PCT.OPTION THEN
         PRINT.LINE := '<TD ALIGN="RIGHT">'
         PRINT.LINE := 'PCT'
         PRINT.LINE := '</TD>'
      END
      PRINT.LINE := '</TR>'
      GOSUB PRINT.PRINT.LINE

* DO THE DETAIL ROWS
      FOR LEFT.SUB = LEFT.START.POSITION TO NUM.LEFT.FIELD
         X.ROW.STARTED = @FALSE
         IF HAVE.COUNT.OPTION THEN
            PRINT.LINE = '<TR>'
            IF X.ROW.STARTED THEN
               NULL
            END ELSE
               X.FIELD = OCONV(LEFT.FIELD.LIST<1,LEFT.FIELD.INDEX(LEFT.SUB)>,LEFT.FIELD.CONV)
               IF X.FIELD = '' THEN
                  X.FIELD = '(null)'
               END
               IF LINES.PER.ROW GT 1 THEN
                  PRINT.LINE := '<TD ROWSPAN="':LINES.PER.ROW:'">'
               END ELSE
                  PRINT.LINE := '<TD>'
               END
               PRINT.LINE := X.FIELD
               PRINT.LINE := '</TD>'
            END
            X.ROW.STARTED = @TRUE
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               VALUE.TO.PRINT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               PRINT.LINE := '<TD ALIGN="RIGHT">'
               IF VALUE.TO.PRINT = '' THEN
                  PRINT.LINE := '&nbsp;'
               END ELSE
                  PRINT.LINE := VALUE.TO.PRINT
               END
               PRINT.LINE := '</TD>'
            NEXT RIGHT.SUB
            VALUE.TO.PRINT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            IF VALUE.TO.PRINT = '' THEN
               PRINT.LINE := '&nbsp;'
            END ELSE
               PRINT.LINE := VALUE.TO.PRINT
            END
            PRINT.LINE := '</TD>'
            IF HAVE.ROW.PCT.OPTION THEN
               X.NUMERATOR = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
               X.DENOMINATOR = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
               IF X.DENOMINATOR = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = INT(10000*X.NUMERATOR/X.DENOMINATOR)
               END
               PRINT.LINE := '<TD ALIGN="RIGHT">'
               IF VALUE.TO.PRINT = '' THEN
                  PRINT.LINE := '&nbsp;'
               END ELSE
                  PRINT.LINE := OCONV(VALUE.TO.PRINT,'MD2')
               END
               PRINT.LINE := '</TD>'
            END
            PRINT.LINE := '</TR>'
            GOSUB PRINT.PRINT.LINE
         END
         IF HAVE.SUM.OPTION THEN
            PRINT.LINE = '<TR>'
            IF X.ROW.STARTED THEN
               NULL
            END ELSE
               X.FIELD = OCONV(LEFT.FIELD.LIST<1,LEFT.FIELD.INDEX(LEFT.SUB)>,LEFT.FIELD.CONV)
               IF X.FIELD = '' THEN
                  X.FIELD = '(null)'
               END
               IF LINES.PER.ROW GT 1 THEN
                  PRINT.LINE := '<TD ROWSPAN="':LINES.PER.ROW:'">'
               END ELSE
                  PRINT.LINE := '<TD>'
               END
               PRINT.LINE := X.FIELD
               PRINT.LINE := '</TD>'
            END
            X.ROW.STARTED = @TRUE
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               VALUE.TO.PRINT = CROSS.SUMS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               PRINT.LINE := '<TD ALIGN="RIGHT">'
               IF VALUE.TO.PRINT = '' THEN
                  PRINT.LINE := '&nbsp;'
               END ELSE
                  PRINT.LINE := OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV)
               END
               PRINT.LINE := '</TD>'
            NEXT RIGHT.SUB
            VALUE.TO.PRINT = CROSS.SUMS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            IF VALUE.TO.PRINT = '' THEN
               PRINT.LINE := '&nbsp;'
            END ELSE
               PRINT.LINE := OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV)
            END
            PRINT.LINE := '</TD>'
            PRINT.LINE := '</TR>'
            GOSUB PRINT.PRINT.LINE
         END
         IF HAVE.MEAN.OPTION THEN
            PRINT.LINE = '<TR>'
            IF X.ROW.STARTED THEN
               NULL
            END ELSE
               X.FIELD = OCONV(LEFT.FIELD.LIST<1,LEFT.FIELD.INDEX(LEFT.SUB)>,LEFT.FIELD.CONV)
               IF X.FIELD = '' THEN
                  X.FIELD = '(null)'
               END
               IF LINES.PER.ROW GT 1 THEN
                  PRINT.LINE := '<TD ROWSPAN="':LINES.PER.ROW:'">'
               END ELSE
                  PRINT.LINE := '<TD>'
               END
               PRINT.LINE := X.FIELD
               PRINT.LINE := '</TD>'
            END
            X.ROW.STARTED = @TRUE
            FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
               TEMP.SUM = CROSS.MEANS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               TEMP.COUNT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),RIGHT.FIELD.INDEX(RIGHT.SUB))
               IF TEMP.COUNT = 0 THEN
                  VALUE.TO.PRINT = ''
               END ELSE
                  VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
               END
               PRINT.LINE := '<TD ALIGN="RIGHT">'
               IF VALUE.TO.PRINT = '' THEN
                  PRINT.LINE := '&nbsp;'
               END ELSE
                  PRINT.LINE := OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV)
               END
               PRINT.LINE := '</TD>'
            NEXT RIGHT.SUB
            TEMP.SUM = CROSS.MEANS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            TEMP.COUNT = CROSS.COUNTS(LEFT.FIELD.INDEX(LEFT.SUB),MAX.RIGHT.FIELD)
            IF TEMP.COUNT = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
            END
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            IF VALUE.TO.PRINT = '' THEN
               PRINT.LINE := '&nbsp;'
            END ELSE
               PRINT.LINE := OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV)
            END
            PRINT.LINE := '</TD>'
            PRINT.LINE := '</TR>'
            GOSUB PRINT.PRINT.LINE
         END
      NEXT LEFT.SUB

* TOTAL ROW
      X.TOTAL.STARTED = @FALSE
      IF HAVE.COUNT.OPTION THEN
         PRINT.LINE = '<TR>'
         IF X.TOTAL.STARTED THEN
            NULL
         END ELSE
            IF LINES.PER.ROW GT 1 THEN
               PRINT.LINE := '<TD ROWSPAN="':LINES.PER.ROW:'">'
            END ELSE
               PRINT.LINE := '<TD>'
            END
            PRINT.LINE := 'TOTAL'
            PRINT.LINE := '</TD>'
         END
         X.TOTAL.STARTED = @TRUE
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            PRINT.LINE := VALUE.TO.PRINT
            PRINT.LINE := '</TD>'
         NEXT RIGHT.SUB
         VALUE.TO.PRINT = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         PRINT.LINE := '<TD ALIGN="RIGHT">'
         PRINT.LINE := VALUE.TO.PRINT
         PRINT.LINE := '</TD>'
         IF HAVE.ROW.PCT.OPTION THEN
            VALUE.TO.PRINT = '10000'
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            PRINT.LINE := OCONV(VALUE.TO.PRINT,'MD2')
            PRINT.LINE := '</TD>'
         END
         PRINT.LINE := '</TR>'
         GOSUB PRINT.PRINT.LINE
      END

      IF HAVE.SUM.OPTION THEN
         PRINT.LINE = '<TR>'
         IF X.TOTAL.STARTED THEN
            NULL
         END ELSE
            IF LINES.PER.ROW GT 1 THEN
               PRINT.LINE := '<TD ROWSPAN="':LINES.PER.ROW:'">'
            END ELSE
               PRINT.LINE := '<TD>'
            END
            PRINT.LINE := 'TOTAL'
            PRINT.LINE := '</TD>'
         END
         X.TOTAL.STARTED = @TRUE
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            VALUE.TO.PRINT = CROSS.SUMS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            PRINT.LINE := OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV)
            PRINT.LINE := '</TD>'
         NEXT RIGHT.SUB
         VALUE.TO.PRINT = CROSS.SUMS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         PRINT.LINE := '<TD ALIGN="RIGHT">'
         PRINT.LINE := OCONV(VALUE.TO.PRINT,SUM.FIELD.CONV)
         PRINT.LINE := '</TD>'
         GOSUB PRINT.PRINT.LINE
      END

      IF HAVE.MEAN.OPTION THEN
         PRINT.LINE = '<TR>'
         IF X.TOTAL.STARTED THEN
            NULL
         END ELSE
            IF LINES.PER.ROW GT 1 THEN
               PRINT.LINE := '<TD ROWSPAN="':LINES.PER.ROW:'">'
            END ELSE
               PRINT.LINE := '<TD>'
            END
            PRINT.LINE := 'TOTAL'
            PRINT.LINE := '</TD>'
         END
         X.TOTAL.STARTED = @TRUE
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            TEMP.SUM = CROSS.MEANS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            TEMP.COUNT = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            IF TEMP.COUNT = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
            END
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            PRINT.LINE := OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV)
            PRINT.LINE := '</TD>'
         NEXT RIGHT.SUB
         TEMP.SUM = CROSS.MEANS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         TEMP.COUNT = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
         IF TEMP.COUNT = 0 THEN
            VALUE.TO.PRINT = ''
         END ELSE
            VALUE.TO.PRINT = TEMP.SUM / TEMP.COUNT
         END
         PRINT.LINE := '<TD ALIGN="RIGHT">'
         PRINT.LINE := OCONV(VALUE.TO.PRINT,MEAN.FIELD.CONV)
         PRINT.LINE := '</TD>'
         GOSUB PRINT.PRINT.LINE
      END

      IF HAVE.COL.PCT.OPTION THEN
         PRINT.LINE = '<TR>'
         PRINT.LINE := '<TD>'
         PRINT.LINE := 'PCT'
         PRINT.LINE := '</TD>'
         FOR RIGHT.SUB = RIGHT.START.POSITION TO NUM.RIGHT.FIELD
            X.NUMERATOR = CROSS.COUNTS(MAX.LEFT.FIELD,RIGHT.FIELD.INDEX(RIGHT.SUB))
            X.DENOMINATOR = CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
            IF X.DENOMINATOR = 0 THEN
               VALUE.TO.PRINT = ''
            END ELSE
               VALUE.TO.PRINT = INT(10000*X.NUMERATOR/X.DENOMINATOR)
            END
            PRINT.LINE := '<TD ALIGN="RIGHT">'
            PRINT.LINE := OCONV(VALUE.TO.PRINT,'MD2')
            PRINT.LINE := '</TD>'
         NEXT RIGHT.SUB
         VALUE.TO.PRINT = '10000'
         PRINT.LINE := '<TD ALIGN="RIGHT">'
         PRINT.LINE := OCONV(VALUE.TO.PRINT,'MD2')
         PRINT.LINE := '</TD>'
         PRINT.LINE := '</TR>'
         GOSUB PRINT.PRINT.LINE
      END
      RETURN




GET.TERMINAL.WIDTH: 
      TERMINAL.WIDTH = @CRTWIDE
      RETURN



LOAD.PARAMETERS: 
      ERRMSG = ''
      NUM.ERRORS = 0
      HAVE.CELL.OPTION = @FALSE
      PARAM.STR = ''
      PARAM.QUOTED = ''
      NUM.PARAMS = 0
      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)
      MATPARSE PARAM FROM PARAM.STR,@FM
      NPARAM = INMAT()
      IF NUM.PARAMS # NPARAM THEN
         PRINT 'FATAL ERROR PARSING COMMAND LINE'
         PRINT 'PARSE.LINE RETURNED ':NUM.PARAMS:' PARAMETERS'
         PRINT 'MATPARSE   RETURNED ':NPARAM:' PARAMETERS'
         STOP
      END
      IF PARAM.STR<1> = 'RUN' THEN
         PARAM.STR = FIELD(PARAM.STR,@FM,3,9999)
         NUM.PARAMS -= 2
      END
      IF NUM.PARAMS < 4 THEN
         GOSUB PRINT.HELP
         STOP
      END

      SRC.FILENAME = PARAM.STR<2>
      LEFT.FIELD = PARAM.STR<3>
      RIGHT.FIELD = PARAM.STR<4>

      PARAM.STR = FIELD(PARAM.STR,@FM,5,9999)

      LOCATE '-SELECT' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'SELECT' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         MAKE.SELECT = @TRUE
         DEL PARAM.STR<POS>
      END ELSE
         MAKE.SELECT = @FALSE
      END

      LOCATE '-PREFIX' IN PARAM.STR<1> SETTING POS THEN
         LIST.PREFIX = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         LOCATE 'PREFIX' IN PARAM.STR<1> SETTING POS THEN
            LIST.PREFIX = PARAM.STR<POS+1>
            DEL PARAM.STR<POS>
            DEL PARAM.STR<POS>
         END ELSE
            LIST.PREFIX = DEFAULT.PREFIX
         END
      END

      LOCATE '-REQUIRE.SELECT' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'REQUIRE.SELECT' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         REQUIRE.SELECT = @TRUE
         DEL PARAM.STR<POS>
      END ELSE
         REQUIRE.SELECT = @FALSE
      END

      LOCATE '-LPTR' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'LPTR' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         HAVE.LPTR = @TRUE
         DEL PARAM.STR<POS>
      END ELSE
         HAVE.LPTR = @FALSE
      END

      LOCATE '-DOUBLE.COLUMN' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'DOUBLE.COLUMN' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         USE.DOUBLE.COLUMN = @TRUE
         DEL PARAM.STR<POS>
      END

      LOCATE '-NO.ZERO.COUNTS' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'NO.ZERO.COUNTS' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         NO.ZERO.COUNTS = @TRUE
         DEL PARAM.STR<POS>
      END

      LOCATE '-FILE' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'FILE' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         HAVE.OUTPUT.FILE = @TRUE
         OUTPUT.DIR.NAME = PARAM.STR<POS+1>
         OUTPUT.RECORD.NAME = PARAM.STR<POS+2>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
         OPEN '',OUTPUT.DIR.NAME TO F.OUTPUT.DIR.NAME ELSE
            CRT 'UNABLE TO OPEN ':OUTPUT.DIR.NAME
            STOP
         END
      END ELSE
         HAVE.OUTPUT.FILE = @FALSE
      END

      LOCATE '-FORMAT' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'FORMAT' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         OUTPUT.FORMAT = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END
      CRT 'OUTPUT.FORMAT ':OUTPUT.FORMAT

      LOCATE '-CODE1' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'CODE1' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         CODE.FILE1 = PARAM.STR<POS+1>
         OPEN '',CODE.FILE1 TO F.CODE.FILE1 ELSE
            ERRMSG<-1> = 'UNABLE TO OPEN FILE ':CODE.FILE1
            NUM.ERRORS += 1
         END
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         CODE.FILE1 = ''
      END

      LOCATE '-GET.LIST' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'GET.LIST' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         GET.LIST.NAME = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
         IF REQUIRE.SELECT THEN
            ERRMSG<-1> = '-GET.LIST & -REQUIRE.SELECT ARE MUTUALLY EXCLUSIVE'
            ERRMSG<-1> = '-GET.LIST ':GET.LIST.NAME:' IGNORED'
            NUM.ERRORS += 1
         END
      END ELSE
         GET.LIST.NAME = ''
      END

      LOCATE '-CODE2' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'CODE2' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         CODE.FILE2 = PARAM.STR<POS+1>
         OPEN '',CODE.FILE2 TO F.CODE.FILE2 ELSE
            ERRMSG<-1> = 'UNABLE TO OPEN FILE ':CODE.FILE2
            NUM.ERRORS += 1
         END
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         CODE.FILE2 = ''
      END

      LOCATE '-RANGE1' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'RANGE1' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         RANGE1.LOW = PARAM.STR<POS+1>
         RANGE1.HIGH = PARAM.STR<POS+2>
         TEST.LOW = RANGE1.LOW
         TEST.HIGH = RANGE1.HIGH
         GOSUB VALIDATE.RANGE
         IF NUM.ERRORS = 0 THEN
            MAX.LEFT.FIELD = RANGE1.HIGH - RANGE1.LOW + 2
         END ELSE
            RANGE1.LOW = ''
            RANGE1.HIGH = ''
         END
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         RANGE1.LOW = ''
         RANGE1.HIGH = ''
      END

      LOCATE '-RANGE2' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'RANGE2' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         RANGE2.LOW = PARAM.STR<POS+1>
         RANGE2.HIGH = PARAM.STR<POS+2>
         TEST.LOW = RANGE2.LOW
         TEST.HIGH = RANGE2.HIGH
         GOSUB VALIDATE.RANGE
         IF NUM.ERRORS = 0 THEN
            MAX.RIGHT.FIELD = RANGE2.HIGH - RANGE2.LOW + 2
         END ELSE
            RANGE2.LOW = ''
            RANGE2.HIGH = ''
         END
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         RANGE2.LOW = ''
         RANGE2.HIGH = ''
      END

      IF RANGE1.LOW # '' AND CODE.FILE1 # '' THEN
         CRT 'RANGE1 and CODE1 options conflict...CODE1 option ignored.'
         CODE.FILE1 = ''
      END
      IF RANGE2.LOW # '' AND CODE.FILE2 # '' THEN
         CRT 'RANGE2 and CODE2 options conflict...CODE2 option ignored.'
         CODE.FILE2 = ''
      END

      LOCATE '-DIM1' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'DIM1' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         MAX.LEFT.FIELD = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END

      LOCATE '-DIM2' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'DIM2' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         MAX.RIGHT.FIELD = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END

      LOCATE '-HEAD' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE '-HEADING' IN PARAM.STR<1> SETTING POS ELSE
            LOCATE 'HEADING' IN PARAM.STR<1> SETTING POS ELSE
               LOCATE 'HEAD' IN PARAM.STR<1> SETTING POS ELSE
                  POS = 0
               END
            END
         END
      END
      IF POS THEN
         TITLE.TEXT = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         TITLE.TEXT = ''
      END

* Although we don't support FORM.NAME anymore, we parse it
* and get rid of the tokens so that old paragraphs will still
* work.
      LOCATE '-FORM.NAME' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'FORM.NAME' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END

      LOCATE '-WIDTH' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'WIDTH' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         PRINT.WIDTH = PARAM.STR<POS+1>
         IF PRINT.WIDTH = '' OR NOT(NUM(PRINT.WIDTH)) THEN
            CRT 'Illegal print width specified...default used.'
         END
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END

      LOCATE '-SUM' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'SUM' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         SUM.FIELD = PARAM.STR<POS+1>
         HAVE.SUM.OPTION = @TRUE
         HAVE.CELL.OPTION = @TRUE
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         SUM.FIELD = ''
         HAVE.SUM.OPTION = @FALSE
      END

      LOCATE '-MEAN' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'MEAN' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         MEAN.FIELD = PARAM.STR<POS+1>
         HAVE.MEAN.OPTION = @TRUE
         HAVE.CELL.OPTION = @TRUE
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         MEAN.FIELD = ''
         HAVE.MEAN.OPTION = @FALSE
      END

      LOCATE '-COUNT' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'COUNT' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         HAVE.COUNT.OPTION = @TRUE
         HAVE.CELL.OPTION = @TRUE
         DEL PARAM.STR<POS>
      END ELSE
         HAVE.COUNT.OPTION = @FALSE
      END

      LOCATE '-ROW.PCT' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'ROW.PCT' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         HAVE.ROW.PCT.OPTION = @TRUE
         DEL PARAM.STR<POS>
      END ELSE
         HAVE.ROW.PCT.OPTION = @FALSE
      END

      LOCATE '-COL.PCT' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'COL.PCT' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         HAVE.COL.PCT.OPTION = @TRUE
         DEL PARAM.STR<POS>
      END ELSE
         HAVE.COL.PCT.OPTION = @FALSE
      END

      LOCATE '-LEFT.COL.WIDTH' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'LEFT.COL.WIDTH' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         LEFT.COL.WIDTH = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END

      LOCATE '-RIGHT.COL.WIDTH' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'RIGHT.COL.WIDTH' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         RIGHT.COL.WIDTH = PARAM.STR<POS+1>
         TOTAL.COL.WIDTH = RIGHT.COL.WIDTH + 1
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END

      LOCATE '-LEFT.COL.HEADING' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'LEFT.COL.HEADING' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         X.MANUAL.LEFT.COL.HEADING = @TRUE
         LEFT.COL.HEADING = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         X.MANUAL.LEFT.COL.HEADING = @FALSE
         LEFT.COL.HEADING = ''
      END

      LOCATE '-RIGHT.COL.HEADING' IN PARAM.STR<1> SETTING POS ELSE
         LOCATE 'RIGHT.COL.HEADING' IN PARAM.STR<1> SETTING POS ELSE
            POS = 0
         END
      END
      IF POS THEN
         X.MANUAL.RIGHT.COL.HEADING = @TRUE
         RIGHT.COL.HEADING = PARAM.STR<POS+1>
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
      END ELSE
         X.MANUAL.RIGHT.COL.HEADING = @FALSE
         RIGHT.COL.HEADING = ''
      END

      IF LEFT.COL.HEADING = '' THEN
         LEFT.COL.HEADING = LEFT.FIELD
      END
      IF RIGHT.COL.HEADING = '' THEN
         RIGHT.COL.HEADING = RIGHT.FIELD
      END
      CONVERT '|' TO @VM IN LEFT.COL.HEADING
      CONVERT '|' TO @VM IN RIGHT.COL.HEADING
      NUM.LEFT.HEADING = COUNT(LEFT.COL.HEADING,@VM) + 1
      NUM.RIGHT.HEADING = COUNT(RIGHT.COL.HEADING,@VM) + 1
      IF NUM.LEFT.HEADING > NUM.RIGHT.HEADING THEN
         NUM.COL.HEADING = NUM.LEFT.HEADING
      END ELSE
         NUM.COL.HEADING = NUM.RIGHT.HEADING
      END

      REQUESTED.ARRAY.SIZE = MAX.LEFT.FIELD * MAX.RIGHT.FIELD
      IF HAVE.ROW.PCT.OPTION THEN
         REQUESTED.ARRAY.SIZE += MAX.LEFT.FIELD
      END
      IF REQUESTED.ARRAY.SIZE > MAX.ARRAY.SIZE THEN
         ERRMSG<-1> =  'Illegal DIM values:  maximum array size is ':MAX.ARRAY.SIZE:'.'
         ERRMSG<-1> =  '     DIM1           ':MAX.LEFT.FIELD
         ERRMSG<-1> =  '     DIM2           ':MAX.RIGHT.FIELD
         ERRMSG<-1> =  '     Requested size ':REQUESTED.ARRAY.SIZE
         NUM.ERRORS += 1
         RETURN
      END


      IF PARAM.STR # '' THEN
         ERRMSG<-1> = 'Unrecognized options in command:'
         COUNT.PARAM = COUNT(PARAM.STR,@FM) + 1
         FOR WHICH.PARAM = 1 TO COUNT.PARAM
            ERRMSG<-1> = '     ':PARAM.STR<WHICH.PARAM>
         NEXT WHICH.PARAM
         NUM.ERRORS += 1
         RETURN
      END

      DIM CROSS.COUNTS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
      DIM CROSS.SUMS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
      DIM CROSS.MEANS(MAX.LEFT.FIELD,MAX.RIGHT.FIELD)
      MAT CROSS.COUNTS      = 0
      MAT CROSS.SUMS        = 0
      MAT CROSS.MEANS   = 0
      IF NOT(HAVE.CELL.OPTION) THEN
         HAVE.COUNT.OPTION = @TRUE
      END
      RETURN



PRINT.HELP: 
      PRINT 'CROSS.TAB, version ':X.VERSION
      PRINT
      PRINT 'You must supply a file name and two field names in your command:'
      PRINT '   cross.tab applicants ethnic sex'
      PRINT

      PRINT 'You may also specify any of several options:'
      PRINT '   -CODE1 xxx                 to pre-load values of variable 1 from a code file'
      PRINT '   -CODE2 xxx                 to pre-load values of variable 2 from a code file'
      PRINT '   -DIM1 nnn                  to set maximum number of values for variable 1'
      PRINT '   -DIM2 nnn                  to set maximum number of values for variable 2'
      PRINT '   -RANGE1 xxx yyy            to specify range of values to tabulate for'
      PRINT '                                 variable 1'
      PRINT '   -RANGE2 xxx yyy            to specify range of values to tabulate for'
      PRINT '                                 variable 2'
      PRINT '   -COUNT                     to accumulate frequency counts (default unless'
      PRINT '                                 some other cell option is specified)'
      PRINT '   -SUM xxx                   to accumulate values of field "xxx" in each cell'
      PRINT '   -MEAN yyy                  to print means of field "yyy" in each cell'
      PRINT '   -COL.PCT                   show each column total as pct of grand total'
      PRINT '   -ROW.PCT                   show each row total as pct of grand total'
      PRINT '   -FILE DirName RecordName   redirect output to a file'
      PRINT '   -FORMAT [TEXT|HTML]        set output format (default is TEXT)'

      PRINT
      PRINT '   -HEADING "heading text"    to specify a page heading (use the same'
      PRINT '                                 syntax as Uniquery, unless output is to a'
      PRINT '                                 file in which case title is copied literally)'
      PRINT '   -LEFT.COL.WIDTH nnn        to set the width of the left column'
      PRINT '   -RIGHT.COL.WIDTH nnn       to set the width of the right column(s)'
      PRINT '   -LEFT.COL.HEADING "hdg"    to specify a heading for the left column'
      PRINT '   -RIGHT.COL.HEADING "hdg"   to specify a heading for the right column'
      PRINT '   -LPTR                      to send output to print file'
      PRINT '   -FORM xxx                  to set the print file form name'
      PRINT '   -WIDTH nnn                 to set the width of printed output'
      PRINT
      PRINT '   -GET.LIST save.list.name   to specify the input for the cross.tab'
      PRINT '   -SELECT                    to create a new SAVE.LIST for each cell'
      PRINT '   -PREFIX aaaa               to use this prefix for each of the SAVE.LISTs'
      PRINT '                                 created.'
      PRINT
      PRINT '   -REQUIRE.SELECT            to halt execution if a select list is not active'

      PRINT
      PRINT
      PRINT 'Sample commands:'
      PRINT
      PRINT '1.  Get counts of applicants by gender and state of residence.'
      PRINT
      PRINT '   CROSS.TAB APPLICANTS SOURCE.CODE CONTACTS'
      PRINT
      PRINT
      PRINT '2.  Get counts of applicants by gender and state of residence, and'
      PRINT '    produce a savelist for each such combination (Female-Alabama,'
      PRINT '    Male-Alabama, Female-Arkansas, etc.).  The savelists will be'
      PRINT '    named APP.F.AL, APP.M.AL, APP.F.AR, etc.'
      PRINT
      PRINT '   CROSS.TAB APPLICANTS SOURCE.CODE CONTACTS -SELECT -PREFIX APP.'
      PRINT '       -HEADING "Tabulation of Applicants by Source Code and Contact"'
      PRINT
      PRINT
      PRINT '3.  Get counts of applicants by gender and state of residence, but'
      PRINT '    specify a code file for STATES.  This will cause every state to'
      PRINT '    appear in the output, even if the cell counts for the row are zero.'
      PRINT
      PRINT '   CROSS.TAB STUDENTS GENDER STATE -CODE2 STATES'
      PRINT.LINE = '       -HEADING "Students by Gender and State'
      PRINT.LINE := "'"
      PRINT.LINE := 'LTL'
      PRINT.LINE := "'"
      PRINT.LINE := '"'
      PRINT
      PRINT
      PRINT '4.  Get counts of students by gender and state of residence, and'
      PRINT '    send the output to a printer named BLANK1.  Include in'
      PRINT '    each cell the total number of hours completed by the students.'
      PRINT
      PRINT '   CROSS.TAB STUDENTS STATE GENDER -SUM CUM.HRS'
      PRINT '       -FORM BLANK1 -WIDTH 80 -LPTR'
      PRINT
      PRINT
      PRINT '5.  Get counts of students by gender and state of residence, and'
      PRINT '    write the output as HTML in directory _HOLD_.'
      PRINT
      PRINT '   CROSS.TAB STUDENTS STU.CLASS STU.GENDER'
      PRINT '      -FILE _HOLD_ classgen.htm -FORMAT HTML'
      PRINT
      PRINT
      PRINT '6.  Get counts of students by gender and state of residence, and'
      PRINT '    write the output as HTML in directory _HOLD_.  Include the average'
      PRINT '    hours completed for the students.'
      PRINT
      PRINT '   CROSS.TAB STUDENTS STU.CLASS STU.GENDER -MEAN STU.CUM.HRS'
      PRINT '      -FILE _HOLD_ classgen.htm -FORMAT HTML'
      PRINT
      PRINT
      PRINT 'Defaults are:'
      PRINT '   DIM1             ':DEFAULT.DIM1
      PRINT '   DIM2             ':DEFAULT.DIM2
      PRINT '   LEFT.COL.WIDTH   ':DEFAULT.LEFT.COL.WIDTH
      PRINT '   RIGHT.COL.WIDTH  ':DEFAULT.RIGHT.COL.WIDTH
      PRINT '   PREFIX           ':DEFAULT.PREFIX
      STOP




VALIDATE.RANGE: 
      IF NOT(NUM(TEST.LOW)) OR NOT(NUM(TEST.HIGH)) THEN
         ERRMSG<-1> =  'Range values must be numeric, found: ':TEST.LOW:' ':TEST.HIGH
         NUM.ERRORS += 1
         RETURN
      END
      IF TEST.LOW # INT(TEST.LOW) OR TEST.HIGH # INT(TEST.HIGH) THEN
         ERRMSG<-1> =  'Range values must be integer, found: ':TEST.LOW:' ':TEST.HIGH
         NUM.ERRORS += 1
         RETURN
      END
      IF TEST.HIGH < TEST.LOW THEN
         ERRMSG<-1> =  'Second range must be less than first, found: ':TEST.LOW:' ':TEST.HIGH
         NUM.ERRORS += 1
         RETURN
      END
      RETURN






OPEN.FILES: 
      OPEN '',SRC.FILENAME TO F.SRC ELSE
         PRINT 'Unable to open ':SRC.FILENAME
         STOP
      END
      OPEN 'DICT',SRC.FILENAME TO D.SRC ELSE
         PRINT 'UNABLE TO OPEN DICTIONARY FOR ':SRC.FILENAME
         STOP
      END
      OPEN 'DICT','VOC' TO D.VOC ELSE
         PRINT 'UNABLE TO OPEN DICT VOC FILE'
         STOP
      END

      READ LEFT.FIELD.DICT.REC FROM D.SRC,LEFT.FIELD ELSE
         READ LEFT.FIELD.DICT.REC FROM D.VOC, LEFT.FIELD ELSE
            PRINT 'DICTIONARY RECORD NOT FOUND FOR ':LEFT.FIELD
            STOP
         END
      END
      LEFT.FIELD.TYPE = LEFT.FIELD.DICT.REC<1>[1,1]
      IF LEFT.FIELD.TYPE # 'D' AND LEFT.FIELD.TYPE # 'I' THEN
         PRINT 'CAN HANDLE ONLY D- AND I-DESCRIPTORS ':LEFT.FIELD
         STOP
      END
      LEFT.FIELD.LOC = LEFT.FIELD.DICT.REC<2>
      LEFT.FIELD.CONV = LEFT.FIELD.DICT.REC<3>
      LEFT.FIELD.FMT = LEFT.FIELD.DICT.REC<5>
      LEFT.FIELD.SM = LEFT.FIELD.DICT.REC<6>

      READ RIGHT.FIELD.DICT.REC FROM D.SRC,RIGHT.FIELD ELSE
         READ RIGHT.FIELD.DICT.REC FROM D.VOC, RIGHT.FIELD ELSE
            PRINT 'DICTIONARY RECORD NOT FOUND FOR ':RIGHT.FIELD
            STOP
         END
      END
      RIGHT.FIELD.TYPE = RIGHT.FIELD.DICT.REC<1>[1,1]
      IF RIGHT.FIELD.TYPE # 'D' AND RIGHT.FIELD.TYPE # 'I' THEN
         PRINT 'CAN HANDLE ONLY D- AND I-DESCRIPTORS ':RIGHT.FIELD
         STOP
      END
      RIGHT.FIELD.LOC = RIGHT.FIELD.DICT.REC<2>
      RIGHT.FIELD.CONV = RIGHT.FIELD.DICT.REC<3>
      RIGHT.FIELD.FMT = RIGHT.FIELD.DICT.REC<5>
      RIGHT.FIELD.SM = RIGHT.FIELD.DICT.REC<6>

      IF HAVE.SUM.OPTION THEN
         READ SUM.FIELD.DICT.REC FROM D.SRC,SUM.FIELD ELSE
            PRINT 'DICTIONARY RECORD NOT FOUND FOR ':SUM.FIELD
            STOP
         END
         SUM.FIELD.TYPE = SUM.FIELD.DICT.REC<1>[1,1]
         IF SUM.FIELD.TYPE # 'D' AND SUM.FIELD.TYPE # 'I' THEN
            PRINT 'CAN HANDLE ONLY D- AND I-DESCRIPTORS ':SUM.FIELD
            STOP
         END
         SUM.FIELD.LOC = SUM.FIELD.DICT.REC<2>
         SUM.FIELD.CONV = SUM.FIELD.DICT.REC<3>
         SUM.FIELD.FMT = SUM.FIELD.DICT.REC<5>
         SUM.FIELD.SM = SUM.FIELD.DICT.REC<6>
      END

      IF HAVE.MEAN.OPTION THEN
         READ MEAN.FIELD.DICT.REC FROM D.SRC,MEAN.FIELD ELSE
            PRINT 'DICTIONARY RECORD NOT FOUND FOR ':MEAN.FIELD
            STOP
         END
         MEAN.FIELD.TYPE = MEAN.FIELD.DICT.REC<1>[1,1]
         IF MEAN.FIELD.TYPE # 'D' AND MEAN.FIELD.TYPE # 'I' THEN
            PRINT 'CAN HANDLE ONLY D- AND I-DESCRIPTORS ':MEAN.FIELD
            STOP
         END
         MEAN.FIELD.LOC = MEAN.FIELD.DICT.REC<2>
         MEAN.FIELD.CONV = MEAN.FIELD.DICT.REC<3>
         MEAN.FIELD.FMT = MEAN.FIELD.DICT.REC<5>
         MEAN.FIELD.SM = MEAN.FIELD.DICT.REC<6>
      END



      RETURN


***************************************************************************
*
***************************************************************************
FORM.SELECT.LISTS: 
      FOR I = 1 TO NUM.LEFT.FIELD
         FOR J = 1 TO NUM.RIGHT.FIELD
            IF SELECT.LISTS(I,J) # '' THEN
               COMMAND = 'SAVE.LIST ':LIST.PREFIX
               COMMAND := LEFT.FIELD.LIST<1,I>:'.':RIGHT.FIELD.LIST<1,J>
               COMMAND := ' FROM 9'
               FORMLIST SELECT.LISTS(I,J) TO 9
               EXECUTE COMMAND
            END
         NEXT J
      NEXT I
      RETURN





PRINT.ERRORS: 
      HEADING "'C'CROSS.TAB Error Listing'LL'"
      DELIM = 999
      LOOP
      UNTIL DELIM = 0
         MSG = REMOVE(ERRMSG,DELIM)
         PRINT MSG
      REPEAT
      RETURN

PRINT.PRINT.LINE: 
      IF HAVE.OUTPUT.FILE THEN
         R.OUTPUT.FILE<-1> = PRINT.LINE
      END ELSE
         PRINT PRINT.LINE
      END
      RETURN




   END
