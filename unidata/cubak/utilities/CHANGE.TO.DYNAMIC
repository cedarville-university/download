*
* UNIBASIC PROGRAM
* 05/17/95
* DLR
* TITLE ----- CHANGE.TO.DYNAMIC
*
* PURPOSE:  CHANGE STATIC FILE TO DYNAMIC FILE
*
* Stamped: pty/ttyp5 root, /disk1/collive, user #955, 16 Jun 96, 08:51PM.
* Handle index files of old file.  Note that create.index and
* build.index will still need to be run for the new dynamic file.
* Stamped: pty/ttyp2 rotmand, /disk1/collive, user #18718, 17 May 95, 07:44AM.
*
*************************************************************************
*

      $INCLUDE SYSCOM FILEINFO.INS.IBAS



      COMMAND.LINE = @SENTENCE
      GOSUB LOAD.PARAMETERS
      GOSUB GET.PATH.INFO
      GOSUB BUILD.PARAGRAPH
      GOSUB EXECUTE.PARAGRAPH
      STOP


LOAD.PARAMETERS: 
      NUM.PARAMS = 0
      PARAM.QUOTED = ''
      PARAM.STR = ''
      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)
      IF PARAM.STR<1> = 'RUN' THEN
         STARTING.PARAM = 4
      END ELSE
         STARTING.PARAM = 2
      END
      FILE.NAME = PARAM.STR<STARTING.PARAM>
      NEW.MODULUS = PARAM.STR<STARTING.PARAM+1>
      IF FILE.NAME = '' THEN
         CRT 'You must specify a file name to change from static to dynamic.'
         STOP
      END
      OPEN '','VOC' TO F.VOC ELSE
         CRT 'Unable to open VOC file.'
      END
      READ VOC.REC FROM F.VOC, FILE.NAME ELSE
         CRT 'Unable to read ':FILE.NAME:' from VOC.'
         STOP
      END
      RETURN


GET.PATH.INFO: 
      OPEN '',FILE.NAME TO F.FILE.NAME ELSE
         CRT 'Unable to open ':FILE.NAME:'.'
         STOP
      END
      PATHNAME=FILEINFO(F.FILE.NAME,FINFO$PATHNAME)
      TYPE=FILEINFO(F.FILE.NAME,FINFO$TYPE)
      HASHALG=FILEINFO(F.FILE.NAME,FINFO$HASHALG)
      IF NEW.MODULUS = '' THEN
         MODULUS=FILEINFO(F.FILE.NAME,FINFO$MODULUS)
         CRT 'Old modulus is ':MODULUS
         PRINT 'New modulus? ':
         INPUT NEW.MODULUS
      END
      IF TYPE # 2 THEN
         CRT 'File ':FILE.NAME:' is not a data file of type 2.'
         CRT 'Current file type is ':TYPE:'.'
         STOP
      END
      IF TYPE # 2 THEN
         CRT 'File ':FILE.NAME:' is not a static file.'
         CRT 'Current hashing algorithm is ':HASHALG:'.'
         STOP
      END

      SLASH.COUNT = COUNT(PATHNAME,'/')
      PATHNAME.PATH = FIELD(PATHNAME,'/',1,SLASH.COUNT)
      PATHNAME.FILE = FIELD(PATHNAME,'/',SLASH.COUNT+1,1)
      CLOSE F.FILE.NAME
      RETURN


BUILD.PARAGRAPH: 
      OLD.VOC.REC = VOC.REC
      OLD.VOC.REC<2> = PATHNAME:'.OLD'
      WRITE OLD.VOC.REC ON F.VOC, FILE.NAME:'.OLD'
      OLD.FILE.PATH = PATHNAME:'.OLD'
      PARAGRAPH = ''
      PARAGRAPH<-1> = '!mv ':PATHNAME:' ':OLD.FILE.PATH
*DLR*      PARAGRAPH<-1> = '!mv X_':PATHNAME:' X_':OLD.FILE.PATH
      PARAGRAPH<-1> = 'CREATE.FILE ':FILE.NAME:'.TEMP'
      PARAGRAPH := ' ':NEW.MODULUS
      PARAGRAPH := ' DYNAMIC'
      PARAGRAPH<-1> = '!cp -R ':FILE.NAME:'.TEMP'
      PARAGRAPH := ' ':PATHNAME
      PARAGRAPH<-1> = 'ORIG.DELETE.FILE ':FILE.NAME:'.TEMP'
      PARAGRAPH<-1> = '!rm -R ':FILE.NAME:'.TEMP'
      PARAGRAPH<-1> = 'COPY FROM ':FILE.NAME:'.OLD TO ':FILE.NAME:' ALL'
      RETURN


EXECUTE.PARAGRAPH: 
      CRT
      CRT 'Beginning ':FILE.NAME
      NUM.LINES = COUNT(PARAGRAPH,@FM) + 1
      FOR WHICH.LINE = 1 TO NUM.LINES
         COMMAND.TO.EXECUTE = PARAGRAPH<WHICH.LINE>
         CRT COMMAND.TO.EXECUTE
         EXECUTE COMMAND.TO.EXECUTE
      NEXT WHICH.LINE

      RETURN


   END
