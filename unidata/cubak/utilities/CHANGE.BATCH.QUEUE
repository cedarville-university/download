*
* INFO/BASIC PROGRAM
* 4/1/92
* DWS
* TITLE ----- CHANGE.BATCH.QUEUE
*
*
* PURPOSE: CHANGE A BATCH JOB FROM QUEUE TO ANOTHER
*           (ADAPTED FROM BATCH.CANCEL)
*
*     Last updated by LIVE (SJOQUIST) at 09:17:55 on 04/01/1992.
*
*************************************************************************
*

$INCLUDE LOCAL.SOURCE I_BATCH.COMMON

*
*
* MAIN CONTROL
*

      GOSUB SET.UP
      IF JOB.QUEUE.NAME = '' THEN
         STOP '"':NEW.QUEUE.NAME:'" is not a valid queue'
      END
      GOSUB READ.JOB
      IF JOB.EXISTS THEN
         GOSUB VERIFY.USER.NAME
         IF USER.OKAY THEN
            IF REMOTE.FILE = 'BATCH.PARAGRAPHS' THEN
               GOSUB DELETE.JOB.PARAMETERS
               GOSUB CANCEL.JOB
               GOSUB START.NEW.JOB
            END ELSE
               CRT 'Job # ':JOB.NUMBER:' is not in "BATCH.PARAGRAPHS"'
               CRT 'only jobs using BATCH.PARAGRAPHS/BATCH.PARAMETERS system can be moved'
            END
         END ELSE
            CRT 'Job # ':JOB.NUMBER:' belongs to user ':USER.NAME
         END
      END ELSE
         CRT 'Job # ':JOB.NUMBER:' does not exist'
      END
      STOP



*
*
* SET UP
*
SET.UP:
      COMMAND.LINE = @SENTENCE
      PARAM.STR = ''
      PARAM.QU = ''
      NUM.PARAMS = 0
      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QU,NUM.PARAMS)
      IF NUM.PARAMS # 5 THEN
         CRT 'Syntax:'
         CRT '   CHANGE.BATCH.QUEUE job# NewQueueName'
         STOP
      END
      JOB.NUMBER = PARAM.STR<4>
      NEW.QUEUE.NAME = PARAM.STR<5>
*
*
      ON.ERROR.RETURN = ''
      ERRMSG = ''
      F.CIFILE = ''
      CALL OPEN.FILE(F.CIFILE,'CIFILE',ON.ERROR.RETURN,ERRMSG)
      F.REMOTE.VOC = ''
      F.INFO.USERS = ''
      CALL OPEN.FILE(F.INFO.USERS,'INFO.USERS',ON.ERROR.RETURN,ERRMSG)
*
*  BATCH QUEUE CONTROL RECORD, KEYED BY USERNAME (@LOGNAME)
*   IF THERE IS NO USERNAME RECORD, THEN TRY ACCOUNT NAME (@WHO)
*   IF THERE IS NO ACCOUNT NAME RECORD, THEN TRY 'DEFAULT'
*
      MATREAD BQ.CONTROL.REC FROM F.BATCH.QUEUE.CONTROL, @LOGNAME ELSE
         MATREAD BQ.CONTROL.REC FROM F.BATCH.QUEUE.CONTROL, @WHO ELSE
            MATREAD BQ.CONTROL.REC FROM F.BATCH.QUEUE.CONTROL, 'DEFAULT' ELSE
               CALL FATAL.ERROR('MISSING.ITEM','DEFAULT':@FM:'BATCH.QUEUE.CONTROL')
            END
         END
      END
      LOCATE NEW.QUEUE.NAME IN BQ.VALID.QUEUES<1,1> SETTING POS THEN
         JOB.QUEUE.NAME = NEW.QUEUE.NAME
      END ELSE
         JOB.QUEUE.NAME = ''
      END
      RETURN



*
*
* READ JOB
*
READ.JOB:
      JOB.NAME = 'C':JOB.NUMBER
      VOC.ITEM = ''
      REMOTE.FILE = ''
      REMOTE.ITEM = ''
      JOB.EXISTS = 1
      READ CIFILE.REC FROM F.CIFILE, JOB.NAME ELSE
         CIFILE.REC = ''
         JOB.EXISTS = 0
      END
      F.REMOTE.VOC = ''
      LOCATE 'INFO' IN CIFILE.REC<1> SETTING INFO.POS THEN
         UFD.NAME = TRIM(CIFILE.REC<15>[137,40])
         ACCOUNT.NAME = FIELD(UFD.NAME,'>',COUNT(UFD.NAME,'>')+1,1)
         VOC.FILE.NAME = ACCOUNT.NAME:'.VOC'
         CALL OPEN.FILE(F.REMOTE.VOC,VOC.FILE.NAME,ON.ERROR.RETURN,ERRMSG)
         VOC.ITEM = CIFILE.REC<INFO.POS+1>
         READ VOC.REC FROM F.REMOTE.VOC, VOC.ITEM ELSE
            VOC.REC = ''
         END
         IF VOC.REC<1>[1,1] = 'R' THEN
            REMOTE.FILE = VOC.REC<2>
            REMOTE.ITEM = VOC.REC<3>
         END
      END
      NUM.FIELDS = COUNT(CIFILE.REC,@FM) + 1
      OWNER.USER.NAME = TRIM(CIFILE.REC<NUM.FIELDS>[4,32])
      RETURN


*
*
* VERIFY USER NAME
*
VERIFY.USER.NAME:
      USER.NAME = @LOGNAME
      USER.OKAY = 0
      IF USER.NAME = OWNER.USER.NAME THEN
         USER.OKAY = 1
         RETURN
      END
*
* FIELD 11 IN "INFO.USERS" HAS THE NAMES OF THOSE USERS WHOSE JOBS THE
*   USER RUNNING THE PROGRAM MAY CANCEL
*
      READ INFO.USERS.REC FROM F.INFO.USERS, USER.NAME ELSE
         INFO.USERS.REC = ''
      END
      IF INFO.USERS.REC<11> = 'ALL' THEN
         USER.OKAY = 1
      END
      LOCATE OWNER.USER.NAME IN INFO.USERS.REC<11,1> SETTING POS THEN
         USER.OKAY = 1
         RETURN
         RETURN
      END
      RETURN


*
*
* DELETE JOB PARAMETERS
*
DELETE.JOB.PARAMETERS:
      IF VOC.ITEM[1,6] = 'BATCH.' AND NUM(VOC.ITEM[7,99]) THEN
         CRT 'Deleting "':VOC.ITEM:'" from "':VOC.FILE.NAME:'"'
         DELETE F.REMOTE.VOC, VOC.ITEM
      END
      RETURN



*
*
* CANCEL JOB
*
CANCEL.JOB:
      COMMAND = 'PJOB #':JOB.NUMBER:' -CANCEL'
      EXECUTE COMMAND
      RETURN


*
*
* FIND NEXT REMOTE NAME
*
FIND.NEXT.REMOTE.NAME:
      CTR = 1
      LOOP
         VOC.REMOTE.NAME = 'BATCH.':CTR
         FOUND = @TRUE
         READV TEST FROM F.VOC, VOC.REMOTE.NAME, 0 ELSE
            FOUND = @FALSE
         END
      UNTIL NOT(FOUND)
         CTR += 1
      REPEAT
      RETURN


*
*
* START NEW JOB
*
START.NEW.JOB:
      GOSUB FIND.NEXT.REMOTE.NAME
      WRITE VOC.REC TO F.VOC, VOC.REMOTE.NAME
      COMMAND = 'JOB ':VOC.REMOTE.NAME:' -QUEUE ':NEW.QUEUE.NAME
      EXECUTE COMMAND
      RETURN

   END
