*
* INFO/BASIC PROGRAM
* 10/20/88
* DLR
* TITLE ----- SAVE.REPORT
* REL 0.0
*
*
* MODULE : SAVE.REPORT/RUN.REPORT
* PURPOSE: SAVE COMMAND(S) INTO A PARAGRAPH SUITABLE FOR EXECUTION
*          VIA RUN.REPORT
*
*     Last updated by LIVE (ROTMAN) at 13:56:12 on 03/08/1989.
* Allow insertion of MODE directive for RUN.REPORT
*     Last updated by LIVE (ROTMAN) at 14:42:23 on 12/22/1988.
* Insert DISPLAY THIS REPORT PRINTS ON [NARROW,WIDE] PAPER if desired
*     Last updated by LIVE (ROTMAN) at 12:27:19 on 10/20/1988.
* INFO/BASIC version replacing a simpler VOC paragraph
*
*************************************************************************
*  This program is provided 'as is' for your use by ROTMAN & SJOQUIST.
*  You are encouraged to verify the accuracy of program functions prior
*  to use with actual data files.
*
*  For a list of programs available for purchase from ROTMAN & SJOQUIST,
*  contact Dave Rotman or Doug Sjoquist:
*
*      Rotman and Sjoquist
*      c/o Cedarville College
*      PO Box 601
*      Cedarville, OH 45314
*      (513) 766-2211
*
*************************************************************************
*
*
* COMMAND LINE SYNTAX
* RUN CUSTOM.SOURCE SAVE.REPORT REP.FILENAME REP.RECORD.NAME START.LINE END.LINE
*   (START.LINE and END.LINE are optional.)
*

      DIM PARAM(20)
      DIM SENTENCE.TOKENS(30)

      GOSUB SET.UP.CONSTANTS

      COMMAND.LINE = @SENTENCE
*      COMMAND.STACK = @COMMAND.STACK
      PARAM.STR = NIL
      PARAM.QUOTED = NIL
      NUM.PARAMS = 0
      GOSUB LOAD.PARAMETERS
      GOSUB PROCESS.REQUEST
      STOP



***************************************************************************
* SET UP
***************************************************************************
SET.UP.CONSTANTS: 
      NIL = ''
      TRUE = 1
      FALSE = 0
      PROMPT ''
      TEMP = @(0,0)
      DEFAULT.FORM.NAME = '<<FORM,1-6X>>'

* PRESERVE THE ALPHABETICAL ORDERING OF "INFORM.VERB.LIST"
      INFORM.VERB.LIST = ''
      INFORM.VERB.LIST<1,-1> = 'COUNT'
      INFORM.VERB.LIST<1,-1> = 'LIST'
      INFORM.VERB.LIST<1,-1> = 'SELECT'
      INFORM.VERB.LIST<1,-1> = 'SORT'
      INFORM.VERB.LIST<1,-1> = 'SSELECT'
      INFORM.VERB.LIST<1,-1> = 'SUM'

      RETURN



***************************************************************************
* LOAD PARAMETERS
***************************************************************************
LOAD.PARAMETERS: 
      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)
      MATPARSE PARAM FROM PARAM.STR,@FM
      REP.MODULE = PARAM(2)
      L = LEN(REP.MODULE)
      IF REP.MODULE[L-3,4] = '.REP' THEN
         REP.MODULE = REP.MODULE[1,L-4]
      END
      IF NOT(REP.MODULE) THEN
         PRINT 'No report file name was specified.'
         GOSUB PRINT.HELP
         STOP
      END
      REP.FILE.NAME = REP.MODULE:'.REP'
      OPEN '',REP.FILE.NAME TO F.REP.FILE ELSE
         REP.FILE.NAME = REP.MODULE
         OPEN '',REP.FILE.NAME TO F.REP.FILE ELSE
            PRINT 'Unable to open report file ':REP.FILE.NAME:'.'
            STOP
         END
      END
      OPEN '','VOC' TO F.VOC ELSE
         PRINT 'Unable to open "VOC"'
         STOP
      END
      REP.RECORD.NAME = PARAM(3)
      IF NOT(REP.RECORD.NAME) THEN
         PRINT 'No report name was specified for file ':REP.FILE.NAME:'.'
         GOSUB PRINT.HELP
         STOP
      END
      REP.RECORD.EXISTS = TRUE
      READ REP.RECORD FROM F.REP.FILE,REP.RECORD.NAME ELSE
         REP.RECORD.EXISTS = FALSE
         REP.RECORD = ''
      END
      VOC.RECORD.NAME = PARAM(4)
      READ VOC.RECORD FROM F.VOC, VOC.RECORD.NAME ELSE
         PRINT 'Cannot read "':VOC.RECORD.NAME:'" from "VOC"'
         STOP
      END
      NUM.VOC.LINES = COUNT(VOC.RECORD,@FM) + 1
*      IF NOT(START.LINE) THEN
*         START.LINE = 1
*      END
*      IF NOT(NUM(START.LINE)) OR START.LINE < 1 OR START.LINE > 99 THEN
*         PRINT 'Starting line number must be between 1 and 99.'
*         GOSUB PRINT.HELP
*         STOP
*      END
*      END.LINE = PARAM(7)
*      IF NOT(END.LINE) THEN
*         END.LINE = 1
*      END
*      IF NOT(NUM(END.LINE)) OR END.LINE > START.LINE THEN
*         PRINT 'Ending line number must be between 1 and starting line number.'
*         GOSUB PRINT.HELP
*         STOP
*      END
      RETURN



***************************************************************************
* GIVE THE USER SOME HELP
***************************************************************************
PRINT.HELP: 
      PRINT
      PRINT "Usage:"
*      PRINT "SAVE.REPORT file.name report.name starting.line ending.line"
      PRINT "SAVE.REPORT file.name report.name VOC.record.name"
      PRINT
      PRINT "  file.name      is the name of the report file (eg ADM.REP)"
      PRINT "  report.name    is the name of the report you are saving"
*      PRINT "  starting.line  (optional) starting line to save (default is 1)"
*      PRINT "  ending.line    (optional) ending line to save (default is 1)"
      PRINT "  VOC.record.name is the VOC item where the commands are stored"
      PRINT
      PRINT "Examples:"
      PRINT ".S TEMP"
      PRINT "SAVE.REPORT ADM.REP GOOD.PROSPECTS TEMP"
*      PRINT "SAVE.REPORT GL.REP OVERSPENT 8 3"
      PRINT ".S TEMP 8 3"
      PRINT "SAVE.REPORT GL.REP OVERSPENT TEMP"
      PRINT
      RETURN


***************************************************************************
*
***************************************************************************
PROCESS.REQUEST: 
      IF REP.RECORD.EXISTS THEN
         PRINT REP.RECORD.NAME:' already exists in file ':REP.FILE.NAME:'.'
         LOOP
            PRINT 'Okay to overwrite ':REP.RECORD.NAME:'? (Y,[NL]) ':
            INPUT ANS
            OKAY.TO.OVERWRITE = OCONV(ANS[1,1],'MCU')
         UNTIL OKAY.TO.OVERWRITE = 'Y' OR OKAY.TO.OVERWRITE = ''
         REPEAT
         IF OKAY.TO.OVERWRITE = '' THEN
            PRINT 'SAVE.REPORT cancelled.'
            STOP
         END
      END
* STORE THE COMMANDS
      HAVE.PRINT = FALSE
      HAVE.GET.LIST = FALSE
      REP.RECORD = 'PA'
      GOSUB GET.DESCRIPTION
      IF DESCRIPTION THEN
         REP.RECORD := DESCRIPTION
      END
      REP.RECORD<2> = '* Created by ':@WHO:' (':@LOGNAME:') at ':OCONV(@TIME,'MTHS'):' on ':OCONV(@DATE,'D4/'):'.'
      COUNT.SENTENCES = 2
      PRIOR.KEY.WORD = ''
*      FOR WHICH.COMMAND = START.LINE + 1 TO END.LINE + 1 STEP -1
      FOR WHICH.COMMAND = 2 TO NUM.VOC.LINES
*         THIS.SENTENCE = COMMAND.STACK<WHICH.COMMAND>
         THIS.SENTENCE = VOC.RECORD<WHICH.COMMAND>
         NUM.TOKENS = ''
         MAT SENTENCE.TOKENS = ''
         CALL PARSE.LINE(THIS.SENTENCE,SENTENCE.STR,SENTENCE.QUOTED,NUM.TOKENS)
         KEY.WORD = SENTENCE.STR<1>
         IF KEY.WORD = 'COUNT' OR KEY.WORD = 'LIST' OR KEY.WORD = 'SORT' OR KEY.WORD = 'SUM' THEN
            HAVE.PRINT = TRUE
         END
         IF KEY.WORD = 'GET.LIST' THEN
            HAVE.GET.LIST = TRUE
         END
         GOSUB CHECK.FOR.REQUIRE.SELECT
         GOSUB CHECK.FOR.SAMPLE
         GOSUB CHECK.FOR.LPTR
         GOSUB REBUILD.SENTENCE
         COUNT.SENTENCES += 1
         REP.RECORD<COUNT.SENTENCES> = REBUILT.SENTENCE
         PRIOR.KEY.WORD = KEY.WORD
      NEXT WHICH.COMMAND
      IF NOT(HAVE.GET.LIST) THEN
         GOSUB CHECK.GET.LIST
      END
      IF HAVE.PRINT THEN
         GOSUB PROCESS.PRINT
      END ELSE
         GOSUB PROCESS.SELECT
      END
      GOSUB CHECK.FOR.MODE
      WRITE REP.RECORD ON F.REP.FILE,REP.RECORD.NAME
      PRINT REP.RECORD.NAME:' written to file ':REP.FILE.NAME:'.'
      RETURN



***************************************************************************
*
***************************************************************************
CHECK.FOR.SAMPLE: 
      LOCATE 'SAMPLE' IN SENTENCE.STR<1> SETTING POS ELSE POS = 0
      IF POS THEN
         SAMPLE.COUNT = SENTENCE.STR<POS+1>
         IF NUM(SAMPLE.COUNT) THEN
            DEL SENTENCE.STR<POS+1>
            DEL SENTENCE.QUOTED<POS+1>
         END
         DEL SENTENCE.STR<POS>
         DEL SENTENCE.QUOTED<POS>
      END
      RETURN


***************************************************************************
*
***************************************************************************
CHECK.FOR.LPTR: 
      LOCATE 'LPTR' IN SENTENCE.STR<1> SETTING POS ELSE POS = 0
      IF POS THEN
         DEL SENTENCE.STR<POS>
         DEL SENTENCE.QUOTED<POS>
      END
      RETURN


CHECK.FOR.REQUIRE.SELECT: 
      LOCATE 'REQUIRE.SELECT' IN SENTENCE.STR<1> SETTING POS ELSE POS = 0
      IF POS THEN
         DEL SENTENCE.STR<POS>
         DEL SENTENCE.QUOTED<POS>
      END
      RETURN


*
*
* REBUILD SENTENCE.STR (PUT QUOTES BACK IN, AND REMOVE @FM)
*
REBUILD.SENTENCE: 
      REBUILT.SENTENCE = ''
      DELIM.STR = 99
      LOOP
         REMOVE ITEM FROM SENTENCE.STR SETTING DELIM.STR
         REMOVE QUOTE FROM SENTENCE.QUOTED SETTING JUNK
         IF QUOTE THEN
            REBUILT.SENTENCE := QUOTE:ITEM:QUOTE:' '
         END ELSE
            REBUILT.SENTENCE := ITEM:' '
         END
      UNTIL DELIM.STR = 0
      REPEAT
      LOCATE KEY.WORD IN INFORM.VERB.LIST<1,1> BY "AL" SETTING POS THEN
         IF PRIOR.KEY.WORD = 'GET.LIST' OR PRIOR.KEY.WORD = 'SELECT' OR PRIOR.KEY.WORD = 'SSELECT' THEN
            REBUILT.SENTENCE := 'REQUIRE.SELECT '
         END
      END
      RETURN


*
*
* GET DESCRIPTION(S) TO STORE WITH REPORT
*
GET.DESCRIPTION: 
      PRINT 'Description of report (Enter as many lines as necessary)'
      DESCRIPTION = ''
      LOOP
         PRINT '>':
         INPUT ANS
      UNTIL ANS = ''
         DESCRIPTION := ' ':ANS
      REPEAT
      RETURN


***************************************************************************
*
***************************************************************************
CHECK.GET.LIST: 
      PRINT 'Name of save.list to get? ':
      INPUT ANS
      IF ANS THEN
         PROMPT.LOC = INDEX(ANS,'>>',1)
         IF PROMPT.LOC > 0 THEN
            COMMA.LOC = INDEX(ANS,',',1)
            IF COMMA.LOC < 1 THEN
               ANS = ANS[1,LEN(ANS)-2]:',1-30X>>'
            END
         END
         INS 'GET.LIST ':ANS BEFORE REP.RECORD<3>
         COUNT.SENTENCES += 1
         HAVE.GET.LIST = TRUE
      END
      RETURN



***************************************************************************
*
***************************************************************************
PROCESS.PRINT: 
      PRINT.WIDTH = 132
      BANNER.TEXT = REP.MODULE:'_':REP.RECORD.NAME

      PRINT '[N]arrow paper, [W]ide paper, or enter display text:'
      INPUT ANS
      L = LEN(ANS)
      FORM.TYPE = OCONV(ANS[1,1],'MCU')
      IF L > 0 THEN
         BEGIN CASE
            CASE L = 1 AND FORM.TYPE = 'N'
               INS 'DISPLAY This report prints on NARROW paper.' BEFORE REP.RECORD<3>
            CASE L = 1 AND FORM.TYPE = 'W'
               INS 'DISPLAY This report prints on WIDE paper.' BEFORE REP.RECORD<3>
            CASE 1
               INS 'DISPLAY ':ANS BEFORE REP.RECORD<3>
         END CASE
         COUNT.SENTENCES += 1
         PRINT 'Form name to use? [':DEFAULT.FORM.NAME:']: ':
         INPUT ANS
         IF ANS = '' THEN
            ANS = DEFAULT.FORM.NAME
         END
         PROMPT.LOC = INDEX(ANS,'>>',1)
         IF PROMPT.LOC > 0 THEN
            COMMA.LOC = INDEX(ANS,',',1)
            IF COMMA.LOC < 1 THEN
               ANS = ANS[1,LEN(ANS)-2]:',1-6X>>'
            END
         END
         SET.BANNER.LINE = 'SET.BANNER FORM ':ANS:' BANNER ':BANNER.TEXT
         IF FORM.TYPE = 'N' THEN
            PRINT.WIDTH = 82
         END
         SET.BANNER.LINE := ' WIDTH ':PRINT.WIDTH
         INS SET.BANNER.LINE BEFORE REP.RECORD<4>
         COUNT.SENTENCES += 1
      END

      LAST.SENTENCE = REP.RECORD<COUNT.SENTENCES>
      LAST.SENTENCE := 'LPTR'
*DLR*      IF HAVE.GET.LIST THEN
*DLR*         LAST.SENTENCE := ' REQUIRE.SELECT'
*DLR*      END

      PRINT 'Heading to use? ':
      INPUT ANS
      PROMPT.LOC = INDEX(ANS,'>>',1)
      IF PROMPT.LOC > 0 THEN
         COMMA.LOC = INDEX(ANS,',',1)
         IF COMMA.LOC < 1 THEN
            HEADING.WIDTH = PRINT.WIDTH - 20
            ANS = ANS[1,LEN(ANS)-2]:',1-':HEADING.WIDTH:'X>>'
         END
      END
      IF ANS THEN
         CONVERT "'" TO "~" IN ANS
         LAST.SENTENCE := ' HEADING "'
         LAST.SENTENCE := ANS
         LAST.SENTENCE := "'G'":BANNER.TEXT
         LAST.SENTENCE := "'LTG'Page   'PL'"
         LAST.SENTENCE := '"'
      END

      REP.RECORD<COUNT.SENTENCES> = LAST.SENTENCE

      RETURN


***************************************************************************
*
***************************************************************************
PROCESS.SELECT: 
      PRINT 'Name to new save list to create? ':
      INPUT ANS
      PROMPT.LOC = INDEX(ANS,'>>',1)
      IF PROMPT.LOC > 0 THEN
         COMMA.LOC = INDEX(ANS,',',1)
         IF COMMA.LOC < 1 THEN
            ANS = ANS[1,LEN(ANS)-2]:',1-30X>>'
         END
      END
      IF ANS THEN
         REP.RECORD<-1> = 'SAVE.LIST ':ANS
         COUNT.SENTENCES += 1
      END
      RETURN


***************************************************************************
*
***************************************************************************
CHECK.FOR.MODE: 
      LOOP
         PRINT 'Enter mode ([B]atch, [P]hantom, or [NL]): ':
         INPUT ANS
         TEMP = OCONV(ANS[1,1],'MCU')
         IF TEMP THEN
            BEGIN CASE
               CASE TEMP = 'B'
                  INS '* RUN.REPORT.MODE BATCH' BEFORE REP.RECORD<3>
               CASE TEMP = 'P'
                  INS '* RUN.REPORT.MODE PHANTOM' BEFORE REP.RECORD<3>
               CASE 1
                  NULL
            END CASE
            COUNT.SENTENCES += 1
         END
      UNTIL TEMP = 'B' OR TEMP = 'P' OR TEMP = ''
      REPEAT
      RETURN


   END
