*
* INFO/BASIC PROGRAM
* 10/27/88
* DLR
* TITLE ----- CC.COPY
* REL 0.0
*
*
* MODULE : ANY
* PURPOSE: COPY RECORDS FROM ONE FILE TO ANOTHER, CHANGING
*          KEYS IN THE PROCESS
*
*
* Stamped: pty/ttyra rotmand, /disk1/collive, user #1010, 04 May 95, 11:28AM.
* Allow data field for new key.
* Stamped: pty/ttyp4 rotmand, /disk1/collive, user #3455, 24 Jun 94, 09:04AM.
* Unidata conversion
*     Last updated by LIVE (ROTMAN) at 12:43:01 on 03/15/1989.
* add i-descriptor destination file
* add keywords LOG and CONFIRM
*
*
***************************************************************************
*
* SYNTAX:
*  CC.COPY FROM file1 TO file2 new.id.i.type DELETING OVERWRITING
*        LOG CONFIRM
*
*
* A SELECT LIST MUST BE ACTIVE.
*
* IF file1 = file2, THE 'TO file2' PHRASE MAY BE OMITTED.
*
* File2 MAY BE AN ACTUAL FILE IN THE VOC OR AN I-DESCRIPTOR WHICH EVALUATES
* TO A SET OF FILE NAMES.  THIS CAN BE USED TO SPLIT RECORDS FROM ONE FILE
* INTO TWO OR MORE FILES WITH ON PASS THROUGH THE SELECT LIST.
*
* New.id.i.type IS AN I-DESCRIPTOR ON file1 WHICH GIVES THE VALUE
*   OF THE NEW RECORD KEY FOR file2.
*
* DELETING and OVERWRITING are optional, and have the same effect
* as in the INFORM COPY command.
*
* LOG displays the record keys as the copying is being done.
* CONFIRM prompts before copying each record.
*

      ERROR.RETURN = ''
      ERROR.MSG = ''
      F.VOC = ''
      CALL OPEN.FILE(F.VOC,'VOC',ERROR.RETURN,ERROR.MSG)

      PROMPT ''

      MAX.FILE.VARS = 50
      GOSUB LOAD.PARAMETERS
      COUNT.COPY = 0
      DONE = 0
      LOOP
         READNEXT OLD.KEY ELSE
            DONE = 1
         END
      UNTIL DONE
         GOSUB PROCESS.OLD.KEY
      REPEAT
      CRT
      IF COUNT.COPY = 1 THEN
         CRT COUNT.COPY:' record copied.'
      END ELSE
         CRT COUNT.COPY:' records copied.'
      END
      STOP


***************************************************************************
*
***************************************************************************
LOAD.PARAMETERS: 
      ACTUAL.COMMAND.LINE = OCONV(@SENTENCE,'MCU')
      PARSED.LINE = ''
      PARAM.QUOTED = ''
      NUM.PARMS = 0
      CALL PARSE.LINE(ACTUAL.COMMAND.LINE,PARSED.LINE,PARAM.QUOTED,NUM.PARMS)
      VALUE = ''
      CALL GET.KEYWORD.VALUE(VALUE,PARSED.LINE<2>)
      IF VALUE # 'FROM' THEN
         CRT 'Keyword "FROM" not found.'
         GOSUB CRT.HELP
         STOP
      END
      FILE1.NAME = PARSED.LINE<3>
      CRT FILE1.NAME
      F.FILE1 = ''
      CALL OPEN.FILE(F.FILE1,FILE1.NAME,ERROR.RETURN,ERROR.MSG)
      D.FILE1 = ''
      CALL OPEN.FILE(D.FILE1,'DICT ':FILE1.NAME,ERROR.RETURN,ERROR.MSG)
      CALL GET.KEYWORD.VALUE(VALUE,PARSED.LINE<4>)
      IF VALUE = 'TO' THEN
         FILE2.NAME = PARSED.LINE<5>
         WHICH.PARM = 5
      END ELSE
         FILE2.NAME = FILE1.NAME
         WHICH.PARM = 3
      END
      IDESC.FILE.NAMES = ''
      DIM IDESC.FILE.VARS(MAX.FILE.VARS)
      MAT IDESC.FILE.VARS  = ''
      ERROR.RETURN = 'RETURN'
      CRT FILE2.NAME
      F.FILE2 = ''
      CALL OPEN.FILE(F.FILE2,FILE2.NAME,ERROR.RETURN,ERROR.MSG)
      IF ERROR.MSG THEN
         HAVE.FIXED.FILE = 0
      END ELSE
         HAVE.FIXED.FILE = 1
      END
      READ FILE.IDESC.REC FROM D.FILE1,FILE2.NAME ELSE
         READ FILE.IDESC.REC FROM F.VOC,FILE2.NAME ELSE
            FILE.IDESC.REC = ''
         END
      END
      IF FILE.IDESC.REC<1>[1,1] = 'I' THEN
         HAVE.FILE.IDESC = 1
      END ELSE
         HAVE.FILE.IDESC = 0
      END
      IF HAVE.FIXED.FILE AND HAVE.FILE.IDESC THEN
         CRT 'Ambiguous file reference: ':FILE2.NAME:' is a file and it is an i-descriptor'
         CRT 'on file ':FILE1.NAME:'.'
         STOP
      END
      IF NOT(HAVE.FIXED.FILE) AND NOT(HAVE.FILE.IDESC) THEN
         CRT 'Unable to open file ':FILE2.NAME:'.'
         STOP
      END

      WHICH.PARM += 1
      NEW.KEY.NAME = PARSED.LINE<WHICH.PARM>
      CRT NEW.KEY.NAME
      READ NEW.KEY.DICT.REC FROM D.FILE1,NEW.KEY.NAME ELSE
         READ NEW.KEY.DICT.REC FROM F.VOC, NEW.KEY.NAME ELSE
            NEW.KEY.DICT.REC = ''
         END
      END
      IF NEW.KEY.DICT.REC = '' THEN
         CRT 'Unable to read dictionary record ':NEW.KEY.NAME:' from file ':FILE1.NAME:'.'
         STOP
      END
      DICT.TYPE = OCONV(NEW.KEY.DICT.REC[1,1],'MCU')
      IF DICT.TYPE # 'D' AND DICT.TYPE # 'I' THEN
         CRT 'Dictionary record is not type I and not type D.'
         STOP
      END
      IF DICT.TYPE = 'D' THEN
         NEW.KEY.DICT.LOC = NEW.KEY.DICT.REC<2>
         IF NOT(NUM(NEW.KEY.DICT.LOC)) THEN
            CRT 'New key dictionary location is not numeric.'
            STOP
         END
      END
      DELETING = 0
      OVERWRITING = 0
      LOGGING = 0
      CONFIRMING = 0
      START.PARM = WHICH.PARM + 1
      FOR WHICH.PARM = START.PARM TO NUM.PARMS
         GOSUB CHECK.VOC
      NEXT WHICH.PARM
      RETURN


CHECK.VOC: 
      KEYWORD = PARSED.LINE<WHICH.PARM>
      IF KEYWORD[1,1] = '-' THEN
         KEYWORD = KEYWORD[2,99]
      END
      CALL GET.KEYWORD.VALUE(VALUE,KEYWORD)
      BEGIN CASE
         CASE VALUE = 'OVERWRITING'
            OVERWRITING = 1
         CASE VALUE = 'DELETING'
            DELETING = 1
         CASE KEYWORD = 'LOG'
            LOGGING = 1
         CASE KEYWORD = 'CONFIRM'
            CONFIRMING = 1
         CASE 1
            CRT 'Invalid parameter: ':PARSED.LINE<WHICH.PARM>
            STOP
      END CASE
      RETURN



PROCESS.OLD.KEY: 
      READ OLD.REC FROM F.FILE1,OLD.KEY ELSE
         CRT OLD.KEY:' not found on file ':FILE1.NAME
         RETURN
      END
      IF DICT.TYPE = 'D' THEN
         IF NEW.KEY.DICT.LOC = 0 THEN
            NEW.KEY = OLD.KEY
         END ELSE
            NEW.KEY = OLD.REC<NEW.KEY.DICT.LOC>
         END
      END ELSE
         @ID = OLD.KEY
         @RECORD = OLD.REC
         NEW.KEY = ITYPE(NEW.KEY.DICT.REC)
      END
      IF HAVE.FIXED.FILE THEN
         F.DESTINATION = F.FILE2
         DESTINATION = FILE2.NAME
      END ELSE
         DESTINATION = ITYPE(FILE.IDESC.REC)
         LOCATE DESTINATION IN IDESC.FILE.NAMES<1> SETTING POS THEN
            F.DESTINATION = IDESC.FILE.VARS(POS)
         END ELSE
            F.DESTINATION = ''
            ERROR.RETURN = ''
            CALL OPEN.FILE(F.DESTINATION,DESTINATION,ERROR.RETURN,ERROR.MSG)
            IDESC.FILE.NAMES<-1> = DESTINATION
            POS = COUNT(IDESC.FILE.NAMES,@FM) + 1
            IDESC.FILE.VARS(POS) = F.DESTINATION
         END
      END
      EXISTS = 1
      READ TEST FROM F.DESTINATION,NEW.KEY ELSE
         EXISTS = 0
      END
      IF EXISTS THEN
         IF OVERWRITING THEN
            GOSUB WRITE.RECORD
         END ELSE
            CRT NEW.KEY:' already exists on file ':DESTINATION:'.  Record not copied.'
            RETURN
         END
      END ELSE
         GOSUB WRITE.RECORD
      END
      RETURN



WRITE.RECORD: 
      IF CONFIRMING THEN
         GOSUB CHECK.OKAY
         IF NOT(OKAY) THEN
            CRT 'Copy abandoned.'
            RETURN
         END
      END
      WRITE OLD.REC ON F.DESTINATION,NEW.KEY
      COUNT.COPY += 1
      IF DELETING THEN
         DELETE F.FILE1,OLD.KEY
      END
      IF LOGGING THEN
         IF HAVE.FIXED.FILE THEN
            CRT 'Copied ':OLD.KEY:' to ':NEW.KEY
         END ELSE
            CRT 'Copied ':OLD.KEY:' to ':DESTINATION:' ':NEW.KEY
         END
      END ELSE
         IF MOD(COUNT.COPY,10) = 0 THEN
            CRT '*':
            IF MOD(COUNT.COPY,500) = 0 THEN
               CRT ' ':COUNT.COPY
            END
         END
      END
      RETURN



CHECK.OKAY: 
      OKAY = 0
      LOOP
         IF HAVE.FIXED.FILE THEN
            CRT 'Okay to copy ':OLD.KEY:' to ':NEW.KEY:'? ':
         END ELSE
            CRT 'Okay to copy ':OLD.KEY:' to ':DESTINATION:' ':NEW.KEY:'? ':
         END
         INPUT ANS
         ANS = OCONV(ANS[1,1],'MCU')
      UNTIL ANS = 'Y' OR ANS = 'N'
         IF ANS = 'Q' THEN
            CRT 'Are you sure you want to quit? ':
            INPUT ANS2
            ANS2 = OCONV(ANS2[1,1],'MCU')
            IF ANS2 = 'Y' THEN
               STOP
            END
         END
      REPEAT
      IF ANS = 'Y' THEN
         OKAY = 1
      END
      RETURN



CRT.HELP: 
      CRT
      CRT "Syntax for CC.COPY:"
      CRT "CC.COPY FROM file1 TO file2 new.id.i.type DELETING OVERWRITING"
      CRT "     LOG CONFIRM"
      CRT
      CRT "The 'TO' phrase, DELETING, OVERWRITING, LOG, and CONFIRM are optional."
      CRT
      CRT "NEW.ID.I.TYPE is an i-descriptor on FILE1."
      CRT
      CRT "FILE2 may be an actual file name or an i-descriptor on FILE1"
      CRT "  which evaluates to a file name.  This can be used to split"
      CRT "  records from one source file into several destination files"
      CRT "  in one pass through the select list."
      CRT
      CRT "LOG will display the record keys as the copying is done."
      CRT "CONFIRM will query for permission before copying each record."
      CRT
      RETURN


   END
