*
* UNIBASIC PROGRAM
* 07/04/94
* DLR
* TITLE ----- ADMIN.QUEUES
*
* PURPOSE:  CAP (OR UNCAP) 'at' QUEUES ON HP-UX
*
*
* Stamped: r9 rotmand, /disk1/collive, user #19054, 01 Jul 98, 12:04PM.
*   Fix bug so that "CAP A" actually caps queue A
*   (logical names worked, but actual queue names did not)
* Stamped: pty/ttyp9 rotmand, /disk1/collive, user #5706, 10 Jul 96, 07:30AM.
* Allow privileged users access to other people's queues.
* Stamped: pty/ttyp2 rotmand, /disk1/collive, user #23468, 04 Jul 94, 09:41AM.
*************************************************************************
*


      COMMAND.LINE = @SENTENCE
      GOSUB SET.UP
      CURRENT.PARAM = STARTING.PARAM
      ACTION = OCONV(PARAM.STR<STARTING.PARAM>,'MCU')
      BEGIN CASE
         CASE ACTION = 'CANCEL'
            GOSUB HANDLE.CANCEL
         CASE ACTION = 'CAP' OR ACTION = 'UNCAP'
            GOSUB HANDLE.CAP.UNCAP
         CASE ACTION = 'STATUS'
            GOSUB HANDLE.STATUS
         CASE ACTION = 'LIST'
            GOSUB HANDLE.LIST
         CASE 1
            GOSUB PRINT.HELP
      END CASE
      STOP



HANDLE.CANCEL: 
      JOBS.TO.CANCEL = FIELD(PARAM.STR,@FM,STARTING.PARAM+1,999)
      JOBS.TO.CANCEL = OCONV(JOBS.TO.CANCEL,'MCL')
      COUNT.JOBS.TO.CANCEL = COUNT(JOBS.TO.CANCEL,@FM) + (JOBS.TO.CANCEL#'')
      FOR WHICH.JOB = 1 TO COUNT.JOBS.TO.CANCEL
         JOB.KEY = JOBS.TO.CANCEL<WHICH.JOB>
         GOSUB GET.JOBS.LIST
         IF AT.JOBS.LIST = '' THEN
            PRINT JOB.KEY:' does not exist on AT.JOBS.'
         END ELSE
            AT.JOBS.KEY = AT.JOBS.LIST<1,1>
            DELETE F.BATCH.PARAGRAPHS, AT.JOBS.KEY
            DELETE F.BATCH.PARAMETERS, AT.JOBS.KEY
            DELETE F.BATCH.PRINTERS, AT.JOBS.KEY
            DELETE F.AT.FILE, AT.JOBS.KEY
            DELETE F.AT.JOBS, AT.JOBS.KEY
            COMMAND = AT.COMMAND.TO.USE:' -r ':JOB.KEY
            PCPERFORM COMMAND CAPTURING COMMAND.OUTPUT
            IF COMMAND.OUTPUT = '' THEN
               PRINT 'Job ':JOB.KEY:' (':AT.JOBS.KEY:') has been cancelled.'
            END ELSE
               PRINT 'Cancel failed for job ':JOB.KEY:' (':AT.JOBS.KEY:').'
               PRINT COMMAND.OUTPUT
            END
         END
      NEXT WHICH.JOB
      RETURN



HANDLE.CAP.UNCAP: 
      MADE.A.CHANGE = @FALSE
      IF NOT(VIEW.ALL) THEN
         CRT
         CRT 'You are not authorized to CAP/UNCAP the batch queues.'
         RETURN
      END
      GOSUB READ.WITH.LOCK
      CURRENT.PARAM += 1
      COMMAND.QUEUE.LIST = OCONV(FIELD(PARAM.STR,@FM,CURRENT.PARAM,999),'MCL')
      BEGIN CASE
         CASE COMMAND.QUEUE.LIST = '' OR COMMAND.QUEUE.LIST = 'all'
            USE.QUEUE.LIST = TOTAL.NAME.LIST
         CASE COMMAND.QUEUE.LIST = 'night'
            USE.QUEUE.LIST = NIGHT.NAME.LIST
         CASE COMMAND.QUEUE.LIST = 'day'
            USE.QUEUE.LIST = DAY.NAME.LIST
         CASE COMMAND.QUEUE.LIST = 'noon'
            USE.QUEUE.LIST = NOON.NAME.LIST
         CASE 1
            USE.QUEUE.LIST = OCONV(COMMAND.QUEUE.LIST,'MCL')
      END CASE
      CONVERT ' ':@FM TO @VM:@VM IN USE.QUEUE.LIST

      COUNT.QUEUEDEFS.REC = COUNT(QUEUEDEFS.REC,@FM) + (QUEUEDEFS.REC#'')
      FOR WHICH.QUEUE = 1 TO COUNT.QUEUEDEFS.REC
         QUEUE.LINE = QUEUEDEFS.REC<WHICH.QUEUE>
         QUEUE = QUEUE.LINE[1,1]
         LOCATE QUEUE IN TOTAL.QUEUE.LIST<1,1> SETTING TOTAL.POS THEN
            QUEUE.NAME = TOTAL.NAME.LIST<1,TOTAL.POS>
         END ELSE
            QUEUE.NAME = QUEUE
         END
         HAVE.MATCH = @FALSE
         LOCATE QUEUE.NAME IN USE.QUEUE.LIST<1,1> SETTING POS THEN
            HAVE.MATCH = @TRUE
         END ELSE
            LOCATE QUEUE IN USE.QUEUE.LIST<1,1> SETTING POS THEN
               HAVE.MATCH = @TRUE
            END
         END
         IF HAVE.MATCH THEN
            MADE.A.CHANGE = @TRUE
            IF ACTION = 'UNCAP' THEN
               QUEUE.LINE = QUEUE.LINE[1,2]:'1':QUEUE.LINE[4,999]
               PRINT 'Uncapping ':QUEUE:' (':QUEUE.NAME:')'
            END ELSE
               QUEUE.LINE = QUEUE.LINE[1,2]:'0':QUEUE.LINE[4,999]
               PRINT 'Capping ':QUEUE:' (':QUEUE.NAME:')'
            END
            QUEUEDEFS.REC<WHICH.QUEUE> = QUEUE.LINE
         END
      NEXT WHICH.QUEUE
      WRITE QUEUEDEFS.REC ON F.CRON.DIR,QUEUEDEFS.KEY
      IF NOT(MADE.A.CHANGE) THEN
         CRT 'No changes made to batch queue status.'
      END
      STOP


HANDLE.STATUS: 
      GOSUB READ.NO.LOCK
      COUNT.QUEUEDEFS.REC = COUNT(QUEUEDEFS.REC,@FM) + (QUEUEDEFS.REC#'')
      FOR WHICH.QUEUE = 1 TO COUNT.QUEUEDEFS.REC
         QUEUE.LINE = QUEUEDEFS.REC<WHICH.QUEUE>
         QUEUE = QUEUE.LINE[1,1]
         LOCATE QUEUE IN TOTAL.QUEUE.LIST<1,1> SETTING TOTAL.POS THEN
            QUEUE.NAME = TOTAL.NAME.LIST<1,TOTAL.POS>
         END ELSE
            QUEUE.NAME = QUEUE
         END
         REMAINDER.LINE = QUEUE.LINE[3,999]
         QUEUE.NUM.JOBS = FIELD(REMAINDER.LINE,'j',1,1)
         PRINT.LINE = FMT('Queue ':QUEUE:' (':QUEUE.NAME:')','16L')
         IF QUEUE.NUM.JOBS > 0 THEN
            PRINT.LINE := '  is accepting ':QUEUE.NUM.JOBS:' simultaneous jobs.'
         END ELSE
            PRINT.LINE := '  is blocked.'
         END
         PRINT PRINT.LINE
      NEXT WHICH.QUEUE
      RETURN


HANDLE.LIST: 
      COMMAND = AT.COMMAND.TO.USE:' -l'
*DLR*      CRT 'EXECUTING ':COMMAND
      PCPERFORM COMMAND CAPTURING COMMAND.OUTPUT
      COUNT.LINES = COUNT(COMMAND.OUTPUT,@FM)
      IF COUNT.LINES < 1 THEN
         PRINT 'The batch queues are empty.'
      END ELSE
         FOR WHICH.LINE = 1 TO COUNT.LINES
            AT.LINE = COMMAND.OUTPUT<WHICH.LINE>
*DLR*            CRT WHICH.LINE, AT.LINE
            IF @LOGNAME = 'root' OR VIEW.ALL THEN
               USER.DATA = TRIM(FIELD(AT.LINE,CHAR(9),1,1))
               USER.NAME = FIELD(USER.DATA,' ',3,1)
               JOB.KEY = FIELD(AT.LINE,CHAR(9),2,1)
               DATE.AND.TIME = FIELD(AT.LINE,CHAR(9),3,99)
            END ELSE
               USER.NAME = @LOGNAME
               JOB.KEY = FIELD(AT.LINE,CHAR(9),1,1)
               DATE.AND.TIME = FIELD(AT.LINE,CHAR(9),2,1)
            END
            GOSUB GET.JOBS.LIST
            PRINT.LINE = FMT(USER.NAME,'8L')[1,8]
            PRINT.LINE := ' ':FMT(JOB.KEY,'11L')[1,11]
            PRINT.LINE := ' ':DATE.AND.TIME
            PRINT.LINE := ' ':AT.JOBS.LIST
            PRINT PRINT.LINE
         NEXT WHICH.LINE
      END
      RETURN



SET.UP: 
      NIGHT.QUEUE.LIST = 'd e f g'
      DAY.QUEUE.LIST = 'a'
      NOON.QUEUE.LIST = 'z'
      UNUSED.QUEUE.LIST = 'b'
      CONVERT ' ' TO @VM IN NIGHT.QUEUE.LIST
      CONVERT ' ' TO @VM IN DAY.QUEUE.LIST
      CONVERT ' ' TO @VM IN NOON.QUEUE.LIST
      CONVERT ' ' TO @VM IN UNUSED.QUEUE.LIST
      TOTAL.QUEUE.LIST = DAY.QUEUE.LIST
      TOTAL.QUEUE.LIST<1,-1> = UNUSED.QUEUE.LIST
      TOTAL.QUEUE.LIST<1,-1> = NIGHT.QUEUE.LIST
      TOTAL.QUEUE.LIST<1,-1> = NOON.QUEUE.LIST
      NIGHT.NAME.LIST = 'NIGHT1 NIGHT2 NIGHT3 NIGHT4'
      DAY.NAME.LIST = 'DAY'
      NOON.NAME.LIST = 'NOON'
      UNUSED.NAME.LIST = 'UNUSED'
      CONVERT ' ' TO @VM IN NIGHT.NAME.LIST
      CONVERT ' ' TO @VM IN DAY.NAME.LIST
      CONVERT ' ' TO @VM IN NOON.NAME.LIST
      CONVERT ' ' TO @VM IN UNUSED.NAME.LIST
      TOTAL.NAME.LIST = DAY.NAME.LIST
      TOTAL.NAME.LIST<1,-1> = UNUSED.NAME.LIST
      TOTAL.NAME.LIST<1,-1> = NIGHT.NAME.LIST
      TOTAL.NAME.LIST<1,-1> = NOON.NAME.LIST
      ERROR.RET = ''
      ERROR.MSG = ''
      F.CRON.DIR = ''
      CALL OPEN.FILE(F.CRON.DIR,'CRON.DIR',ERROR.RET,ERROR.MSG)
      F.AT.JOBS = ''
      CALL OPEN.FILE(F.AT.JOBS,'AT.JOBS',ERROR.RET,ERROR.MSG)
      F.AT.FILE = ''
      CALL OPEN.FILE(F.AT.FILE,'AT.FILE',ERROR.RET,ERROR.MSG)
      F.BATCH.PARAGRAPHS = ''
      CALL OPEN.FILE(F.BATCH.PARAGRAPHS,'BATCH.PARAGRAPHS',ERROR.RET,ERROR.MSG)
      F.BATCH.PARAMETERS = ''
      CALL OPEN.FILE(F.BATCH.PARAMETERS,'BATCH.PARAMETERS',ERROR.RET,ERROR.MSG)
      F.BATCH.PRINTERS = ''
      CALL OPEN.FILE(F.BATCH.PRINTERS,'BATCH.PRINTERS',ERROR.RET,ERROR.MSG)
      F.INFO.USERS = ''
      CALL OPEN.FILE(F.INFO.USERS, 'INFO.USERS', ON.ERROR.RETURN, ERRMSG)
      READ INFO.USERS.REC FROM F.INFO.USERS, @LOGNAME ELSE
         INFO.USERS.REC = ''
      END
      IUR.VIEW.SPOOL.LIST = INFO.USERS.REC<15>
      LOCATE '$ALL' IN IUR.VIEW.SPOOL.LIST<1,1> SETTING POS THEN
         VIEW.ALL = @TRUE
         AT.COMMAND.TO.USE = '/datatel/locsrc/cprogs/suroot.o /usr/bin/at'
      END ELSE
         VIEW.ALL = @FALSE
         AT.COMMAND.TO.USE = 'at'
      END
*DLR*         VIEW.ALL = @FALSE
*DLR*         AT.COMMAND.TO.USE = 'at'
      IUR.EDIT.SPOOL.QUEUE.OKAY = INFO.USERS.REC<16>
      QUEUEDEFS.KEY = 'queuedefs'
      NUM.PARAMS = 0
      PARAM.QUOTED = ''
      PARAM.STR = ''
      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)
      IF PARAM.STR<1> = 'RUN' THEN
         STARTING.PARAM = 4
      END ELSE
         STARTING.PARAM = 2
      END
      RETURN


READ.WITH.LOCK: 
      READU QUEUEDEFS.REC FROM F.CRON.DIR,QUEUEDEFS.KEY LOCKED
         MSG = 'queuedefs RECORD IS LOCKED BY ':STATUS()
         PRINT MSG
         STOP
      END ELSE
         MSG = 'queuedefs RECORD NOT FOUND'
         PRINT MSG
         RELEASE F.CRON.DIR,QUEUEDEFS.KEY
         STOP
      END
      RETURN


READ.NO.LOCK: 
      READ QUEUEDEFS.REC FROM F.CRON.DIR,QUEUEDEFS.KEY ELSE
         MSG = 'queuedefs RECORD NOT FOUND'
         PRINT MSG
         RELEASE F.CRON.DIR,QUEUEDEFS.KEY
         STOP
      END
      RETURN


GET.JOBS.LIST: 
      COMMAND = 'SELECT AT.JOBS WITH JOB.KEY = "':JOB.KEY:'"'
      HUSH ON
      EXECUTE COMMAND
      READLIST AT.JOBS.LIST ELSE
         AT.JOBS.LIST = JOB.KEY
      END
      HUSH OFF
      RETURN


PRINT.HELP: 
      CRT 'Options recognized by ADMIN.QUEUES:'
      CRT '   CANCEL nnnnnnn       cancel a job from a batch queue'
      CRT '   CAP xxxxxx           cap the queues (ALL, NIGHT, DAY, NOON)'
      CRT '   LIST                 show jobs in the batch queues'
      CRT '   STATUS               show status of queues (blocked, accepting jobs)'
      CRT '   UNCAP xxxxxx         unblock the queues (ALL, NIGHT, DAY, NOON)'
      RETURN


   END
