* Stamped: p5 rotmand, /disk1/collive, user #6059, 23 Mar 00, 03:01PM.
* This version works with Colleague R13 and earlier
* See XMKL for an Envision version which works with R14 and later.
*
* INFO/BASIC PROGRAM
* DLR
* 08/24/89
* TITLE------- MAKE.LIST
*
*
* MAINTAIN SAVE LISTS WITHOUT GIVING ACCESS TO AN EDITOR
*
*
* Stamped: pty/ttyp8 sjoquist, /disk1/coltest, user #1955, 24 Jun 94, 02:35PM.
* Updated for HP-UX
* Stamped: pty/ttyp8 sjoquist, /disk1/coltest, user #1955, 24 Jun 94, 02:37PM.
* Updated for HP-UX
*     Last updated by LIVE (ROTMAND) at 15:25:14 on 03/14/1994.
* Check @system.return.code on initial 'GET.LIST' and make
* sure the user has authority to save this list.
*     Last updated by LIVE (ROTMAN) at 17:01:41 on 08/31/1990.
* Allow file access subroutine to return value 'ERROR' to indicate failure.
*     Last updated by LIVE (ROTMAN) at 07:11:58 on 08/24/1989.
* Initial coding
*
*
***********************************************************************SPN
*
*  COPYRIGHT (C) 1995, ROTMAN & SJOQUIST
*
*      The information contained in this file is proprietary to
*      ROTMAN & SJOQUIST.  This file may be modified for the
*      internal use of this institution, but no part of this file
*      nor any program derived from it may be distributed to any
*      other individual or institution.  Unmodified copies of this
*      file may be distributed to other individuals or institutions
*      provided that no charge is made for the copies.
*
***********************************************************************EPN
*
* LAYOUT OF MAKE.LIST.SECURITY RECORD IN THE 'VOC' FILE:
* F1   'X'
* F2   DEFAULT ALLOWED FILE
* F3   SECOND ALLOWED FILE
* F4   THIRD ALLOWED FILE
* etc.
*
* EACH ALLOWED FILE IS REFERENCE BY FIVE VALUES:
* V1   FILE NAME
* V2   MASK FOR ENTERING THE RECORD KEYS (TO BE PLACED IN SAVED LIST)
* V3   VERIFICATION FIELD OR I-DESCRIPTOR FOR DISPLAY USE
* V4   CONVERSION TO BE APPLIED TO VERIFICATION FIELD/I-DESCRIPTOR
* V5   SUBROUTINE TO BE CALLED FOR DATA ENTRY
*
* SAMPLE:
* F1  X
* F2  PEOPLE}#######}NAME}}CUSTOM.GET.ID
* F3  PAY.CONTROL}#####*####}PAY.DATE}D2/}
* F4  STATES}##}1}}
*
* The default file in the sample shown above is PEOPLE.  The verification field
* is NAME (which could be a data field or an i-descriptor).  Record keys are
* entered by calling CUSTOM.GET.ID.  CUSTOM.GET.ID should be defined like this:
*   SUBROUTINE CUSTOM.GET.ID
*      (ID.NO,FILE.NAME,INPUT.MASK,COLUMN.NUM,LINE.NUM,SCREEN.CHANGE)
*
* For file PAY.CONTROL, the PAY.DATE is displayed using a 'D2/' conversion.
*
* For file STATES, field 1 is displayed for verification.  Note that the user
* does not need dictionary access when the verification field is listed as
* a numeric (data field) entry.
*
***************************************************************************


$INCLUDE I_C26.STANDARD

*
* MAIN CONTROL
*


      GOSUB SET.UP
      GOSUB CHECK.SECURITY
      GOSUB GET.EXISTING.LIST
      GOSUB DO.MAINT
      GOSUB CHECK.OKAY
      STOP







*
*
* SET UP
*
SET.UP: 
      ON.ERROR.RETURN = 0
      ERRMSG = ''
      F.VOC = ''
      CALL OPEN.FILE(F.VOC,'VOC',ON.ERROR.RETURN,ERRMSG)

      READ MAKE.LIST.SECURITY FROM F.VOC, 'MAKE.LIST.SECURITY' ELSE
         CALL FATAL.ERROR('MISSING.ITEM','MAKE.LIST.SECURITY':@FM:'VOC')
      END

      DEL MAKE.LIST.SECURITY<1>         ;* GET RID OF THE 'X' FIELD
      DEFAULT.FILE.NAME = MAKE.LIST.SECURITY<1,1>

      NUM.PARAMS = 0
      PARAM.QUOTED = ''
      PARAM.STR = ''
      COMMAND.LINE = @SENTENCE
      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)

      BEGIN CASE
         CASE NUM.PARAMS = 1
            GOSUB PROMPT.FILE.NAME
            GOSUB PROMPT.LIST.NAME
         CASE NUM.PARAMS = 2
            FILE.NAME = DEFAULT.FILE.NAME
            LIST.NAME = PARAM.STR<2>
         CASE NUM.PARAMS = 3
            FILE.NAME = PARAM.STR<2>
            LIST.NAME = PARAM.STR<3>
         CASE 1
            GOSUB DISPLAY.HELP
            STOP
      END CASE

      F.FILE.NAME = ''
      CALL OPEN.FILE(F.FILE.NAME,FILE.NAME,ON.ERROR.RETURN,ERRMSG)

      RETURN



*
*
*
DISPLAY.HELP: 
      PRINT
      PRINT 'Use MAKE.LIST in one of the following forms:'
      PRINT 'MAKE.LIST                       (prompts for file and list names)'
      PRINT 'MAKE.LIST list.name             (uses your default file)'
      PRINT 'MAKE.LIST file.name list.name'
      PRINT
      RETURN


*
*
*
PROMPT.FILE.NAME: 
      PRINT 'Name of validation file [':DEFAULT.FILE.NAME:']: ':
      INPUT FILE.NAME
      FILE.NAME = OCONV(FILE.NAME,'MCU')
      IF FILE.NAME = 'END' THEN
         STOP
      END
      IF FILE.NAME = '' THEN
         FILE.NAME = DEFAULT.FILE.NAME
      END
      RETURN



*
*
*
PROMPT.LIST.NAME: 
      LOOP
         PRINT 'Name of list to maintain: ':
         INPUT LIST.NAME
         LIST.NAME = OCONV(LIST.NAME,'MCU')
         LIST.NAME = TRIM(LIST.NAME)
         CONVERT ' ' TO '.' IN LIST.NAME
      UNTIL LIST.NAME # ''
      REPEAT
      IF LIST.NAME = 'END' THEN
         STOP
      END
      RETURN



*
*
*
CHECK.SECURITY: 
      COUNT.SECURITY = COUNT(MAKE.LIST.SECURITY,@FM) + (MAKE.LIST.SECURITY#'')
      FOUND.FILE.NAME = 0
      FOR WHICH.SECURITY = 1 TO COUNT.SECURITY
         IF FILE.NAME = MAKE.LIST.SECURITY<WHICH.SECURITY,1> THEN
            FOUND.FILE.NAME = 1
            SECURITY.POS = WHICH.SECURITY
         END
      NEXT WHICH.SECURITY
      IF NOT(FOUND.FILE.NAME) THEN
         PRINT 'You are not authorized to do MAKE.LIST on file ':FILE.NAME:'.'
         STOP
      END

      KEY.MASK = MAKE.LIST.SECURITY<SECURITY.POS,2>
      VERIFY.DICT.LOC = MAKE.LIST.SECURITY<SECURITY.POS,3>
      VERIFY.DICT.CONV = MAKE.LIST.SECURITY<SECURITY.POS,4>
      VERIFY.SUBROUTINE = MAKE.LIST.SECURITY<SECURITY.POS,5>
      VERIFY.SUBROUTINE.NAME = VERIFY.SUBROUTINE

      IF KEY.MASK = '' THEN
         KEY.MASK = '#'
      END

      IF VERIFY.DICT.LOC = '' THEN
         VERIFY.DICT.LOC = 1
      END
      IF NUM(VERIFY.DICT.LOC) THEN
         VERIFY.DICT.NAME = ''
         HAVE.IDESC = 0
         IF VERIFY.DICT.LOC = '' THEN
            VERIFY.DICT.LOC = 1
         END
      END ELSE
         VERIFY.DICT.NAME = VERIFY.DICT.LOC
         D.FILE.NAME = ''
         CALL OPEN.FILE(D.FILE.NAME,'DICT ':FILE.NAME,ON.ERROR.RETURN,ERRMSG)
         READ VERIFY.DICT.REC FROM D.FILE.NAME, VERIFY.DICT.LOC ELSE
            CALL FATAL.ERROR('MISSING.ITEM',VERIFY.DICT.LOC:@FM:'DICT ':FILE.NAME)
         END
         IF VERIFY.DICT.CONV = '' THEN
            VERIFY.DICT.CONV = VERIFY.DICT.REC<3>
         END
         DICT.TYPE = VERIFY.DICT.REC<1>[1,1]
         DICT.TYPE = OCONV(DICT.TYPE,'MCU')
         BEGIN CASE
            CASE DICT.TYPE = 'D'
               HAVE.IDESC = 0
               VERIFY.DICT.LOC = VERIFY.DICT.REC<2>
               IF NOT(NUM(VERIFY.DICT.LOC)) OR VERIFY.DICT.LOC = '' THEN
                  VERIFY.DICT.LOC = 1
               END
            CASE DICT.TYPE = 'I'
               HAVE.IDESC = 1
            CASE 1
               HAVE.IDESC = 0
               VERIFY.DICT.LOC = 1
         END CASE
      END
      RETURN



*
*
*
GET.EXISTING.LIST: 
      EXECUTE 'HUSH ON'
      EXECUTE 'GET.LIST ':LIST.NAME
      RETURN.CODE = @SYSTEM.RETURN.CODE
      EXECUTE 'HUSH OFF'
      IF RETURN.CODE < 0 THEN
         EXECUTE 'SAVE.LIST ':LIST.NAME
         RETURN.CODE = @SYSTEM.RETURN.CODE
         IF RETURN.CODE < 0 THEN
            CRT 'Unable to continue processing due to errors.'
         END
      END
      READLIST REC.KEY.LIST ELSE
         REC.KEY.LIST = ''
      END
      CONVERT @IM TO @FM IN REC.KEY.LIST
      COUNT.KEY = COUNT(REC.KEY.LIST,@FM) + (REC.KEY.LIST#'')
      VERIFY.LIST = ''
      VERIFY.LOADED.LIST = ''
      RETURN



*
*
*
DO.MAINT: 
      KEY.LENGTH = LEN(KEY.MASK)
      IF KEY.LENGTH < 10 THEN
         KEY.LENGTH = 10
      END
      KEY.FORMAT = KEY.LENGTH:'L'
      HEADING.1 = 'MAINTAINING LIST "':LIST.NAME:'" FROM FILE "':FILE.NAME:'"'
      HEADING.2 = '     ':FMT('KEY',KEY.FORMAT)
      IF VERIFY.DICT.NAME THEN
         HEADING.2 := '  ':VERIFY.DICT.NAME
      END
      ENTRY.COLUMN = 5
      LINE.OFFSET = 3
      LINES.PER.PAGE = 20 - LINE.OFFSET
      LAST.PAGE = INT((COUNT.KEY-1)/LINES.PER.PAGE) + 1
      CURRENT.PAGE = 0
      WORK.PAGE = 1
      DISPLAY.PROMPT = 'ENTER (A)DD, (C)HANGE, (D)ELETE, (I)NSERT, (P)AGE, (E)XIT'
      END.PARAM = 0
      GOSUB DISPLAY.HEADINGS
      GOSUB PROCESS.PAGE
      LOOP
         GOSUB PROCESS.COMMAND
      UNTIL COMMAND = 'E'
      REPEAT
      RETURN


*
*
*
DISPLAY.HEADINGS: 
      PRINT CLEAR.SCREEN
      PRINT HEADING.1
      PRINT
      PRINT HEADING.2
      RETURN



*
*
*
PROCESS.COMMAND: 
      LOOP
         PRINT @(0,21):'Page ':CURRENT.PAGE:' of ':LAST.PAGE:CLEAR.EOL:
         COMMAND = ''
         CALL PROMPT.ANS(COMMAND,DISPLAY.PROMPT,0,22,'','',END.PARAM)
      UNTIL COMMAND = 'E' DO
         BEGIN CASE
            CASE COMMAND = 'A'
               GOSUB PROCESS.ADD
            CASE COMMAND = 'C'
               GOSUB PROCESS.CHANGE
            CASE COMMAND = 'D'
               GOSUB PROCESS.DELETE
            CASE COMMAND = 'I'
               GOSUB PROCESS.INSERT
            CASE COMMAND[1,1] = 'P'
               WORK.PAGE = COMMAND[2,99]
               GOSUB PROCESS.PAGE
            CASE COMMAND[1,1] = ''
               IF CURRENT.PAGE >= LAST.PAGE THEN
                  MSG = 'THIS IS THE LAST PAGE.'
                  CALL LINE.22(MSG)
               END ELSE
                  WORK.PAGE = CURRENT.PAGE + 1
                  GOSUB PROCESS.PAGE
               END
            CASE 1
               MSG = '"':COMMAND:'" IS NOT A VALID OPTION'
               CALL LINE.22(MSG)
         END CASE
      REPEAT
      RETURN


*
*
*
PROCESS.ADD: 
      LOOP
         COUNT.KEY += 1
         LAST.PAGE = INT((COUNT.KEY-1)/LINES.PER.PAGE) + 1
         WHICH.ITEM = COUNT.KEY
         IF CURRENT.PAGE = LAST.PAGE THEN
            LAST.ITEM.TO.DISPLAY += 1
            LINES.USED += 1
         END ELSE
            WORK.PAGE = LAST.PAGE
            GOSUB PROCESS.PAGE
         END
         ENTRY.LINE = LINE.OFFSET + LINES.USED
         PRINT @(0,ENTRY.LINE):FMT(WHICH.ITEM,"3' 'R"):'  ':
         GOSUB ENTER.KEY
         IF NOT(REC.FOUND) THEN
            COUNT.KEY -= 1
            LAST.PAGE = INT((COUNT.KEY-1)/LINES.PER.PAGE) + 1
            LAST.ITEM.TO.DISPLAY -= 1
            LINES.USED -= 1
         END
      UNTIL REC.KEY = ''
      REPEAT
      RETURN


*
*
*
PROCESS.CHANGE: 
      LOOP
         PROMPT.STR = 'Entry to change: '
         GOSUB GET.ENTRY
         IF HAVE.ENTRY THEN
            GOSUB ENTER.KEY
            IF NOT(REC.FOUND) THEN
               REC.KEY = REC.KEY.LIST<WHICH.ITEM>
               PRINT @(ENTRY.COLUMN,ENTRY.LINE):FMT(REC.KEY,KEY.FORMAT):
            END
         END
      UNTIL NOT(HAVE.ENTRY)
      REPEAT
      RETURN


*
*
*
GET.ENTRY: 
      HAVE.ENTRY = 0
      LOOP
         PRINT @(0,22):PROMPT.STR:CLEAR.EOL:@(LEN(PROMPT.STR)+2):
         INPUT WHICH.ITEM
         BEGIN CASE
            CASE WHICH.ITEM = ''
               NULL
            CASE NUM(WHICH.ITEM)
               IF WHICH.ITEM > 0 AND WHICH.ITEM <= COUNT.KEY THEN
                  HAVE.ENTRY = 1
                  ENTRY.LINE = WHICH.ITEM - FIRST.ITEM.TO.DISPLAY + LINE.OFFSET + 1
               END
            CASE 1
               NULL
         END CASE
      UNTIL HAVE.ENTRY OR WHICH.ITEM = ''
      REPEAT

      RETURN


*
*
*
ENTER.KEY: 
      IF VERIFY.SUBROUTINE.NAME = '' THEN
         PRINT @(ENTRY.COLUMN,ENTRY.LINE):KEY.MASK:@(ENTRY.COLUMN):
         INPUT REC.KEY
      END ELSE
         LOOP
            SCREEN.CHANGE = 0
            CALL @VERIFY.SUBROUTINE(REC.KEY,FILE.NAME,KEY.MASK,ENTRY.COLUMN,ENTRY.LINE,SCREEN.CHANGE)
            IF SCREEN.CHANGE THEN
               SAVE.REC.KEY = REC.KEY
               GOSUB DISPLAY.HEADINGS
               GOSUB DISPLAY.PAGE
               REC.KEY = SAVE.REC.KEY
               PRINT @(ENTRY.COLUMN,ENTRY.LINE):REC.KEY:
            END
         UNTIL REC.KEY # 'ERROR'
         REPEAT
      END
      IF REC.KEY = '' THEN
         REC.FOUND = 0
      END ELSE
         GOSUB GET.SINGLE.ITEM
         IF REC.FOUND THEN
            REC.KEY.LIST<WHICH.ITEM> = REC.KEY
            VERIFY.LIST<WHICH.ITEM> = VERIFICATION
            VERIFY.LOADED.LIST<WHICH.ITEM> = 1
         END
      END
      PRINT @(ENTRY.COLUMN+KEY.LENGTH+2,ENTRY.LINE):OCONV(VERIFY.LIST<WHICH.ITEM>,VERIFY.DICT.CONV):CLEAR.EOL:
      RETURN



*
*
*
PROCESS.DELETE: 
      LOOP
         PROMPT.STR = 'Entry to delete: '
         GOSUB GET.ENTRY
         IF HAVE.ENTRY THEN
            DEL REC.KEY.LIST<WHICH.ITEM>
            DEL VERIFY.LIST<WHICH.ITEM>
            DEL VERIFY.LOADED.LIST<WHICH.ITEM>
            COUNT.KEY -= 1
            LAST.PAGE = INT((COUNT.KEY-1)/LINES.PER.PAGE) + 1
            GOSUB DISPLAY.PAGE
         END
      UNTIL NOT(HAVE.ENTRY)
      REPEAT
      RETURN


*
*
*
PROCESS.INSERT: 
      LOOP
         PROMPT.STR = 'Insert before entry: '
         GOSUB GET.ENTRY
         IF HAVE.ENTRY THEN
            INS '' BEFORE REC.KEY.LIST<WHICH.ITEM>
            INS '' BEFORE VERIFY.LIST<WHICH.ITEM>
            INS '' BEFORE VERIFY.LOADED.LIST<WHICH.ITEM>
            COUNT.KEY += 1
            LAST.PAGE = INT((COUNT.KEY-1)/LINES.PER.PAGE) + 1
            GOSUB DISPLAY.PAGE
            GOSUB ENTER.KEY
            IF REC.FOUND THEN
               REC.KEY.LIST<WHICH.ITEM> = REC.KEY
               VERIFY.LIST<WHICH.ITEM> = VERIFICATION
               VERIFY.LOADED.LIST<WHICH.ITEM> = 1
            END ELSE
               DEL REC.KEY.LIST<WHICH.ITEM>
               DEL VERIFY.LIST<WHICH.ITEM>
               DEL VERIFY.LOADED.LIST<WHICH.ITEM>
               COUNT.KEY -= 1
               LAST.PAGE = INT((COUNT.KEY-1)/LINES.PER.PAGE) + 1
               GOSUB DISPLAY.PAGE
            END
         END
      UNTIL NOT(HAVE.ENTRY)
      REPEAT
      RETURN



*
*
* PROCESS.PAGE
*
PROCESS.PAGE: 
      IF WORK.PAGE = '' THEN
         WORK.PAGE = CURRENT.PAGE + 1
      END
      IF NUM(WORK.PAGE) THEN
         IF WORK.PAGE < 1 OR WORK.PAGE > LAST.PAGE THEN
            MSG = 'PAGE NUMBER MUST BE FROM 1 TO ':LAST.PAGE:'. [NL] TO CONTINUE'
            CALL LINE.22(MSG)
         END ELSE
            CURRENT.PAGE = WORK.PAGE
            GOSUB DISPLAY.PAGE
         END
      END ELSE
         MSG = '"':WORK.PAGE:'" IS NOT A VALID PAGE NUMBER. [NL] TO CONTINUE'
         CALL LINE.22(MSG)
      END
      RETURN



*
*
*
DISPLAY.PAGE: 
      LAST.ITEM.TO.DISPLAY = CURRENT.PAGE * LINES.PER.PAGE
      FIRST.ITEM.TO.DISPLAY = LAST.ITEM.TO.DISPLAY - LINES.PER.PAGE + 1
      LINE = LINE.OFFSET
      PRINT @(0,LINE.OFFSET+1):CLEAR.EOS
      IF LAST.ITEM.TO.DISPLAY > COUNT.KEY THEN
         LAST.ITEM.TO.DISPLAY = COUNT.KEY
      END
      LINES.USED = LAST.ITEM.TO.DISPLAY - FIRST.ITEM.TO.DISPLAY + 1
      FOR WHICH.DISPLAY.ITEM = FIRST.ITEM.TO.DISPLAY TO LAST.ITEM.TO.DISPLAY
         IF NOT(VERIFY.LOADED.LIST<WHICH.DISPLAY.ITEM>) THEN
            BEG.ITEM = WHICH.DISPLAY.ITEM
            END.ITEM = LAST.ITEM.TO.DISPLAY
            GOSUB LOAD.ITEMS
         END
         REC.KEY = REC.KEY.LIST<WHICH.DISPLAY.ITEM>
         VERIFICATION = VERIFY.LIST<WHICH.DISPLAY.ITEM>
         PRINT.LINE = FMT(WHICH.DISPLAY.ITEM,'3R'):'  '
         PRINT.LINE := FMT(REC.KEY,KEY.FORMAT)
         PRINT.LINE := '  ':OCONV(VERIFICATION,VERIFY.DICT.CONV)
         LINE += 1
         PRINT @(0,LINE):PRINT.LINE:CLEAR.EOL:
      NEXT WHICH.DISPLAY.ITEM
      RETURN



*
*
*
LOAD.ITEMS: 
      FOR LOAD.ITEM = BEG.ITEM TO END.ITEM
         REC.KEY = REC.KEY.LIST<LOAD.ITEM>
         GOSUB GET.SINGLE.ITEM
         VERIFY.LIST<LOAD.ITEM> = VERIFICATION
         VERIFY.LOADED.LIST<LOAD.ITEM> = 1
      NEXT LOAD.ITEM
      RETURN


*
*
*
GET.SINGLE.ITEM: 
      READ @RECORD FROM F.FILE.NAME, REC.KEY THEN
         REC.FOUND = 1
      END ELSE
         REC.FOUND = 0
         @RECORD = ''
      END
      IF HAVE.IDESC THEN
         @ID = REC.KEY
         VERIFICATION = ITYPE(VERIFY.DICT.REC)
      END ELSE
         VERIFICATION = @RECORD<VERIFY.DICT.LOC>
      END
      RETURN



*
*
*
CHECK.OKAY: 
      DEFAULT.ANSWER = 'Y'
      ANSWER.LIST = 'Y,Y***,N'
      LINE = 22
      END.PARAM = 2
      PROMPT.STRINGS = 'IS THIS WHAT YOU WANT?'
      COL.NO = 0
      RETURN.ANSWER = ''
      CALL PROMPT.ANS(RETURN.ANSWER,PROMPT.STRINGS,COL.NO,LINE,ANSWER.LIST,DEFAULT.ANSWER,END.PARAM)
      IF RETURN.ANSWER = 'Y' OR RETURN.ANSWER = 'Y***' THEN
         PRINT
         BEGIN CASE
            CASE COUNT.KEY = 0
               PRINT 'No records selected.'
            CASE COUNT.KEY = 1
               PRINT 'One record selected.'
            CASE 1
               PRINT COUNT.KEY:' records selected.'
         END CASE
         FORMLIST REC.KEY.LIST
         EXECUTE 'SAVE.LIST ':LIST.NAME
      END ELSE
         PRINT
         PRINT 'Updates to list ':LIST.NAME:' abandoned.'
      END
      RETURN

   END
