      SUBROUTINE PP.PARSE.OPER(LINE,PARAMETERS,PARAM.QUOTED,NUM.PARAMS,FORM.NUM)
*
* INFO/BASIC SUBROUTINE
* 5/8/87
* DWS
* TITLE ----- PP.PARSE.OPER
*
*
* MODULE : PRINT.PAGE
* PURPOSE: PARSE EVALUATE PHRASE
*
*     Last updated by LIVE (ROTMAN) at 09:36:40 on 09/11/1989.
* Allow SUBROUTINE field type.
* Add &INITIALIZATION and &TERMINATION sections to definition file.
* Shorten subroutine names for customers with long account names.
*     Last updated by LIVE (SJOQUIST) at 13:52:35 on 07/26/1988.
* Add handling of special characters: (, ), =, etc.
*  adapted from PP.PARSE.LINE
*     Last updated by LIVE (SJOQUIST) at 14:43:58 on 09/11/1987.
*
*************************************************************************
*

      $INSERT I_PRINT.PAGE.COMMON

      COMMON /PARSEOP/ PP.PARSE.LINE.OPEN,
      SPECIAL.CHAR.LIST, SPECIAL.NEXT.CHAR(13)
      IF NOT(PP.PARSE.LINE.OPEN) THEN
         SPECIAL.CHAR.LIST = '#'
         SPECIAL.CHAR.LIST := @FM:'&'
         SPECIAL.CHAR.LIST := @FM:'('
         SPECIAL.CHAR.LIST := @FM:')'
         SPECIAL.CHAR.LIST := @FM:'*'
         SPECIAL.CHAR.LIST := @FM:'+'
         SPECIAL.CHAR.LIST := @FM:'-'
         SPECIAL.CHAR.LIST := @FM:'/'
         SPECIAL.CHAR.LIST := @FM:':'
         SPECIAL.CHAR.LIST := @FM:'<'
         SPECIAL.CHAR.LIST := @FM:'='
         SPECIAL.CHAR.LIST := @FM:'>'
         SPECIAL.CHAR.LIST := @FM:'^'
         MAT SPECIAL.NEXT.CHAR = ''
         SPECIAL.NEXT.CHAR(1) = '>':@VM:'<'
         SPECIAL.NEXT.CHAR(5) = '*'
         SPECIAL.NEXT.CHAR(10) = '=':@VM:'>'
         SPECIAL.NEXT.CHAR(11) = '<':@VM:'>'
         SPECIAL.NEXT.CHAR(12) = '=':@VM:'<'
*
         PP.PARSE.LINE.OPEN=1
      END

      SGL.SPACE = ' '
      NIL = ''
      TRUE = 1
      FALSE = 0

*
*  PARSE LINE INTO LIST OF SEPARATE PARAMETERS & FLAG THEM AS QUOTED OR NOT
*

      NUM.PARAMS = 0
      PARAMETERS = NIL
      PARAM.QUOTED = NIL

      PREV.CHAR = SGL.SPACE
      PREV.SPECIAL = 0
      QUOTE = NIL
      GOSUB PROCESS.LINE
      GOSUB CHECK.FOR.FILE.FIELDS
      RETURN

*
*   READ THROUGH COMMAND LINE AND PARSE IT
*
PROCESS.LINE: 
      LEN.LINE = LEN(LINE)
      FOR I=1 TO LEN.LINE
         CUR.CHAR = LINE[I,1]
         LOCATE CUR.CHAR IN SPECIAL.CHAR.LIST<1> BY 'AL' SETTING SPECIAL.POS ELSE
            SPECIAL.POS = 0
         END
*
*     IF THE QUOTE FLAG IS ON, THEN TAKE EVERYTHING UP TO THE
*       MATCHING END QUOTE AS PART OF THE ITEM
*
         IF QUOTE THEN
            BEGIN CASE
               CASE CUR.CHAR = QUOTE
                  QUOTE = NIL
               CASE 1
                  PARAMETERS<NUM.PARAMS> = PARAMETERS<NUM.PARAMS>:CUR.CHAR
            END CASE
*
*    IF THE CUR.CHARACTER IS A QUOTE, TURN ON QUOTE MODE
*      OTHERWISE ADD IT THE CURRENT ITEM
*
         END ELSE
            BEGIN CASE
               CASE SPECIAL.POS
                  NUM.PARAMS += 1
                  PARAM.QUOTED<NUM.PARAMS> = FALSE
                  PARAMETERS<NUM.PARAMS> = CUR.CHAR
                  IF SPECIAL.NEXT.CHAR(SPECIAL.POS) THEN
                     NEXT.CHAR = LINE[I+1,1]
                     LOCATE NEXT.CHAR IN SPECIAL.NEXT.CHAR(SPECIAL.POS)<1,1> SETTING TEMP THEN
                        PARAMETERS<NUM.PARAMS> = CUR.CHAR:NEXT.CHAR
*
* SPECIAL CASE, INCREMENT I TO SKIP NEXT.CHAR
*
                        I += 1
                     END
                  END
               CASE CUR.CHAR = SGL.SPACE
               CASE CUR.CHAR = '"' OR CUR.CHAR = "'"
                  QUOTE = CUR.CHAR
                  NUM.PARAMS += 1
                  PARAM.QUOTED<NUM.PARAMS> = TRUE
               CASE 1
*
*          IF THIS IS THE BEGINNING OF A NEW ITEM, ADD 1 TO NUM.PARAMS
*
                  IF PREV.CHAR = SGL.SPACE OR PREV.SPECIAL THEN
                     NUM.PARAMS += 1
                     PARAM.QUOTED<NUM.PARAMS> = FALSE
                  END
                  PARAMETERS<NUM.PARAMS> = PARAMETERS<NUM.PARAMS>:CUR.CHAR
            END CASE
         END
         PREV.CHAR = CUR.CHAR
         PREV.SPECIAL = SPECIAL.POS
      NEXT I
      RETURN


*
*
* CHECK FOR FILE/FIELD NAME COMBOS (DELIMITER IS SAME AS DIVISION OPERATOR)
*
CHECK.FOR.FILE.FIELDS: 
      OLD.PARAMETERS = PARAMETERS
      OLD.PARAM.QUOTED = PARAM.QUOTED
      OLD.NUM.PARAMS = NUM.PARAMS
      PARAMETERS = ''
      PARAM.QUOTED = ''
      NUM.PARAMS = 0
      PREV.ITEM = ''
      LOOP
         REMOVE ITEM FROM OLD.PARAMETERS SETTING DELIM
         REMOVE QUOTED FROM OLD.PARAM.QUOTED SETTING DUMMY
         FOUND.FILE.FIELD.ITEM = 0
         IF NOT(QUOTED) AND ITEM = FILE.FIELD.DELIMITER AND PREV.ITEM # '' THEN
            FOR FILE.NUM=1 TO NUM.FILES(FORM.NUM)
               IF PREV.ITEM = PP.FILE.NAME(FILE.NUM,FORM.NUM) THEN
                  FOUND.FILE.FIELD.ITEM = 1
               END
            NEXT FILE.NUM
         END
         IF QUOTED THEN
            PREV.ITEM = ''
         END ELSE
            PREV.ITEM = ITEM
         END
         IF FOUND.FILE.FIELD.ITEM THEN
            REMOVE NEXT.ITEM FROM OLD.PARAMETERS SETTING DELIM
            REMOVE NEXT.QUOTED FROM OLD.PARAM.QUOTED SETTING DUMMY
            IF NOT(NEXT.QUOTED) THEN
               PARAMETERS := ITEM:NEXT.ITEM
            END ELSE
               NUM.PARAMS += 1
               PARAMETERS<NUM.PARAMS> = ITEM
               PARAM.QUOTED<NUM.PARAMS> = QUOTED
               NUM.PARAMS += 1
               PARAMETERS<NUM.PARAMS> = NEXT.ITEM
               PARAM.QUOTED<NUM.PARAMS> = NEXT.QUOTED
            END
         END ELSE
            NUM.PARAMS += 1
            PARAMETERS<NUM.PARAMS> = ITEM
            PARAM.QUOTED<NUM.PARAMS> = QUOTED
         END
      UNTIL DELIM = 0
      REPEAT
      RETURN



   END
