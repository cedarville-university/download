*
* INFO/BASIC PROGRAM
* 9/11/87
* DWS
* TITLE ----- SET.FIELD
*
*
* PURPOSE: SET VALUE OF FIELD IN AN INFO RECORD
*
* Stamped: pts_15 rotmand, /redwood-test-data/test6/apphome, user #3090, 07 May 15, 01:27PM.
*   Add -INTERVAL option.
* Stamped: pts_1 rotmand, /datatel/coll18/live/apphome, user #21140, 05 Sep 13, 07:37AM.
*   Add DEBUG option.
* Stamped: pts_3 rotmand, /datatel/coll18/live/apphome, user #10168, 01 Aug 12, 10:33AM.
*   Add -NO.PROMPT option.
* Stamped: q5 rotmand, /datatel/live/collive, user #21987, 22 Jan 02, 01:13PM.
*   No longer halt execution on security violation...just report it.
* Stamped: r0 rotmand, /datatel/live/collive, user #21834, 19 Dec 01, 07:51AM.
*   Allow @ variables
*     @DATE
*     @TIME
*     @LOGNAME
* Stamped: qb rotmand, /disk1/collive, user #25312, 04 Jan 98, 03:45PM.
*   Add -INSERT.VALUE option.
* Stamped: pty/ttyp5 rotmand, /disk1/collive, user #670, 23 Jan 96, 03:41PM.
*   Add -SINGLE.VALUE option.
* Stamped: pty/ttyp4 rotmand, /disk1/collive, user #614, 23 Jun 94, 02:52PM.
*   Unidata conversion
*     Last updated by LIVE (ROTMAN) at 11:40:32 on 09/20/1989.
*     Last updated by LIVE (ROTMAND) at 10:44:15 on 06/02/1994.
*   Add UNIQUE.VALUE option (appends multi-valued item only if value does
*   not already exist in the field).
*  ALLOW CREATION OF RECORDS IF THEY DON'T EXIST
*     Last updated by LIVE (ROTMAN) at 07:15:19 on 08/30/1988.
*  DISPLAY AN ASTERISK FOR EACH 10 RECORDS PROCESSED
*     Last updated by LIVE (ROTMAN) at 13:23:13 on 05/12/1988.
*  BUILD IN NEW SECURITY FEATURES
*     Last updated by LIVE (SJOQUIST) at 16:26:21 on 05/02/1988.
*  Allow use on dictionaries
*     Last updated by LIVE (SJOQUIST) at 14:30:22 on 09/11/1987.
*     Last updated by LIVE (SJOQUIST) at 11:36:52 on 09/29/1987.
*        HANDLE MULTIVALUE FIELDS BETTER
*
********************************************************************
*
*
*************************************************************************
*
*  This program is provided 'as is' for your use by ROTMAN & SJOQUIST.
*  You are encouraged to verify the accuracy of program functions prior
*  to use with actual data files.
*
*  For a list of programs available for purchase from ROTMAN & SJOQUIST,
*  contact Dave Rotman or Doug Sjoquist:
*
*      Rotman and Sjoquist
*      c/o Cedarville College
*      PO Box 601
*      Cedarville, OH 45314
*      (513) 766-2211
*
*************************************************************************
*


*
* COMMAND LINE SYNTAX
*   SET.FIELD [DICT] filename fieldname value {fieldname value} [-CREATE.RECORDS]
*    where value can be another fieldname, I-desc, or literal
*



*
*
* TABLES
*

      MAX.FIELDS = 99
      DIM DEST.FIELD.NAME(MAX.FIELDS)
      DIM DEST.FIELD.NUMBER(MAX.FIELDS)
      DIM DEST.SM(MAX.FIELDS)
      DIM SRC.FIELD.NAME(MAX.FIELDS)
      DIM SRC.VALUE(MAX.FIELDS)
      DIM SRC.SM(MAX.FIELDS)
      DIM SRC.FIELD(MAX.FIELDS)
      DIM SRC.FIELD.QUOTED(MAX.FIELDS)

      DIM PARAM(MAX.FIELDS*2 + 4)
      DIM INFO.REC(999)


*
*
* SET UP
*

      NIL = ''
      TRUE = 1
      FALSE = 0
      PROMPT ''
      TEMP = @(0,0)
      LOWER.CASE = 'abcdefghijklmnopqrstuvwxyz'
      UPPER.CASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
      COMMAND.LINE = @SENTENCE

      NUM.SEL = @SYSTEM.RETURN.CODE
      NUM.FIELDS = 0
      NUM.RECS = 0
      PARAM.STR = NIL
      PARAM.QUOTED = NIL
      NUM.PARAMS = 0

      GOSUB LOAD.PARAMETERS
      GOSUB OPEN.FILES
      GOSUB GET.DICT.ITEMS
      IF NOT(CONTINUE) THEN
         CRT 'CAN NOT CONTINUE WITH ERRORS'
         STOP
      END
      GOSUB CHECK.SECURITY
      GOSUB CRT.INTENTIONS
      IF X.PROMPT.FOR.CONFIRMATION THEN
         GOSUB OKAY.TO.PROCEED
      END ELSE
         OKAY = TRUE
      END
      IF OKAY THEN
         GOSUB CONVERT.FILE
      END
      GOSUB CLOSE.FILES
      CRT NUM.RECS:' RECORDS PROCESSED'
      STOP




*
*
* LOAD PARAMETERS
*

LOAD.PARAMETERS: 

      CALL PARSE.LINE(COMMAND.LINE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)
      STARTING.PARAM = 2
      MATPARSE PARAM FROM PARAM.STR,@FM
      IF PARAM(STARTING.PARAM) = 'DICT' THEN
         TEST.1 = STARTING.PARAM + 3
         TEST.2 = 1
         DICT.NAME = 'DICT'
         FILE.NAME = PARAM(STARTING.PARAM+1)
         BEG.P = STARTING.PARAM + 2
      END ELSE
         TEST.1 = STARTING.PARAM + 2
         TEST.2 = 0
         DICT.NAME = ''
         FILE.NAME = PARAM(STARTING.PARAM)
         BEG.P = STARTING.PARAM + 1
      END

      LOCATE '-CREATE.RECORDS' IN PARAM.STR<1> SETTING POS THEN
         X.CREATE.RECORDS = TRUE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.CREATE.RECORDS = FALSE
      END
      LOCATE '-NO.PROMPT' IN PARAM.STR<1> SETTING POS THEN
         X.PROMPT.FOR.CONFIRMATION = @FALSE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.PROMPT.FOR.CONFIRMATION = @TRUE
      END

      LOCATE '-UNIQUE.VALUE' IN PARAM.STR<1> SETTING POS THEN
         X.UNIQUE.VALUE = TRUE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.UNIQUE.VALUE = FALSE
      END

      LOCATE '-SINGLE.VALUE' IN PARAM.STR<1> SETTING POS THEN
         X.SINGLE.VALUE = TRUE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.SINGLE.VALUE = FALSE
      END
      LOCATE '-INSERT.VALUE' IN PARAM.STR<1> SETTING POS THEN
         X.INSERT.VALUE = TRUE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.INSERT.VALUE = FALSE
      END
      LOCATE '-APPEND' IN PARAM.STR<1> SETTING POS THEN
         X.APPEND = TRUE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.APPEND = FALSE
      END
      LOCATE '-DEBUG' IN PARAM.STR<1> SETTING POS THEN
         X.DEBUG = TRUE
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 1
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.DEBUG = FALSE
      END
      LOCATE '-INTERVAL' IN PARAM.STR<1> SETTING POS THEN
         X.INTERVAL = PARAM.STR<POS+1>
         IF (X.INTERVAL = '') OR NOT(NUM(X.INTERVAL)) OR (X.INTERVAL LT 1) THEN
            CRT '-INTERVAL must specify an integer greater than zero.'
            STOP
         END
         DEL PARAM.STR<POS>
         DEL PARAM.STR<POS>
         NUM.PARAMS -= 2
         MATPARSE PARAM FROM PARAM.STR,@FM
      END ELSE
         X.INTERVAL = 10
      END
      X.INTERVAL.LINE = 50*X.INTERVAL

      IF NUM.PARAMS < TEST.1 OR MOD(NUM.PARAMS,2) # TEST.2 THEN
         GOSUB DISPLAY.HELP
         STOP
      END

      FOR IPARAM=BEG.P TO NUM.PARAMS STEP 2
         NUM.FIELDS += 1
         DEST.FIELD.NAME(NUM.FIELDS) = PARAM(IPARAM)
         SRC.FIELD.NAME(NUM.FIELDS) = PARAM(IPARAM+1)
         SRC.FIELD.QUOTED(NUM.FIELDS) = PARAM.QUOTED<IPARAM+1>
      NEXT IPARAM
      RETURN


OKAY.TO.PROCEED: 
      CRT 'IS THIS WHAT YOU WANT? ':
      INPUT OKAY
      OKAY = OKAY[1,3]
      CONVERT LOWER.CASE TO UPPER.CASE IN OKAY
      IF OKAY = 'YES' THEN
         OKAY=1
      END ELSE
         OKAY=0
      END
      RETURN



***************************************************************************
* OPTIONAL SECURITY SECTION
***************************************************************************
CHECK.SECURITY: 
      USER.NAME = @LOGNAME
      ACCESS.MODE = 'WRITE'
      FIELD.LIST = DEST.FIELD.NAME(1)
      FOR I = 2 TO NUM.FIELDS
         FIELD.LIST := @VM:DEST.FIELD.NAME(I)
      NEXT I
      ACCESS.OK = ''
      CALL CC.FILE.SECURITY(ACCESS.OK,USER.NAME,FILE.NAME,FIELD.LIST,ACCESS.MODE)
* REPORT ALL EXECUTIONS OF SET.FIELD
* HALT EXECUTION IF USER DOES NOT HAVE WRITE ACCESS
      WANT.RETURN = 'YES'
      SECURITY.ACTION = 'SUCCESS'
      FOR I = 1 TO NUM.FIELDS
         IF NOT(ACCESS.OK<1,I>) THEN
            WANT.RETURN = 'YES'
            SECURITY.ACTION = 'FAILURE'
         END
      NEXT I
      CALL CC.REPORT.SECURITY('SET.FIELD',SECURITY.ACTION,COMMAND.LINE,WANT.RETURN)
      RETURN

*
*
* CONVERT.FILE
*

CONVERT.FILE: 
      CRT 'PROCESSING ':NUM.SEL:' RECORDS...'
      DONE = FALSE
      LOOP
         READNEXT KEY ELSE DONE = TRUE
      UNTIL DONE
         INFO.KEY = KEY<1,1>
         INFO.VALUE = KEY<1,2>
         IF NOT(INFO.VALUE) THEN INFO.VALUE = 0
         NUM.RECS += 1
         IF MOD(NUM.RECS,X.INTERVAL) = 0 THEN
            CRT '*':
            IF MOD(NUM.RECS,X.INTERVAL.LINE) = 0 THEN
               CRT ' ':NUM.RECS:' ':NUM.SEL
            END
         END
         GOSUB READ.INFO.REC
         IF OKAY THEN
            FOR FIELD.NUM=1 TO NUM.FIELDS
               GOSUB CHANGE.FIELD
            NEXT FIELD.NUM
            IF NOT(X.DEBUG) THEN
               MATWRITE INFO.REC TO F.INFO,INFO.KEY
            END
         END
      REPEAT
      CRT
      RETURN




*
*
* READ INFO REC
*

READ.INFO.REC: 
      OKAY = TRUE
      @ID = INFO.KEY
      READU @RECORD FROM F.INFO,INFO.KEY LOCKED
         CRT '"':INFO.KEY:'" IS LOCKED BY PORT ':STATUS()
         CRT 'NO CHANGES MADE'
         OKAY = FALSE
      END ELSE
         IF X.CREATE.RECORDS THEN
            @RECORD = ''
         END ELSE
            RELEASE F.INFO,INFO.KEY
            CRT 'CAN NOT READ "':INFO.KEY:'"'
            CRT 'NO CHANGES MADE'
            OKAY = FALSE
         END
      END
      IF OKAY THEN
         MATPARSE INFO.REC FROM @RECORD,@FM
      END
      RETURN




*
*
* CHANGE.FIELD
*

CHANGE.FIELD: 
      IF SRC.SM(FIELD.NUM) = 'M' THEN
         SRC.INFO.VALUE = INFO.VALUE
      END ELSE
         SRC.INFO.VALUE = 0
      END
      BEGIN CASE
         CASE SRC.FIELD(FIELD.NUM) = NIL
            VALUE = SRC.VALUE(FIELD.NUM)
         CASE SRC.FIELD(FIELD.NUM) = 'D'
            IF SRC.VALUE(FIELD.NUM) = 0 THEN
               VALUE = INFO.KEY
            END ELSE
               VALUE = INFO.REC(SRC.VALUE(FIELD.NUM))<1,SRC.INFO.VALUE>
            END
         CASE SRC.FIELD(FIELD.NUM) = 'I'
            VALUE = ITYPE(SRC.VALUE(FIELD.NUM))
            VALUE = VALUE<1,SRC.INFO.VALUE>
      END CASE
      BEGIN CASE
         CASE X.APPEND
            IF X.DEBUG THEN
               CRT 'Potential append of text ':VALUE:' onto ':INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))
            END
            INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)) = INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)):VALUE
         CASE DEST.SM(FIELD.NUM) = 'S' OR X.SINGLE.VALUE
            IF X.DEBUG THEN
               CRT 'Potential change of ':INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)):' to ':VALUE
            END
            INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)) = VALUE
         CASE X.UNIQUE.VALUE
            TEMP.VALUE = INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))
            LOCATE VALUE IN TEMP.VALUE<1,1> SETTING POS ELSE
               IF X.DEBUG THEN
                  CRT 'Potential append of ':VALUE:' onto ':INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))
               END
               INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))<1,-1> = VALUE
            END
         CASE X.INSERT.VALUE
            IF X.DEBUG THEN
               CRT 'Potential insert of ':VALUE:' before ':INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))
            END
            IF INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)) = '' THEN
               INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)) = VALUE
            END ELSE
               INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)) = VALUE:@VM:INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))
            END
         CASE 1
            IF INFO.VALUE = 0 THEN
               NEW.VALUE = -1
            END ELSE
               NEW.VALUE = INFO.VALUE
            END
            IF X.DEBUG THEN
               CRT 'Setting value ':NEW.VALUE:' of ':INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM)):' to ':VALUE
            END
            INFO.REC(DEST.FIELD.NUMBER(FIELD.NUM))<1,NEW.VALUE> = VALUE
      END CASE
      RETURN




*
*
* OPEN FILES
*

OPEN.FILES: 
      IF DICT.NAME THEN
         OPEN 'DICT',FILE.NAME TO F.INFO ELSE
            CRT 'CAN NOT OPEN "DICT" "':FILE.NAME:'"'
            STOP
         END
         OPEN 'DICT','DICT.DICT' TO F.DICT ELSE
            CRT 'CAN NOT OPEN "DICT.DICT"'
            STOP
         END
      END ELSE
         OPEN '',FILE.NAME TO F.INFO ELSE
            CRT 'CAN NOT OPEN "':FILE.NAME:'"'
            STOP
         END
         OPEN 'DICT',FILE.NAME TO F.DICT ELSE
            CRT 'CAN NOT OPEN "DICT" "':FILE.NAME:'"'
            STOP
         END
      END
      RETURN




*
*
* GET DICT ITEMS
*
GET.DICT.ITEMS: 
      CONTINUE = TRUE
      FOR I=1 TO NUM.FIELDS
         OKAY = TRUE
         READ DICT.REC FROM F.DICT,DEST.FIELD.NAME(I) ELSE
            CRT 'CAN NOT FIND "':DEST.FIELD.NAME(I):'" IN DICT ':FILE.NAME
            OKAY = FALSE
         END
         IF OKAY THEN
            IF DICT.REC<1>[1,1] = 'D' THEN
               IF DICT.REC<2> > 0 THEN
                  DEST.FIELD.NUMBER(I) = DICT.REC<2>
                  IF DICT.REC<6>[1,1] = 'M' THEN
                     DEST.SM(I) = 'M'
                  END ELSE
                     DEST.SM(I) = 'S'
                  END
               END ELSE
                  CRT 'DESTINATION FIELD MUST BE A DATA ITEM, NOT THE ID'
                  CRT '"':DEST.FIELD.NAME(I):'" HAS A LOCATION OF "':DICT.REC<2>:'"'
                  OKAY = FALSE
               END
            END ELSE
               CRT 'DESTINATION FIELDS CAN ONLY BE DATA ITEMS IN ':FILE.NAME
               CRT '"':DEST.FIELD.NAME(I):'" IS TYPE "':DICT.REC<1>:'"'
               OKAY = FALSE
            END
         END
         IF SRC.FIELD.QUOTED(I) THEN
            FOUND = FALSE
         END ELSE
            FOUND = TRUE
            READ DICT.REC FROM F.DICT,SRC.FIELD.NAME(I) ELSE
               FOUND = FALSE
            END
         END
         IF FOUND THEN
            IF DICT.REC<1>[1,1] = 'D' THEN
               SRC.FIELD(I) = 'D'
               SRC.VALUE(I) = DICT.REC<2>
               SRC.SM(I) = DICT.REC<6>
            END ELSE
               SRC.FIELD(I) = 'I'
               SRC.VALUE(I) = DICT.REC
               SRC.SM(I) = DICT.REC<6>
*
*    COMPILE I-DESC IF NEEDED
*
*PRIME*               IF DICT.REC<17> = NIL THEN
               IF DICT.REC<8> = NIL THEN
                  COMMAND = 'CD ':FILE.NAME:' ':SRC.FIELD.NAME(I)
                  EXECUTE COMMAND
                  READ DICT.REC FROM F.DICT,SRC.FIELD.NAME(I) ELSE NULL
                  SRC.VALUE(I) = DICT.REC
               END
            END
         END ELSE
            SRC.FIELD(I) = NIL
            BEGIN CASE
               CASE SRC.FIELD.NAME(I) = '@DATE'
                  X.VALUE = @DATE
               CASE SRC.FIELD.NAME(I) = '@TIME'
                  X.VALUE = @TIME
               CASE SRC.FIELD.NAME(I) = '@LOGNAME'
                  X.VALUE = @LOGNAME
               CASE 1
                  X.VALUE = SRC.FIELD.NAME(I)
            END CASE
            SRC.VALUE(I) = X.VALUE
            SRC.SM(I) = DICT.REC<6>
         END
         IF NOT(OKAY) THEN
            CONTINUE = FALSE
         END
      NEXT I
      RETURN


CRT.INTENTIONS: 
      CRT
      CRT 'FILE NAME: ':
      IF DICT.NAME THEN
         CRT 'DICT ':
      END
      CRT FILE.NAME
      CRT
      CRT ' Field name                    number     Setting to'
      FOR I=1 TO NUM.FIELDS
         CRT FMT(DEST.FIELD.NAME(I):' (':DEST.SM(I):'V)','30L'):
         CRT FMT(DEST.FIELD.NUMBER(I),'5R'):
         CRT SPACE(5):
         BEGIN CASE
            CASE SRC.FIELD(I) = NIL
               CRT '"':SRC.VALUE(I):'"'
            CASE SRC.FIELD(I) = 'D'
               CRT 'Field: ':SRC.VALUE(I)
            CASE SRC.FIELD(I) = 'I'
               CRT 'I-desc: ':SRC.FIELD.NAME(I)
         END CASE
      NEXT I
      IF X.CREATE.RECORDS THEN
         CRT 'Creating new records when necessary.'
      END
      IF X.UNIQUE.VALUE THEN
         CRT 'Appending only unique values.'
      END
      IF X.SINGLE.VALUE THEN
         CRT '***** All destination fields will be treated as single-valued. *****'
      END
      IF X.INSERT.VALUE THEN
         CRT '***** All values will be inserted in front of existing values. *****'
      END
      IF X.DEBUG THEN
         CRT 'Running in debug mode...no actual updates will be performed.'
      END
      RETURN




*
*
* CLOSE.FILES
*

CLOSE.FILES: 
      CLOSE F.INFO
      CLOSE F.DICT
      RETURN


DISPLAY.HELP: 
      CRT
      CRT "Syntax:"
      CRT
      CRT "   SET.FIELD file.name field1 value1 field2 value2 ... fieldN valueN"
      CRT "         [-CREATE.RECORDS] [-UNIQUE.VALUE] [-SINGLE.VALUE] [-INSERT.VALUE]"
      CRT "         [-APPEND]"
      CRT "         [-DEBUG]"
      CRT "         [-INTERVAL intervalsize]"
      CRT "or"
      CRT "   SET.FIELD DICT file.name field1 value1 field2 value2 ... fieldN valueN"
      CRT "         [-CREATE.RECORDS] [-UNIQUE.VALUE] [-SINGLE.VALUE] [-INSERT.VALUE]"
      CRT "         [-DEBUG]"
      CRT "         [-INTERVAL intervalsize]"
      CRT
      CRT " where -CREATE.RECORDS creates records if they do not already exist."
      CRT "       -UNIQUE.VALUE   appends a multi-valued field only if the specified"
      CRT "                       value does not already exist."
      CRT "       -SINGLE.VALUE   treats all destination fields as single-valued"
      CRT "       -INSERT.VALUE   inserts a value before all current values in"
      CRT "                       a multi-valued field (default behavior is"
      CRT "                       to add a new value at the end of the value list)"
      CRT "       -APPEND         add text without creating a new value"
      CRT "       -DEBUG          display potential changes without doing actual updates"
      CRT "       -INTERVAL nnn   display one asterisk for every nnn records (default = 10)"
      CRT
      CRT 'You must supply the field names and values in pairs,'
      CRT 'where the values can be other fieldnames, I-descriptors, or literals.'
      CRT '  eg.  SET.FIELD FA.FILE EMP.AUTH.SENT "Y" DATE.SENT TODAYS.DATE'
      CRT
      CRT 'Values may also be one of the following @ variables:'
      CRT '   @DATE'
      CRT '   @TIME'
      CRT '   @LOGNAME'
      CRT
      RETURN

   END
