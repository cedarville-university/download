      SUBROUTINE PARTIAL.GPA(RETURN.VALUE,TRANS.TERMS.KEY,PASSED.COURSE.LIST,DESIRED.VALUE)
EQU DBG LIT '*IF @LOGNAME = "sjoquist" THEN'
*
* INFO/BASIC SUBROUTINE
* 5/6/88
* DWS
* TITLE ----- PARTIAL.GPA
*
*
* PURPOSE: COMPUTE GPA BASED ON LIST OF COURSES
*
*     Last updated by LIVE (SJOQUIST) at 09:18:02 on 11/13/1992.
* Allow a null PASSED.COURSE.LIST option which checks all
* transcript courses
*     Last updated by LIVE (SJOQUIST) at 09:46:02 on 05/06/1988.
*
*
*************************************************************************
*
*  This program is provided 'as is' for your use by ROTMAN & SJOQUIST.
*  You are encouraged to verify the accuracy of program functions prior
*  to use with actual data files.
*
*  If you have questions about this program, or if you wish to obtain
*  a list of programs available for purchase from ROTMAN & SJOQUIST,
*  contact Dave Rotman or Doug Sjoquist:
*
*      Rotman and Sjoquist
*      c/o Cedarville College
*      PO Box 601
*      Cedarville, OH 45314
*      (513) 766-2211
*
*************************************************************************
*

      MAX.CRS.LISTS = 5
      MAX.TRANS.CRS = 200
      COMMON /PARTGPA/ FIRST.KEY, PREV.KEY, PREV.LIST,
         F.TRANS.TERMS, F.TRANSCRIPTS,
         NUM.COURSE.LISTS, NUM.TRANS.COURSES,
         SAVE.COURSE.LIST(MAX.CRS.LISTS), NUM.COURSES(MAX.CRS.LISTS),
         DEPT.LIST(MAX.CRS.LISTS), CAT.NO.LIST(MAX.CRS.LISTS),
         COURSES.FOUND(MAX.CRS.LISTS),
         CAT.LEN.LIST(MAX.CRS.LISTS), GPA(MAX.CRS.LISTS),
         TOT.GRD.PTS(MAX.CRS.LISTS), TOT.CRED.CALC(MAX.CRS.LISTS),
         GRD.VAL.LIST(MAX.CRS.LISTS),
         GRADE.LIST(MAX.CRS.LISTS),
         CRS.SPARE2(MAX.CRS.LISTS),
         CRS.SPARE3(MAX.CRS.LISTS),
         TR.DEPT(MAX.TRANS.CRS), TR.CAT.NO(MAX.TRANS.CRS),
         TR.CRED.CALC(MAX.TRANS.CRS), TR.GRD.PTS(MAX.TRANS.CRS),
         TR.GRD.VAL(MAX.TRANS.CRS),
         TR.GRADE(MAX.TRANS.CRS),
         TR.SPARE3(MAX.TRANS.CRS)
*
*
* ALLOW FOR MULTIPLE CALLS TO PARTIAL.GPA FROM ONE RECORD
*  (UP TO MAX.CRS.LISTS TIMES)
*
* IF THIS IS THE FIRST TIME PARTIAL.GPA IS CALLED AT ALL,
*   THEN SET THE FIRST.KEY TO THE CURRENT KEY
* THEN IF THIS ROUTINE IS CALLED AGAIN FROM THE SAME ID,
*   THE TABLES ARE SET UP WITH THE NEW COURSE.LIST
* (IF THE SAME KEY IS IN THE SELECT MORE THAN ONCE, THEN IT WILL STILL
*  WORK, IT WILL JUST RELOAD THE TABLES WITH THE SAME VALUES)
*

      RETURN.VALUE = ''
      THIS.IS.THE.FIRST = ''
      CALL FIRST.RECORD(THIS.IS.THE.FIRST,'PARTIAL.GPA')
      IF THIS.IS.THE.FIRST THEN
         NUM.COURSE.LISTS = 0
GOSUB OPEN.FILES
         FIRST.KEY = TRANS.TERMS.KEY:@DATE:@TIME
         PREV.KEY = ''
         PREV.LIST = ''
      END
      TT.KEY = TRANS.TERMS.KEY:@DATE:@TIME
      IF TT.KEY = FIRST.KEY THEN
         GOSUB SET.UP
      END
      GOSUB FIND.WHICH.LIST
      IF TT.KEY # PREV.KEY THEN
         GOSUB LOAD.TRANSCRIPTS
      END
      IF PREV.KEY # TT.KEY OR PREV.LIST # LIST.NUM THEN
         GOSUB CALC.GPA
      END
*
* CHOOSE PIECE TO RETURN
*
      BEGIN CASE
         CASE DESIRED.VALUE = 'GPA' OR DESIRED.VALUE = 'G'
            RETURN.VALUE = GPA(LIST.NUM)
         CASE DESIRED.VALUE = 'POINTS' OR DESIRED.VALUE = 'P'
            RETURN.VALUE = TOT.GRD.PTS(LIST.NUM)
         CASE DESIRED.VALUE = 'CREDITS' OR DESIRED.VALUE = 'C'
            RETURN.VALUE = TOT.CRED.CALC(LIST.NUM)
         CASE DESIRED.VALUE = 'COURSES'
            RETURN.VALUE = COURSES.FOUND(LIST.NUM)
         CASE DESIRED.VALUE = 'GRADE.VALUE'
            RETURN.VALUE = GRD.VAL.LIST(LIST.NUM)
         CASE DESIRED.VALUE = 'GRADES'
            RETURN.VALUE = GRADE.LIST(LIST.NUM)
      END CASE


      PREV.KEY = TT.KEY
      PREV.LIST = LIST.NUM
      RETURN


*
*
* SET UP
*
SET.UP:
*
* IF THE PASSED.COURSE.LIST IS EXACTLY THE SAME, THEN USE THE SAME ENTRY
*  IN THE TABLE.  (JUST IN CASE)
*
      LIST.NUM = 1
      IS.A.MATCH = 0
      LOOP
      UNTIL LIST.NUM > NUM.COURSE.LISTS OR IS.A.MATCH
         IF PASSED.COURSE.LIST = SAVE.COURSE.LIST(LIST.NUM) THEN
            IS.A.MATCH = 1
         END ELSE
            LIST.NUM += 1
         END
      REPEAT

      IF LIST.NUM > MAX.CRS.LISTS THEN
         STOP 'ONLY ':MAX.CRS.LISTS:' DIFFERENT LISTS ALLOWED'
      END
      IF LIST.NUM > NUM.COURSE.LISTS THEN
         NUM.COURSE.LISTS += 1
      END
DBG CRT 'NC = ':NUM.COURSE.LISTS
DBG CRT 'LN = ':LIST.NUM
DBG CRT 'SL = "':SAVE.COURSE.LIST(LIST.NUM):'"'
      SAVE.COURSE.LIST(LIST.NUM) = PASSED.COURSE.LIST
      NUM.COURSES(LIST.NUM) = COUNT(PASSED.COURSE.LIST,@VM) + 1
      DEPT.LIST(LIST.NUM) = ''
      CAT.NO.LIST(LIST.NUM) = ''
      CAT.LEN.LIST(LIST.NUM) = ''
      FOR COURSE.CTR=1 TO NUM.COURSES(LIST.NUM)
         COURSE = PASSED.COURSE.LIST<1,COURSE.CTR>
         CONVERT '@' TO '' IN COURSE    ;* HANDLES WILD CARDS IN COURSE #'S
         DEPT.LIST(LIST.NUM)<COURSE.CTR> = FIELD(COURSE,'*',1,1)
         CAT.NO.LIST(LIST.NUM)<COURSE.CTR> = FIELD(COURSE,'*',2,1)
         CAT.LEN.LIST(LIST.NUM)<COURSE.CTR> = LEN(CAT.NO.LIST(LIST.NUM)<COURSE.CTR>)
      NEXT COURSE.CTR
RETURN
 

* OPEN FILES

OPEN.FILES:
      OPEN '','TRANS.TERMS' TO F.TRANS.TERMS ELSE
         CALL FATAL.ERROR('MISSING.FILE','TRANS.TERMS')
      END
      OPEN '','TRANSCRIPTS' TO F.TRANSCRIPTS ELSE
         CALL FATAL.ERROR('MISSING.FILE','TRANSCRIPTS')
      END
      RETURN


*
*
* FIND WHICH LIST
*
FIND.WHICH.LIST:
      LIST.NUM = 1
      IS.A.MATCH = 0
      LOOP
      UNTIL LIST.NUM > NUM.COURSE.LISTS OR IS.A.MATCH
DBG CRT 'LN = ':LIST.NUM
DBG CRT 'PCL = "':PASSED.COURSE.LIST:'"'
DBG CRT 'SCL = "':SAVE.COURSE.LIST(LIST.NUM):'"'
         IF PASSED.COURSE.LIST = SAVE.COURSE.LIST(LIST.NUM) THEN
            IS.A.MATCH = 1
         END ELSE
            LIST.NUM += 1
         END
      REPEAT
      IF NOT(IS.A.MATCH) THEN
         STOP 'FATAL ERROR IN PARTIAL GPA: "':PASSED.COURSE.LIST:'" NOT FOUND IN LIST'
      END
      RETURN


*
*
* LOAD TRANSCRIPT RECORDS
*
LOAD.TRANSCRIPTS:
      NUM.TRANS.COURSES = 0
      READ TRANS.TERMS.REC FROM F.TRANS.TERMS, TRANS.TERMS.KEY ELSE
         RETURN
      END
      NUM.TT = COUNT(TRANS.TERMS.REC,@VM) + 1
      FOR I.TT = 1 TO NUM.TT
         TYPE.TERM = TRANS.TERMS.REC<1,I.TT>
         IF FIELD(TYPE.TERM,'*',1,1) = 'I' THEN
            TRANSCRIPTS.KEY = TRANS.TERMS.KEY:'*':TYPE.TERM
            READ TRANSCRIPTS.REC FROM F.TRANSCRIPTS, TRANSCRIPTS.KEY ELSE
               TRANSCRIPTS.REC = ''
            END
            NUM.TRC = COUNT(TRANSCRIPTS.REC<1>,@VM) + 1
            FOR ITRC = 1 TO NUM.TRC
               TR.REPEAT = TRANSCRIPTS.REC<22,ITRC>
*
* SKIP REPEAT FLAGS OF 'X' (FRESHMEN REPEAT RULE, COURSE DOES
*   NOT COUNT IN GPA CALC)
*
               IF TR.REPEAT # 'X' THEN
                  TR.COURSE = TRANSCRIPTS.REC<1,ITRC>
                  NUM.TRANS.COURSES += 1
                  IF NUM.TRANS.COURSES > MAX.TRANS.CRS THEN
                     STOP 'NUM.TRANS.COURSES > ':MAX.TRANS.CRS:' IN "PARTIAL.GPA"'
                  END
                  TR.DEPT(NUM.TRANS.COURSES) = FIELD(TR.COURSE,'*',1,1)
                  TR.CAT.NO(NUM.TRANS.COURSES) = FIELD(TR.COURSE,'*',2,1)
                  TR.CRED.CALC(NUM.TRANS.COURSES) = TRANSCRIPTS.REC<8,ITRC>
                  TR.GRD.VAL(NUM.TRANS.COURSES) = TRANSCRIPTS.REC<6,ITRC>
                  TR.GRADE(NUM.TRANS.COURSES) = TRANSCRIPTS.REC<5,ITRC>
                  TR.GRD.PTS(NUM.TRANS.COURSES) = TRANSCRIPTS.REC<19,ITRC>
               END
            NEXT ITRC
         END
      NEXT I.TT
      RETURN


*
*
* CALC GPA
*
CALC.GPA:
      GPA(LIST.NUM) = ''
      TOT.GRD.PTS(LIST.NUM) = 0
      TOT.CRED.CALC(LIST.NUM) = 0
      COURSES.FOUND(LIST.NUM) = ''
      GRD.VAL.LIST(LIST.NUM) = ''
      GRADE.LIST(LIST.NUM) = ''
      IF NUM.COURSES(LIST.NUM) > 0 THEN
         FOR ITRANS = 1 TO NUM.TRANS.COURSES
            FOR ICRS=1 TO NUM.COURSES(LIST.NUM)
               CHK.DEPT = DEPT.LIST(LIST.NUM)<ICRS>
               CHK.CAT.NO = CAT.NO.LIST(LIST.NUM)<ICRS>
               CHK.CAT.LEN = CAT.LEN.LIST(LIST.NUM)<ICRS>
               GOSUB CHECK.MATCH
               IF COURSES.MATCH THEN
                  TOT.GRD.PTS(LIST.NUM) += TR.GRD.PTS(ITRANS)
                  TOT.CRED.CALC(LIST.NUM) += TR.CRED.CALC(ITRANS)
                  COURSES.FOUND(LIST.NUM)<1,-1> = TR.DEPT(ITRANS):'*':TR.CAT.NO(ITRANS)
                  GRD.VAL.LIST(LIST.NUM)<1,-1> = TR.GRD.VAL(ITRANS) + 0
                  IF TR.GRADE(ITRANS) = '' THEN
                     GRADE.LIST(LIST.NUM)<1,-1> = '*'
                  END ELSE
                     GRADE.LIST(LIST.NUM)<1,-1> = TR.GRADE(ITRANS)
                  END
               END
            NEXT ICRS
         NEXT ITRANS
      END ELSE
         FOR ITRANS=1 TO NUM.TRANS.COURSES
            TOT.GRD.PTS(LIST.NUM) += TR.GRD.PTS(ITRANS)
            TOT.CRED.CALC(LIST.NUM) += TR.CRED.CALC(ITRANS)
            COURSES.FOUND(LIST.NUM)<1,-1> = TR.DEPT(ITRANS):'*':TR.CAT.NO(ITRANS)
            GRD.VAL.LIST(LIST.NUM)<1,-1> = TR.GRD.VAL(ITRANS) + 0
               IF TR.GRADE(ITRANS) = '' THEN
                  GRADE.LIST(LIST.NUM)<1,-1> = '*'
               END ELSE
                  GRADE.LIST(LIST.NUM)<1,-1> = TR.GRADE(ITRANS)
               END
         NEXT ITRANS
      END
      IF TOT.CRED.CALC(LIST.NUM) > 0 THEN
         GPA(LIST.NUM) = TOT.GRD.PTS(LIST.NUM) / TOT.CRED.CALC(LIST.NUM)
         GPA(LIST.NUM) = ICONV(GPA(LIST.NUM),'MD34')
      END
      CONVERT '*' TO '' IN GRADE.LIST(LIST.NUM)
      RETURN


*
*
* CHECK MATCH OF COURSES
*
CHECK.MATCH:
      COURSES.MATCH = 1
* ^ CHARACTER HANDLES NEGATION
      IF CHK.DEPT THEN
         IF CHK.DEPT[1,1] = '^' THEN
            IF CHK.DEPT[2,99] = TR.DEPT(ITRANS) THEN
               COURSES.MATCH = 0
            END
         END ELSE
            IF CHK.DEPT # TR.DEPT(ITRANS) THEN
               COURSES.MATCH = 0
            END
         END
      END
      IF CHK.CAT.LEN > 0 THEN
         IF CHK.CAT.NO[1,1] = '^' THEN
            IF CHK.CAT.NO[2,99] = TR.CAT.NO(ITRANS)[1,CHK.CAT.LEN] THEN
               COURSES.MATCH = 0
            END
         END ELSE
            IF CHK.CAT.NO # TR.CAT.NO(ITRANS)[1,CHK.CAT.LEN] THEN
               COURSES.MATCH = 0
            END
         END
      END
      RETURN

   END
