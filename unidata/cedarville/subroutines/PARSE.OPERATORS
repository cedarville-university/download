      SUBROUTINE PARSE.OPERATORS(LINE,PARAMETERS,PARAM.QUOTED,NUM.PARAMS)
*
* MODULE : EVALUATE.PHRASE
* PURPOSE     : PARSE LINE FOR REPLACE COMMAND
*
* PROGRAMMER  : DOUGLAS W SJOQUIST
*
* DATE WRITTEN: 05-08-87
*
*     Last updated by LIVE (SJOQUIST) at 13:52:35 on 07/26/1988.
* Add handling of special characters: (, ), =, etc.
*  adapted from PARSE.LINE
*     Last updated by LIVE (SJOQUIST) at 14:43:58 on 09/11/1987.
*
*=============================================================
*
*
*
*************************************************************************
*
*  This program is provided 'as is' for your use by ROTMAN & SJOQUIST.
*  You are encouraged to verify the accuracy of program functions prior
*  to use with actual data files.
*
*  If you have questions about this program, or if you wish to obtain
*  a list of programs available for purchase from ROTMAN & SJOQUIST,
*  contact Dave Rotman or Doug Sjoquist:
*
*      Rotman and Sjoquist
*      c/o Cedarville College
*      PO Box 601
*      Cedarville, OH 45314
*      (513) 766-2211
*
*************************************************************************
*
      COMMON /PARSEOP/ F.VOC, PARSE.LINE.OPEN,
         SPECIAL.CHAR.LIST
      IF NOT(PARSE.LINE.OPEN) THEN
         OPEN '','VOC' TO F.VOC ELSE
            STOP 'CAN NOT OPEN "VOC"'
         END
*
         SPECIAL.CHAR.LIST = ''

         SPECIAL.CHAR.LIST<1,1> = '#'
         SPECIAL.CHAR.LIST<2,1,1> = '>'
         SPECIAL.CHAR.LIST<2,1,2> = '<'

         SPECIAL.CHAR.LIST<1,2> = '&'

         SPECIAL.CHAR.LIST<1,3> = '('

         SPECIAL.CHAR.LIST<1,4> = ')'

         SPECIAL.CHAR.LIST<1,5> = '*'

         SPECIAL.CHAR.LIST<1,6> = '+'

         SPECIAL.CHAR.LIST<1,7> = ','

         SPECIAL.CHAR.LIST<1,8> = '-'

         SPECIAL.CHAR.LIST<1,9> = '/'

         SPECIAL.CHAR.LIST<1,10> = ':'

         SPECIAL.CHAR.LIST<1,11> = '<'
         SPECIAL.CHAR.LIST<2,11,1> = '='
         SPECIAL.CHAR.LIST<2,11,2> = '>'

         SPECIAL.CHAR.LIST<1,12> = '='
         SPECIAL.CHAR.LIST<2,12,1> = '<'
         SPECIAL.CHAR.LIST<2,12,2> = '>'

         SPECIAL.CHAR.LIST<1,13> = '>'
         SPECIAL.CHAR.LIST<2,13,1> = '='
         SPECIAL.CHAR.LIST<2,13,2> = '<'

         SPECIAL.CHAR.LIST<1,14> = '^'
*
         PARSE.LINE.OPEN=1
      END

      SGL.SPACE = ' '
      NIL = ''
      TRUE = 1
      FALSE = 0

*
*  PARSE LINE INTO LIST OF SEPARATE ITEMS & FLAG THEM AS QUOTED OR NOT
*

      NUM.PARAMS = 0
      PARAMETERS = NIL
      PARAM.QUOTED = NIL
      NUM.ITEMS = 0
      ITEMS = NIL
      QUOTED.STR = NIL

      PREV.CHAR = SGL.SPACE
      PREV.SPECIAL = 0
      QUOTE = NIL
*
*
* MAIN
*
      GOSUB PROCESS.LINE
      GOSUB MAKE.PARAM
      RETURN

*
*   READ THROUGH COMMAND LINE AND PARSE IT
*
PROCESS.LINE:
      LEN.LINE = LEN(LINE)
      FOR I=1 TO LEN.LINE
         CUR.CHAR = LINE[I,1]
         LOCATE CUR.CHAR IN SPECIAL.CHAR.LIST<1,1> BY 'AL' SETTING SPECIAL.POS ELSE
            SPECIAL.POS = 0
         END
*
*     IF THE QUOTE FLAG IS ON, THEN TAKE EVERYTHING UP TO THE
*       MATCHING END QUOTE AS PART OF THE ITEM
*
         IF QUOTE THEN
            BEGIN CASE
               CASE CUR.CHAR = QUOTE
                  QUOTE = NIL
               CASE 1
                  ITEMS<NUM.ITEMS> = ITEMS<NUM.ITEMS>:CUR.CHAR
            END CASE
*
*    IF THE CUR.CHARACTER IS A QUOTE, TURN ON QUOTE MODE
*      OTHERWISE ADD IT THE CURRENT ITEM
*
         END ELSE
            BEGIN CASE
               CASE SPECIAL.POS
                  NUM.ITEMS += 1
                  QUOTED.STR<NUM.ITEMS> = FALSE
                  ITEMS<NUM.ITEMS> = CUR.CHAR
                  IF SPECIAL.CHAR.LIST<2,SPECIAL.POS> THEN
                     NEXT.CHAR = LINE[I+1,1]
                     LOCATE NEXT.CHAR IN SPECIAL.CHAR.LIST<2,SPECIAL.POS,1> SETTING TEMP THEN
                        ITEMS<NUM.ITEMS> = CUR.CHAR:NEXT.CHAR
*
* SPECIAL CASE, INCREMENT I TO SKIP NEXT.CHAR
*
                        I += 1
                     END
                  END
               CASE CUR.CHAR = SGL.SPACE
               CASE CUR.CHAR = '"' OR CUR.CHAR = "'"
                  QUOTE = CUR.CHAR
                  NUM.ITEMS += 1
                  QUOTED.STR<NUM.ITEMS> = TRUE
               CASE 1
*
*          IF THIS IS THE BEGINNING OF A NEW ITEM, ADD 1 TO NUM.ITEMS
*
                  IF PREV.CHAR = SGL.SPACE OR PREV.SPECIAL THEN
                     NUM.ITEMS += 1
                     QUOTED.STR<NUM.ITEMS> = FALSE
                  END
                  ITEMS<NUM.ITEMS> = ITEMS<NUM.ITEMS>:CUR.CHAR
            END CASE
         END
         PREV.CHAR = CUR.CHAR
         PREV.SPECIAL = SPECIAL.POS
      NEXT I
      RETURN
*
*
* COPY ITEMS LIST TO PARAMETERS LIST, EXPANDING ANY PHRASES IN THE
*  VOC FILE TO ALL THE ITEMS
*
MAKE.PARAM:
      FOR I=1 TO NUM.ITEMS
*
*    GO THROUGH LIST OF ITEMS AND EXPAND ANY PHRASES THAT ARE IN
*      THE VOC
*
         PHRASE = FALSE
         IF NOT(QUOTED.STR<I>) THEN
            FOUND = TRUE
            READ VOC.REC FROM F.VOC,ITEMS<I> ELSE FOUND = FALSE
            IF FOUND AND VOC.REC<1>[1,2] = 'PH' THEN PHRASE = TRUE
         END
*
*     IF ANY ITEMS ARE A PHRASE, PARSE THAT LINE ALSO
*
         IF PHRASE THEN
            GOSUB CHECK.CIRCULAR
            PHRASE.ITEMS = NIL
            PHRASE.QUOTED = NIL
            NUM.PHRASE.ITEMS = 0
            CALL PARSE.OPERATORS(VOC.REC<2>,PHRASE.ITEMS,PHRASE.QUOTED,NUM.PHRASE.ITEMS)
            PARAMETERS<NUM.PARAMS+1> = PHRASE.ITEMS
            PARAM.QUOTED<NUM.PARAMS+1> = PHRASE.QUOTED
            NUM.PARAMS += NUM.PHRASE.ITEMS
         END ELSE
            NUM.PARAMS += 1
            PARAMETERS<NUM.PARAMS> = ITEMS<I>
            IF QUOTED.STR<I> THEN
               PARAM.QUOTED<NUM.PARAMS> = TRUE
            END ELSE
               PARAM.QUOTED<NUM.PARAMS> = FALSE
            END
         END
      NEXT I
      RETURN

*
*
* DO A SIMPLE CHECK FOR A CIRCULAR REFERENCE IN A VOC PHRASE
*
CHECK.CIRCULAR:
      CHECK.PHRASE = TRIM(VOC.REC<2>)
      CONVERT SGL.SPACE TO @VM IN CHECK.PHRASE
      LOCATE ITEMS<I> IN CHECK.PHRASE<1,1> SETTING CIRCULAR ELSE
         CIRCULAR = FALSE
      END
      IF CIRCULAR THEN
         PRINT
         PRINT 'CIRCULAR REFERENCE'
         PRINT '  VOC PHRASE "':ITEMS<I>:'" REFERENCES ITSELF'
         STOP
      END
      RETURN
   END
