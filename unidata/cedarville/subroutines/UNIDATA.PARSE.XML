      SUBROUTINE UNIDATA.PARSE.XML(AL.RETURN,A.RETURN.STATUS,A.XML.STRING,A.EXTRACT.STRING,A.DEBUG)
*
* UNIBASIC SUBROUTINE
* 06/25/2003
* DLR
* TITLE ----- UNIDATA.PARSE.XML
*
*
* MODULE :
* PURPOSE: CALL UNIDATA ROUTINES TO PARSE AN XML STRING
*
* Stamped: p3 rotmand, /datatel/live/collive, user #28934, 15 Oct 04, 07:32AM.
*  Move SAVE.KEY.HOLD assignment outside of loop.
* Stamped: p2 rotmand, /datatel/live/collive, user #12383, 25 Jun 03, 04:48PM.
*     Last updated by LIVE (SJOQUIST) at 15:28:49 on 01/28/1991.
*
*************************************************************************
*
*

      $INSERT XML.H FROM LOCAL.SOURCE


      AL.RETURN = ''
      A.RETURN.STATUS = ''
      IF A.XML.STRING = '' THEN
         RETURN
      END
      IF A.EXTRACT.STRING = '' THEN
         RETURN
      END
      IF (A.DEBUG = @TRUE) OR (A.DEBUG = 'Y') THEN
         X.DEBUG = @TRUE
      END ELSE
         X.DEBUG = @FALSE
      END
      GOSUB SET.UP

      X.MAX.LOOP = 500
      X.HAVE.KEY = @FALSE
      X.LOOP.COUNT = 1
* DLR 10/15/2004
* WE'LL VARY THE RANDOM NUMBER BUT LEAVE THE TIME PORTION OF THE
* KEY FIXED (HOPING FOR BETTER LOOP SPEED)
      SAVE.KV.HOLD = @LOGNAME:'_':TIME()
      LOOP
         TEMP.KEY = SAVE.KV.HOLD:'_':FMT(RND(9000),'4"0"R')
         KV.HOLD.XML = TEMP.KEY:'_XML'
         READ X.TEST FROM F.HOLD, KV.HOLD.XML ELSE
            X.HAVE.KEY = @TRUE
         END
      UNTIL X.HAVE.KEY OR (X.LOOP.COUNT GE X.MAX.LOOP)
         X.LOOP.COUNT += 1
      REPEAT
      IF NOT(X.HAVE.KEY) THEN
         X.STATUS = 999
         X.FROM = 'BUILDKEY'
         GOSUB HANDLE.STATUS
         RETURN
      END
      KV.HOLD.EXT = TEMP.KEY:'_EXT'
      WRITE A.XML.STRING ON F.HOLD,KV.HOLD.XML
      WRITE A.EXTRACT.STRING ON F.HOLD,KV.HOLD.EXT

      XML.PATH = './_HOLD_/':KV.HOLD.XML
      EXT.PATH = './_HOLD_/':KV.HOLD.EXT

      IF X.DEBUG THEN
         CRT OCONV(TIME(),'MTHS'):' PREPARING...'
      END
      PREPARE.STATUS = PREPAREXML(XML.PATH,XML.HANDLE)
      IF PREPARE.STATUS THEN
         X.STATUS = PREPARE.STATUS
         X.FROM = 'PREPARE'
         GOSUB HANDLE.STATUS
         RETURN
      END

      IF X.DEBUG THEN
         CRT OCONV(TIME(),'MTHS'):' OPENING...'
      END
      OPEN.STATUS = OPENXMLDATA(XML.HANDLE,EXT.PATH,DATA.HANDLE)
      IF OPEN.STATUS THEN
         X.STATUS = OPEN.STATUS
         X.FROM = 'OPEN'
         GOSUB HANDLE.STATUS
         RETURN
      END

      IF X.DEBUG THEN
         CRT OCONV(TIME(),'MTHS'):' READ LOOP...'
      END
      WHICH.RETURN = 0
      LOOP
         X.REC = ''
         READ.STATUS = READXMLDATA(DATA.HANDLE,X.REC)
      UNTIL READ.STATUS NE 0
         IF X.DEBUG THEN
            CRT 'X.REC: ':X.REC
         END
         WHICH.RETURN += 1
         AL.RETURN<WHICH.RETURN> = LOWER(X.REC)
      REPEAT
      IF READ.STATUS NE XML.EOF THEN
         X.STATUS = READ.STATUS
         X.FROM = 'READ'
         GOSUB HANDLE.STATUS
         RETURN
      END

      IF X.DEBUG THEN
         CRT OCONV(TIME(),'MTHS'):' CLOSING...'
      END
      CLOSE.STATUS = CLOSEXMLDATA(DATA.HANDLE)
      IF CLOSE.STATUS THEN
         X.STATUS = CLOSE.STATUS
         X.FROM = 'CLOSE'
         GOSUB HANDLE.STATUS
         RETURN
      END

      IF X.DEBUG THEN
         CRT OCONV(TIME(),'MTHS'):' RELEASING...'
      END
      RELEASE.STATUS = RELEASEXML(XML.HANDLE)
      IF RELEASE.STATUS THEN
         X.STATUS = RELEASE.STATUS
         X.FROM = 'RELEASE'
         GOSUB HANDLE.STATUS
         RETURN
      END

      DELETE F.HOLD,KV.HOLD.XML
      DELETE F.HOLD,KV.HOLD.EXT

      RETURN



HANDLE.STATUS: 
      A.RETURN.STATUS = X.STATUS
      IF X.DEBUG THEN
         CRT OCONV(TIME(),'MTHS'):' Error status ':X.STATUS:' received from ':X.FROM
         Y.STATUS = XMLERROR(Y.MESSAGE)
         CRT Y.MESSAGE
      END
      RETURN


SET.UP: 
      ERROR.RET = ''
      ERROR.MSG = ''
      F.HOLD = ''
      CALL OPEN.FILE(F.HOLD,'_HOLD_',ERROR.RET,ERROR.MSG)
      RETURN



   END
