SUBROUTINE CC.COMMAND.SECURITY(ACCESS.OK)
*DLR*      SUBROUTINE CC.COMMAND.SECURITY(VOCLIB.REC,SENTENCE,LEVEL,PORT,WHO,LOG.NAME,OK)
*
* INFO/BASIC SUBROUTINE
* 2/25/88
* DWS
* TITLE ----- CC.COMMAND.SECURITY
*
*
* PURPOSE: ALLOW SOME COMMANDS IN REMOTE DICTIONARIES FOR COMPUTER
*          CENTER STAFF, BUT NOT FOR USERS (EG. QUIT)
*          ALSO RECORD EXECUTIONS OF VARIOUS COMMANDS
*
* Stamped: pty/ttyp8 sjoquist, /disk1/collive, user #12854, 24 Jun 94, 08:17PM.
* Updated for HP-UX
*     Last updated by LIVE (ROTMAND) at 12:57:46 on 03/29/1994.
* Allow COPY FROM &SAVEDLISTS& TO ...any file with 'LIST' in name...
*     Last updated by LIVE (ROTMAN) at 16:19:14 on 06/12/1990.
* Allow CHECKS to be selected anytime.
*     Last updated by LIVE (SJOQUIST) at 09:48:23 on 06/05/1990.
* Instead of check for week days, call WORK.DAY subroutine
*     Last updated by LIVE (SJOQUIST) at 09:13:46 on 05/29/1990.
* Allow VOUCHERS file to be selected regardless of the size
*     Last updated by LIVE (ROTMAN) at 13:59:46 on 10/26/1989.
* Do some checking on file sizes.
*     Last updated by LIVE (ROTMAN) at 11:58:53 on 11/07/1988.
* BUILD IN COMMAND REPORTING
*     Last updated by LIVE (SJOQUIST) at 10:54:10 on 02/25/1988.
*
********************************************************************
*

$INCLUDE LOCAL.SOURCE I_C26.STANDARD

      COMMON /CFILSEC/ F.COMMAND.HIST, F.FILE.SIZES,
         INDEXED.FILE.LIST, INDEXED.FIELD.LIST,
         USER.LIST, COMMAND.LIST,
         CFILESEC.SPARE1,
         CFILESEC.SPARE2,
         CFILESEC.SPARE3,
         CFILESEC.SPARE4,
         CFILESEC.SPARE5,
         CFILSEC.SET

      IF NOT(CFILSEC.SET) THEN
         GOSUB SET.UP.COMMON
      END

      DEFAULT.SIZE.TO.CHECK = 10
*
* IF THE MAX SIZE IS LISTED AS -1, THEN THERE IS NO LIMIT
*
      DEFAULT.MAX.SIZE.DURING.DAY = 125000
      MAX.SIZE.DURING.DAY.LIST = ''
      MAX.SIZE.DURING.DAY.LIST<1,1> = 'VOUCHERS'
      MAX.SIZE.DURING.DAY.LIST<2,1> = '-1'
      MAX.SIZE.DURING.DAY.LIST<1,2> = 'FA.ITEMS'
      MAX.SIZE.DURING.DAY.LIST<2,2> = '-1'
      MAX.SIZE.DURING.DAY.LIST<1,3> = 'CHECKS'
      MAX.SIZE.DURING.DAY.LIST<2,3> = '-1'
      MAX.SIZE.DURING.DAY.LIST<1,4> = 'DONOR.GIFTS'
      MAX.SIZE.DURING.DAY.LIST<2,4> = '-1'
      MAX.SIZE.DURING.DAY.LIST<1,5> = 'STUD.SCHEDS'
      MAX.SIZE.DURING.DAY.LIST<2,5> = '-1'
*
      STARTING.TIME = ICONV('7:15AM','MTHS')
      ENDING.TIME = ICONV('4:45PM','MTHS')

      SIZE.TO.CHECK = @SYSTEM.RETURN.CODE
      IF SIZE.TO.CHECK < -1 THEN
         SIZE.TO.CHECK = 0
      END
      USER = @LOGNAME
      NUM.PARAMS = 0
      PARAM.QUOTED = ''
      PARAM.STR = ''
      CALL PARSE.LINE(SENTENCE,PARAM.STR,PARAM.QUOTED,NUM.PARAMS)
      KEYWORD = PARAM.STR<1>
      COMMAND.FILE.NAME = PARAM.STR<2>
      LOCATE USER IN USER.LIST<1> SETTING ACCESS.OK THEN
         ACCESS.OK = 1
         RETURN
      END


      ACCESS.OK = 0
      MSG = '"':KEYWORD:'" is not in your vocabulary file.'
      BEGIN CASE
         CASE KEYWORD = 'JOB'
            IF @LEVEL > 0 THEN
               ACCESS.OK = 1
            END
         CASE KEYWORD = 'KERMIT' OR KEYWORD = 'ATTACH' OR KEYWORD = 'KERMIT8'
            IF @LEVEL > 0 THEN
               ACCESS.OK = 1
            END
         CASE KEYWORD = 'SELECT' OR KEYWORD = 'SSELECT'
            ACCESS.OK = 1
            GOSUB CHECK.FILE.SIZE
         CASE KEYWORD = 'LIST' OR KEYWORD = 'SORT'
            ACCESS.OK = 1
            GOSUB CHECK.FILE.SIZE
         CASE KEYWORD = 'COUNT' OR KEYWORD = 'SUM'
            ACCESS.OK = 1
            GOSUB CHECK.FILE.SIZE
         CASE KEYWORD = 'GET.LIST' OR KEYWORD = 'GET-LIST'
            ACCESS.OK = 1
         CASE KEYWORD = 'COPY'
            ACCESS.OK = 1
            GOSUB CHECK.COPY.COMMAND
         CASE KEYWORD = 'QUIT' AND USER = 'TEST.REMOTE'
            ACCESS.OK = 1
      END CASE
      IF ACCESS.OK THEN
         LOCATE KEYWORD IN COMMAND.LIST<1> SETTING POS ELSE POS = 0
         IF POS OR USER = 'EDUCATION' THEN
            COMMAND.HIST.KEY = USER:'*':DATE():'*':TIME()
            COMMAND.HIST.REC = SENTENCE
            COMMAND.HIST.REC<2> = @SYSTEM.RETURN.CODE
            WRITE COMMAND.HIST.REC ON F.COMMAND.HIST,COMMAND.HIST.KEY
         END
      END ELSE
         COUNT.MSG = COUNT(MSG,@FM) + 1
         FOR WHICH.MSG = 1 TO COUNT.MSG
            CRT MSG<WHICH.MSG>:@SYS.BELL
         NEXT WHICH.MSG
      END
      RETURN


*
*
*
SET.UP.COMMON:
      FILE.NAME.LIST = ''
      FILE.SIZE.LIST = ''
      ERROR.RET = ''
      ERROR.MSG = ''
      F.COMMAND.HIST = ''
      CALL OPEN.FILE(F.COMMAND.HIST,'COMMAND.HIST',ERROR.RET,ERROR.MSG)
      F.FILE.SIZES = ''
      CALL OPEN.FILE(F.FILE.SIZES,'FILE.SIZES',ERROR.RET,ERROR.MSG)
      USER.LIST = 'SYSTEM'
      USER.LIST := @FM:'ROTMAND'
      USER.LIST := @FM:'LAKESC'
      USER.LIST := @FM:'HOWDERS'

      COMMAND.LIST = ''
      COMMAND.LIST<-1> = 'LIST'
      COMMAND.LIST<-1> = 'SORT'
      COMMAND.LIST<-1> = 'SELECT'
      COMMAND.LIST<-1> = 'SSELECT'
      COMMAND.LIST<-1> = 'COUNT'
      COMMAND.LIST<-1> = 'SUM'
      COMMAND.LIST<-1> = 'GET.LIST'
      COMMAND.LIST<-1> = 'KERMIT'
      COMMAND.LIST<-1> = 'KERMIT8'
      COMMAND.LIST<-1> = 'ATTACH'

      INDEXED.FILE.LIST = ''
      INDEXED.FIELD.LIST = ''

      CFILSEC.SET = TRUE
      RETURN


*
*
*
GET.TRUE.FILE.NAME:
      F.FILE.NAME = ''
      CALL OPEN.FILE(F.FILE.NAME,COMMAND.FILE.NAME,ERROR.RET,ERROR.MSG)
      PATHNAME=FILEINFO(F.FILE.NAME,FINFO$PATHNAME)
      L = LEN(PATHNAME)
      LOOP
      UNTIL PATHNAME[L,1] = '>' OR L = 1
         L -= 1
      REPEAT
      IF L = 1 THEN
         ISTART = 1
      END ELSE
         ISTART = L+1
      END
      FILE.NAME = PATHNAME[ISTART,32000]
      RETURN



*
*
*
CHECK.FILE.SIZE:
* DICTIONARIES ARE ALWAYS OKAY
      IF COMMAND.FILE.NAME = 'DICT' THEN
         RETURN
      END
* IF THERE ARE MORE THAN 2 PARAMETERS AND THERE IS NO 'WITH' PHRASE, THE
* USER IS SELECTING SPECIFIC RECORD KEYS
      LOCATE 'WITH' IN PARAM.STR<1> SETTING POS ELSE
         IF NUM.PARAMS > 2 THEN
            RETURN
         END
      END
* NOW WE CAN ACTUALLY CHECK THE FILE SIZE
      GOSUB GET.TRUE.FILE.NAME
      CHECK.FINISHED = 0
      GOSUB CHECK.DAY
      IF CHECK.FINISHED THEN
         RETURN
      END
      GOSUB CHECK.TIME
      IF CHECK.FINISHED THEN
         RETURN
      END
      GOSUB GET.INDEX.DATA
      GOSUB CHECK.INDEX
      IF CHECK.FINISHED THEN
         RETURN
      END

      GOSUB LOOK.FOR.SAMPLE
      GOSUB GET.FILE.SIZE
      IF SIZE.TO.CHECK < 1 THEN
         SIZE.TO.CHECK = FILE.SIZE
      END
      LOCATE FILE.NAME IN MAX.SIZE.DURING.DAY.LIST<1,1> SETTING MAX.POS THEN
         MAX.SIZE.DURING.DAY = MAX.SIZE.DURING.DAY.LIST<2,MAX.POS>
      END ELSE
         MAX.SIZE.DURING.DAY = DEFAULT.MAX.SIZE.DURING.DAY
      END

      IF SIZE.TO.CHECK > MAX.SIZE.DURING.DAY AND MAX.SIZE.DURING.DAY # -1 THEN
         ACCESS.OK = 0
         MSG = 'Selections of more than ':MAX.SIZE.DURING.DAY:' must not be run during the day.'
         MSG<-1> = 'File ':FILE.NAME:' contains about ':FILE.SIZE:' records.'
         IF INDEX.LIST # '' THEN
            TEMP.LIST = INDEX.LIST
            CONVERT @VM TO ' ' IN TEMP.LIST
            MSG<-1> = 'Rapid selection from file ':FILE.NAME:' can be made'
            MSG<-1> = 'using an alternate index:'
            MSG<-1> = '  ':TEMP.LIST
         END
      END
      RETURN


CHECK.DAY:
      CHECK.DATE = DATE()
      DATE.IS.OKAY = ''
      CALL WORK.DAY(DATE.IS.OKAY, CHECK.DATE)
      IF NOT(DATE.IS.OKAY) THEN
         CHECK.FINISHED = 1
         RETURN
      END
      RETURN


CHECK.TIME:
      CURRENT.TIME = TIME()
      IF CURRENT.TIME < STARTING.TIME OR CURRENT.TIME > ENDING.TIME THEN
         CHECK.FINISHED = 1
         RETURN
      END
      RETURN


CHECK.INDEX:
      LOCATE 'WITH' IN PARAM.STR<3> SETTING WITH.POS ELSE
         RETURN
      END
      FIELD.NAME = PARAM.STR<WITH.POS+1>
      OPERATOR = PARAM.STR<WITH.POS+2>
      IF OPERATOR # '=' AND OPERATOR # 'EQ' THEN
         RETURN
      END
      LOCATE FIELD.NAME IN INDEX.LIST<1> SETTING FIELD.POS THEN
         CHECK.FINISHED = 1
         RETURN
      END
      RETURN



GET.INDEX.DATA:
      LOCATE FILE.NAME IN INDEXED.FILE.LIST<1> SETTING FILE.POS THEN
         INDEX.LIST = INDEXED.FIELD.LIST<FILE.POS>
      END ELSE
         INDEX.LIST = INDICES(F.FILE.NAME)
         IF INDEX.LIST = '' THEN
            RETURN
         END
         CONVERT @FM TO @VM IN INDEX.LIST
         INDEXED.FILE.LIST<-1> = FILE.NAME
         INDEXED.FIELD.LIST<-1> = INDEX.LIST
      END
      RETURN



LOOK.FOR.SAMPLE:
      LOCATE 'SAMPLE' IN PARAM.STR<3> SETTING POS THEN
         SAMPLE.SIZE = PARAM.STR<POS+1>
         IF NUM(SAMPLE.SIZE) AND SAMPLE.SIZE # '' THEN
            SIZE.TO.CHECK = SAMPLE.SIZE
         END ELSE
            SIZE.TO.CHECK = 10
         END
      END
      RETURN


GET.FILE.SIZE:
      READV FILE.SIZE FROM F.FILE.SIZES, FILE.NAME, 2 ELSE
         FILE.SIZE = DEFAULT.SIZE.TO.CHECK
      END
      RETURN




CHECK.COPY.COMMAND:
      LOCATE 'FROM' IN PARAM.STR<2> SETTING FROM.POS ELSE
         ACCESS.OK = 0
         RETURN
      END
      FROM.FILE = PARAM.STR<FROM.POS+1>
      LOCATE 'TO' IN PARAM.STR<2> SETTING TO.POS THEN
         TO.FILE = PARAM.STR<TO.POS+1>
      END ELSE
         TO.FILE = FROM.FILE
      END

      IF FROM.FILE # '&SAVEDLISTS&' THEN
         ACCESS.OK = 0
         RETURN
      END
      IF INDEX(TO.FILE,'LIST',1) < 1 THEN
         ACCESS.OK = 0
         RETURN
      END
      RETURN









   END
